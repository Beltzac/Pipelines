using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Text;
using System.Linq;

namespace Generation
{
    /// <summary>
    /// Source generator that creates state management services for classes ending with 'State'.
    /// </summary>
    [Generator]
    public class StateGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // Register syntax provider to find classes ending with 'State'
            var syntaxProvider = context.SyntaxProvider.CreateSyntaxProvider(
                predicate: static (node, _) =>
                {
                    // Quick check if it's a class
                    if (node is not ClassDeclarationSyntax classDeclaration)
                        return false;

                    // Check if class name ends with "State"
                    return classDeclaration.Identifier.Text.EndsWith("State");
                },
                transform: (generatorSyntaxContext, _) =>
                {
                    var classDeclaration = (ClassDeclarationSyntax)generatorSyntaxContext.Node;
                    var model = generatorSyntaxContext.SemanticModel;

                    // Get semantic information about the class
                    var symbol = model.GetDeclaredSymbol(classDeclaration);
                    if (symbol == null) return default;

                    return (classDeclaration, symbol);
                });

            context.RegisterSourceOutput(syntaxProvider, (context, tuple) =>
            {
                if (tuple.symbol == null)
                {
                    return; // Skip if no valid symbol (transform returned default)
                }

                try
                {
                    var namespaceName = tuple.symbol.ContainingNamespace.ToDisplayString();
                    var className = tuple.symbol.Name;
                    var serviceName = $"{className}Service";

                    var source = GenerateStateServiceSource(namespaceName, className, serviceName);
                    context.AddSource($"{serviceName}.g.cs", SourceText.From(source, Encoding.UTF8));
                }
                catch (Exception ex)
                {
                    context.ReportDiagnostic(Diagnostic.Create(
                        new DiagnosticDescriptor(
                            "SG002",
                            "Generation failed",
                            "Failed to generate state service: {0}",
                            "StateGenerator",
                            DiagnosticSeverity.Error,
                            true),
                        Location.None,
                        ex.Message));
                }
            });
        }

        private static string GenerateStateServiceSource(string namespaceName, string className, string serviceName)
        {
            return $@"// <auto-generated/>
using System;

namespace {namespaceName}
{{
    /// <summary>
    /// Auto-generated state management service for {className}.
    /// </summary>
    public partial class {serviceName}
    {{
        private {className} _state = new();

        /// <summary>
        /// Event that is raised when the state changes.
        /// </summary>
        public event Action? OnChange;

        /// <summary>
        /// Notifies listeners that the state has changed.
        /// </summary>
        protected virtual void NotifyStateChanged() => OnChange?.Invoke();

        /// <summary>
        /// Gets the current state.
        /// </summary>
        /// <returns>The current state instance.</returns>
        public {className} GetState() => _state;

        /// <summary>
        /// Updates the state using the provided action and notifies listeners.
        /// </summary>
        /// <param name=""updateAction"">Action that modifies the state.</param>
        protected void UpdateState(Action<{className}> updateAction)
        {{
            if (updateAction == null)
                throw new ArgumentNullException(nameof(updateAction));

            updateAction(_state);
            NotifyStateChanged();
        }}
    }}
}}";
        }
    }
}
