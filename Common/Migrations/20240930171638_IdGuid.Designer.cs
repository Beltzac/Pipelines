// <auto-generated />
using System;
using Common.Repositories.Interno;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Common.Migrations
{
    [DbContext(typeof(RepositoryDbContext))]
    [Migration("20240930171638_IdGuid")]
    partial class IdGuid
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Build", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Changed")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommitId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorLogs")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Queued")
                        .HasColumnType("TEXT");

                    b.Property<string>("Result")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommitId");

                    b.ToTable("Builds", (string)null);
                });

            modelBuilder.Entity("Commit", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Commits", (string)null);
                });

            modelBuilder.Entity("Pipeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastBuildId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastSuccessfulBuildId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("RepositoryId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LastBuildId");

                    b.HasIndex("LastSuccessfulBuildId");

                    b.HasIndex("RepositoryId")
                        .IsUnique();

                    b.ToTable("Pipelines", (string)null);
                });

            modelBuilder.Entity("Repository", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CloneUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("MasterClonned")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Project")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Repositories", (string)null);
                });

            modelBuilder.Entity("Build", b =>
                {
                    b.HasOne("Commit", "Commit")
                        .WithMany()
                        .HasForeignKey("CommitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Commit");
                });

            modelBuilder.Entity("Pipeline", b =>
                {
                    b.HasOne("Build", "Last")
                        .WithMany()
                        .HasForeignKey("LastBuildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Build", "LastSuccessful")
                        .WithMany()
                        .HasForeignKey("LastSuccessfulBuildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository", null)
                        .WithOne("Pipeline")
                        .HasForeignKey("Pipeline", "RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Last");

                    b.Navigation("LastSuccessful");
                });

            modelBuilder.Entity("Repository", b =>
                {
                    b.Navigation("Pipeline")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
