@using Common.Services
@inject IThemeService ThemeService

@implements IDisposable

<a class="nav-link" href="#" @onclick="ToggleTheme">
    @if (isDark)
    {
        <span class="bi bi-sun"></span> @("Toggle Theme")
    }
    else
    {
        <span class="bi bi-moon"></span> @("Toggle Theme")
    }
</a>

<style>
    .theme-toggle {
        background-color: var(--background-color);
        border: 1px solid var(--border-color);
        color: var(--text-color);
        cursor: pointer;
        padding: 8px;
        border-radius: 50%;
        position: absolute;
        bottom: 1rem;
        left: 50%;
        transform: translateX(-50%);
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .theme-toggle:hover {
        background-color: var(--hover-color);
    }

    .theme-toggle i {
        font-size: 1.2rem;
    }
</style>

@code {
    private bool isDark;

    protected override void OnInitialized()
    {
        isDark = ThemeService.IsDarkMode;
        ThemeService.ThemeChanged += OnThemeChanged;
    }

    private async Task ToggleTheme()
    {
        await ThemeService.ToggleThemeAsync();
        isDark = ThemeService.IsDarkMode;
        StateHasChanged();
    }

    private void OnThemeChanged(object sender, EventArgs e)
    {
        isDark = ThemeService.IsDarkMode;
        StateHasChanged();
    }

    public void Dispose()
    {
        ThemeService.ThemeChanged -= OnThemeChanged;
    }
}
