@using Common.Services
@using static Common.Services.AutoUpdateService
@inject IAutoUpdateService AutoUpdateService

@if (updateAvailable && downloadProgress == 0)
{
    <!-- Show the 'Update Available' link -->
    <a class="nav-link" href="#" @onclick="DownloadUpdateAsync">
        <span class="bi bi-cloud-arrow-down" aria-hidden="true"></span> Update Available
    </a>
}
else if (updateAvailable && downloadProgress > 0)
{
    <ProgressBar ProgressValue="@downloadProgress" TextColor="black" Height="25px"/>
}
else
{
    <!-- Show 'Up to Date' when no update is available -->
    <a class="nav-link disabled" href="#">
        <span class="bi bi-cloud-check" aria-hidden="true"></span> Up to Date
    </a>
}


@code {
    private bool updateAvailable = false;
    private int downloadProgress = 0;
    private Release latestRelease;

    protected override async Task OnInitializedAsync()
    {
        await CheckForUpdatesAsync();
    }

    private async Task CheckForUpdatesAsync()
    {
        latestRelease = await AutoUpdateService.CheckForUpdatesAsync();
        updateAvailable = latestRelease != null;
    }

    private async Task DownloadUpdateAsync()
    {
        try
        {
            downloadProgress = 0;
            if (latestRelease != null)
            {
                await AutoUpdateService.DownloadAndInstallAsync(latestRelease, UpdateProgress);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during update: {ex.Message}");
        }
    }

    private void UpdateProgress(int progress)
    {
        downloadProgress = progress;
        InvokeAsync(StateHasChanged);
    }
}