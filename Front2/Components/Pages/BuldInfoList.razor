@page "/"
@inject SignalRClientService SignalRClientService
@using Common
@using ElectronNET.API
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.RegularExpressions
@using System.Reactive.Subjects
@using System.Reactive.Linq
@using System.Linq.Expressions;
@using Microsoft.AspNetCore.WebUtilities
@inject BuildInfoBlazorApp.Data.BuildInfoService BuildInfoService
@inject IToastService toastService
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject ILogger<NavigationManager> _logger;

<h3>Build Information</h3>

<script>
    function downloadFile(fileName, base64Content) {
    const link = document.createElement('a');
    link.download = fileName;
    link.href = 'data:text/plain;base64,' + base64Content;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}
</script>

<div class="mb-3 d-flex align-items-center">
    <input @ref="filterInputElement" type="text" id="filterInput" class="form-control me-2" @bind="filter" @oninput="OnFilterChange" />
    <button class="btn btn-primary me-2 text-nowrap" @onclick="async () => await CloneAll()">Clone ALL</button>
    <button class="btn btn-primary me-2 text-nowrap" @onclick="async () => await OpenCloneInVSCode()">Open Clone Folder in VS CODE</button>
    <button class="btn btn-primary text-nowrap" @onclick="async () => await CloneAllCmd()">Clone All Script</button>
</div>

@if (buildInfos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Status</th>
                <th>Project</th>
                <th>Pessoa</th>
                <th>Commit</th>
                <th>Link Commit</th>
                <th>Link</th>
                <th>Error Logs</th>
                <th>Clone / Open</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var buildInfo in buildInfos)
            {
                <tr>
                    <td>
                        @if (buildInfo.Pipeline?["LatestBuild"]?.AsDocument?["Status"].AsString == "NotStarted" || buildInfo.Pipeline?["LatestBuild"]?.AsDocument?["Status"].AsString == "InProgress")
                        {
                            <StatusIndicator CurrentStatus="@StatusIndicator.Status.Working" />
                        }
                        else if (buildInfo.Pipeline?["LatestBuild"]?.AsDocument?["Result"].AsString == "Succeeded")
                        {
                            <StatusIndicator CurrentStatus="@StatusIndicator.Status.Success" />
                        }
                        else if (buildInfo.Pipeline?["LatestBuild"]?.AsDocument?["Result"].AsString == "Failed")
                        {
                            <StatusIndicator CurrentStatus="@StatusIndicator.Status.Error" />
                        }
                        else
                        {
                            <StatusIndicator CurrentStatus="@StatusIndicator.Status.Unknown" />
                        }
                    </td>

                    <td class="truncate">@(buildInfo.Project?["Name"].AsString + "/" + @buildInfo.Pipeline?["Name"].AsString)</td>


                    <td>@buildInfo.Pipeline?["LatestBuild"]?.AsDocument?["RequestedFor"]?.AsDocument?["DisplayName"].AsString</td>
                    <td>@((MarkupString)buildInfo.LatestBuildCommit?.AsDocument["Comment"].AsString.ToHtml())</td>


                    <td><button class="btn btn-primary" @onclick="async () => await OpenExternalCommit(buildInfo)">Commit</button></td>
                    <td><button class="btn btn-primary" @onclick="async () => await OpenExternalRun(buildInfo)">Details</button></td>


                    <td>
                        @if (!string.IsNullOrEmpty(buildInfo.ErrorLogs))
                        {
                            <button class="btn btn-primary" @onclick="() => NavigateToLogDetails(buildInfo.Id)">Logs</button>
                        }
                    </td>

                    <td>
                        @if (!buildInfo.Clonned)
                        {
                            <button class="btn btn-primary" @onclick="async () => await Clone(buildInfo.Id)">Clone</button>
                        } 
                        else
                        {
                            <button class="btn btn-primary" @onclick="async () => await Open(buildInfo.Id)">Open</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<BuildInfo> buildInfos;
    private string filter;
    private Subject<string> _searchEvents;
    private IDisposable _subscription;

    private ElementReference filterInputElement;

    protected override async Task OnInitializedAsync()
    {
        //Navigation.LocationChanged += LocationChanged;

        _searchEvents = new Subject<string>();

        _subscription = _searchEvents
            .Throttle(TimeSpan.FromMilliseconds(500))
            .Subscribe(async x =>
            {
                buildInfos = await BuildInfoService.GetBuildInfoAsync(x);
                _logger.LogInformation(x);
                //Navigation.NavigateTo($"?filter={filter}");
                await InvokeAsync(StateHasChanged);
            });

        // var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        // if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("filter", out var filterFromQuery))
        // {
        //     filter = filterFromQuery;
        // }


        buildInfos = await BuildInfoService.GetBuildInfoAsync(filter);


        await SignalRClientService.StartAsync(async id =>
        {
            await ReloadById(id, x => { this.toastService.ShowSuccess($"Build {x.Project?["Name"].AsString + "/" + x.Pipeline?["Name"].AsString} Atualizada"); });
        });
    }

    private async Task ReloadById(int id, Action<BuildInfo> action)
    {
        if (buildInfos.Any(b => b.Id == id))
        {
            // Remove the existing build info with the specified id

            var newBuildInfo = await BuildInfoService.GetBuildInfoByIdAsync(id);
            buildInfos.RemoveAll(b => b.Id == id);

            buildInfos.Add(newBuildInfo);

            // Reorder the build infos
            buildInfos = buildInfos.AsQueryable().OrderByDescending(BuildInfoService.GetLatestBuildDetailsExpression()).ToList();

            action(newBuildInfo);

            // Invoke StateHasChanged on the UI thread
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await filterInputElement.FocusAsync();
        }
    }

    //Disconnect SignalR connection on component disposal
    public async ValueTask DisposeAsync()
    {
        await SignalRClientService.Disconect();
        _subscription.Dispose();
        //Navigation.LocationChanged -= LocationChanged;
    }

    private async Task OnFilterChange(ChangeEventArgs e)
    {
        filter = e.Value.ToString();
        _searchEvents.OnNext(filter);
    }

    private async ValueTask Clone(int buildId)
    {
        await BuildInfoService.CloneRepositoryByBuildInfoIdAsync(buildId);
        this.toastService.ShowSuccess("CLONADO");
    }

    private async ValueTask CloneAll()
    {
        await BuildInfoService.CloneAllRepositoriesAsync();
        this.toastService.ShowSuccess("TODOS OS REPOS FORAM CLONADOS");
    }

    private async ValueTask Open(int buildId)
    {
        await BuildInfoService.OpenProjectByBuildInfoIdAsync(buildId);
    }   

    private async ValueTask OpenCloneInVSCode()
    {
        await BuildInfoService.OpenCloneFolderInVsCode();
    }

    private async ValueTask CloneAllCmd()
    {
        var cloneCommands = await BuildInfoService.GenerateCloneCommands();
        var fileName = "clone_all_tcp.cmd";
        await DownloadFile(fileName, cloneCommands);
    }

    private async Task DownloadFile(string fileName, string fileContent)
    {
        var byteArray = System.Text.Encoding.UTF8.GetBytes(fileContent);
        var base64Content = Convert.ToBase64String(byteArray);
        await JS.InvokeVoidAsync("downloadFile", fileName, base64Content);
    }

    private async Task OpenExternalCommit(BuildInfo x)
    {
        var url = x.LatestBuildCommit?.AsDocument["RemoteUrl"].AsString;
        await Electron.Shell.OpenExternalAsync(url);
    }

    private async Task OpenExternalRun(BuildInfo x)
    {
        var url = x.Pipeline?["LatestBuild"]?.AsDocument?["Links"]?.AsDocument["Links"].AsDocument["web"]["Href"].AsString;
        await Electron.Shell.OpenExternalAsync(url);
    }

    private void NavigateToLogDetails(int buildInfoId)
    {
        NavigationManager.NavigateTo($"/logdetails/{buildInfoId}");
    }

    // async void LocationChanged(object sender, LocationChangedEventArgs e)
    // {
    //     string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
    //     _logger.LogInformation($"Notified of navigation via {navigationMethod} to {e.Location}");

    //     var uri = Navigation.ToAbsoluteUri(e.Location);
    //     if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("filter", out var filterFromQuery))
    //     {
    //         _logger.LogInformation($"Filter from query: {filterFromQuery}");
    //         filter = filterFromQuery;
    //     }else{
    //         filter = string.Empty;
    //     }

    //     _searchEvents.OnNext(filter);

    //     //await InvokeAsync(StateHasChanged);
    // }
}
