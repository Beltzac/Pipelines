@page "/"
@inject SignalRClientService SignalRClientService
@using Common
@using ElectronNET.API
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.RegularExpressions
@using System.Reactive.Subjects
@using System.Reactive.Linq
@using System.Linq.Expressions;
@using Microsoft.AspNetCore.WebUtilities
@inject BuildInfoBlazorApp.Data.BuildInfoService BuildInfoService
@inject IToastService toastService
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject ILogger<NavigationManager> _logger;

<h3>Build Information</h3>

<script>
    function downloadFile(fileName, base64Content) {
    const link = document.createElement('a');
    link.download = fileName;
    link.href = 'data:text/plain;base64,' + base64Content;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}
</script>

<div class="mb-3 d-flex align-items-center">
    <input @ref="filterInputElement" type="text" id="filterInput" class="form-control me-2" @bind="filter" @oninput="OnFilterChange" />
    <button class="btn btn-secondary me-2 text-nowrap" @onclick="ClearFilter">Clear</button>
    <button class="btn btn-primary me-2 text-nowrap" @onclick="async () => await CloneAll()">Clone ALL</button>
    <button class="btn btn-primary me-2 text-nowrap" @onclick="async () => await OpenCloneInVSCode()">Open Clone Folder in VS CODE</button>
    <button class="btn btn-primary text-nowrap" @onclick="async () => await CloneAllCmd()">Clone All Script</button>
</div>


@if (buildInfos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Status</th>
                <th>Project</th>
                <th>Pessoa</th>
                <th>Commit</th>
                <th>Link Commit</th>
                <th>Link</th>
                <th>Error Logs</th>
                <th>Clone / Open</th>
                <th>DEL</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var buildInfo in buildInfos.ToList())
            {
                <tr>
                    <td>
                        @if(buildInfo.Pipeline?.Last == null)
                        {
                            
                        }
                        else if (buildInfo.Pipeline.Last.Status == "NotStarted" || buildInfo.Pipeline.Last.Status == "InProgress")
                        {
                            <StatusIndicator CurrentStatus="@StatusIndicator.Status.Working" />
                        }
                        else if (buildInfo.Pipeline.Last.Result == "Succeeded")
                        {
                            <StatusIndicator CurrentStatus="@StatusIndicator.Status.Success" />
                        }
                        else if (buildInfo.Pipeline.Last.Result == "Failed")
                        {
                            <StatusIndicator CurrentStatus="@StatusIndicator.Status.Error" />
                        }
                        else
                        {
                            <StatusIndicator CurrentStatus="@StatusIndicator.Status.Unknown" />
                        }
                    </td>

                    <td class="truncate">@(buildInfo.Path)</td>


                    <td>@buildInfo.Pipeline?.Last?.Commit.AuthorName</td>
                    <td>@((MarkupString)buildInfo.Pipeline?.Last?.Commit.Message.ToHtml())</td>


                    <td>
                        @if(buildInfo.Pipeline?.Last?.Commit != null)
                        {
                            <button class="btn btn-primary" @onclick="async () => await OpenExternalCommit(buildInfo)">Commit</button>
                        }
                        else 
                        {
                            <button class="btn btn-primary" @onclick="async () => await OpenRepository(buildInfo)">Repository</button>
                        }
                    </td>

                    <td>
                        @if(buildInfo.Pipeline?.Last != null)
                        {
                            <button class="btn btn-primary" @onclick="async () => await OpenExternalRun(buildInfo)">Details</button>
                        }
                    </td>


                    <td>
                        @if (!string.IsNullOrEmpty(buildInfo.Pipeline?.Last?.ErrorLogs))
                        {
                            <button class="btn btn-primary" @onclick="() => NavigateToLogDetails(buildInfo.Id)">Logs</button>
                        }
                    </td>

                    <td>
                        @if (!buildInfo.MasterClonned)
                        {
                            <button class="btn btn-primary" @onclick="async () => await Clone(buildInfo.Id)">Clone</button>
                        } 
                        else
                        {
                            <button class="btn btn-primary" @onclick="async () => await Open(buildInfo.Id)">Open</button>
                        }
                    </td>

                    <td>

                        <button class="btn btn-danger" @onclick="async () => await Delete(buildInfo)">DEL</button>
                      
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Repository> buildInfos;
    private string filter;
    private Subject<string> _searchEvents;
    private IDisposable _subscription;

    private ElementReference filterInputElement;

    protected override async Task OnInitializedAsync()
    {
        _searchEvents = new Subject<string>();

        _subscription = _searchEvents
            .Throttle(TimeSpan.FromMilliseconds(500))
            .Subscribe(async x =>
            {
                buildInfos = await BuildInfoService.GetBuildInfoAsync(x);
                _logger.LogInformation(x);
                //Navigation.NavigateTo($"?filter={filter}");
                await InvokeAsync(StateHasChanged);
            });

        buildInfos = await BuildInfoService.GetBuildInfoAsync(filter);


        await SignalRClientService.StartAsync(async id =>
        {
            await ReloadById(id, x => { this.toastService.ShowSuccess($"Build {x.Path} Atualizada"); });
        });
    }

    private async Task ReloadById(Guid id, Action<Repository> action)
    {
        if (buildInfos.Any(b => b.Id == id))
        {
            // Remove the existing build info with the specified id
            buildInfos.RemoveAll(b => b.Id == id);

            var newBuildInfo = await BuildInfoService.GetBuildInfoByIdAsync(id);
            if (newBuildInfo != null)
            {
                buildInfos.Add(newBuildInfo);
                action(newBuildInfo);
            }

            // Reorder the build infos
            buildInfos = buildInfos.AsQueryable().OrderByDescending(BuildInfoService.GetLatestBuildDetailsExpression()).ToList();

            // Invoke StateHasChanged on the UI thread
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await filterInputElement.FocusAsync();
        }
    }

    //Disconnect SignalR connection on component disposal
    public async ValueTask DisposeAsync()
    {
        await SignalRClientService.Disconect();
        _subscription.Dispose();
    }

    private async Task OnFilterChange(ChangeEventArgs e)
    {
        filter = e.Value.ToString();
        _searchEvents.OnNext(filter);
    }

    private async ValueTask Clone(Guid buildId)
    {
        await BuildInfoService.CloneRepositoryByBuildInfoIdAsync(buildId);
        this.toastService.ShowSuccess("CLONADO");
    }

    private async ValueTask CloneAll()
    {
        await BuildInfoService.CloneAllRepositoriesAsync();
        this.toastService.ShowSuccess("TODOS OS REPOS FORAM CLONADOS");
    }

    private async ValueTask Open(Guid buildId)
    {
        await BuildInfoService.OpenProjectByBuildInfoIdAsync(buildId);
    }   

    private async ValueTask Delete(Repository repo)
    {
        await BuildInfoService.Delete(repo.Id);
    }

    private async ValueTask OpenCloneInVSCode()
    {
        await BuildInfoService.OpenCloneFolderInVsCode();
    }

    private async ValueTask CloneAllCmd()
    {
        var cloneCommands = await BuildInfoService.GenerateCloneCommands();
        var fileName = "clone_all_tcp.cmd";
        await DownloadFile(fileName, cloneCommands);
    }

    private async Task DownloadFile(string fileName, string fileContent)
    {
        var byteArray = System.Text.Encoding.UTF8.GetBytes(fileContent);
        var base64Content = Convert.ToBase64String(byteArray);
        await JS.InvokeVoidAsync("downloadFile", fileName, base64Content);
    }

    private async Task OpenExternalCommit(Repository x)
    {
        var url = x.Pipeline.Last.Commit.Url;
        await Electron.Shell.OpenExternalAsync(url);
    }
     
    private async Task OpenRepository(Repository x)
    {
        var url = x.Url;
        await Electron.Shell.OpenExternalAsync(url);
    }

    private async Task OpenExternalRun(Repository x)
    {
        var url = x.Pipeline.Last.Url;
        await Electron.Shell.OpenExternalAsync(url);
    }

    private void NavigateToLogDetails(Guid buildInfoId)
    {
        NavigationManager.NavigateTo($"/logdetails/{buildInfoId}");
    }

    private async Task ClearFilter()
    {
        filter = string.Empty;
        await OnFilterChange(new ChangeEventArgs { Value = filter });
        await filterInputElement.FocusAsync();
    }
}
