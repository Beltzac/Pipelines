@page "/"
@inject ISignalRClientService SignalRClientService
@using Common
@using Common.Services
@using ElectronNET.API
@using FuzzySharp
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.RegularExpressions
@using System.Reactive.Subjects
@using System.Reactive.Linq
@using System.Linq.Expressions;
@using Microsoft.AspNetCore.WebUtilities
@using Common.Utils
@inject IBuildInfoService BuildInfoService
@inject IToastService toastService
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IConfigurationService ConfigService
@inject ILogger<NavigationManager> _logger;
@inject BuildInfoStateService BuildInfoStateService
@implements IDisposable

<h3>Build Information</h3>

<style>
    .sticky-filter {
    position: sticky;
    top: 0;
    z-index: 1000;
    background-color: white; /* To avoid overlap with the table content */
    padding: 10px 0;
    }
</style>

<ContextMenu Id="tableContextMenu">

    @{
        var repo = context.Data as Repository;
        if (!repo.MasterClonned)
        {
            <Item OnClick="@CloneClickAsync">Clone</Item>
        }
        else
        {
            <Item OnClick="@OpenClickAsync">Open</Item>
        }

        if (!string.IsNullOrEmpty(repo.Pipeline?.Last?.ErrorLogs))
        {
            <Item OnClick="@OpenLogDetailsClickAsync">Error Logs</Item>
        }

        <Item OnClick="@OpenSonarClickAsync">Sonar</Item>

        if (repo.Pipeline?.Last != null)
        {
            <Item OnClick="@OpenExternalRunClickAsync">Open Last Build</Item>
        }

        if (repo.Pipeline?.Last?.Commit != null)
        {
            <Item OnClick="@OpenExternalCommitClickAsync">Open Last Commit</Item>
        }
        else
        {
            <Item OnClick="@OpenRepositoryClickAsync">Open Repository</Item>
        }
    }

    <Item OnClick="@DeleteClickAsync">Delete</Item>
    <Item OnClick="@RefetchClickAsync">Refetch</Item>
    <Item OnClick="@NavigateToPRCreation">Open PR</Item>
</ContextMenu>

<div class="mb-3 d-flex align-items-center sticky-filter">
    <input @ref="filterInputElement" type="text" id="filterInput" class="form-control me-2" @bind="BuildInfoStateService.Filter" @oninput="OnFilterChange" />
    <button class="btn btn-secondary me-2 text-nowrap" @onclick="ClearFilter">Clear</button>
    <button class="btn btn-primary me-2 text-nowrap" @onclick="async () => await CloneAll()">Clone ALL</button>
    <button class="btn btn-primary me-2 text-nowrap" @onclick="async () => await OpenCloneInVSCode()">Open Clone Folder in VS CODE</button>
    <button class="btn btn-primary text-nowrap" @onclick="async () => await CloneAllCmd()">Clone All Script</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Status</th>
            <th>Project</th>
            <th>Pessoa</th>
            <th>Commit</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var buildInfo in BuildInfoStateService.BuildInfos.ToList())
        {
            <ContextMenuTrigger WrapperTag="tr" MenuId="tableContextMenu" Data="buildInfo" @ondblclick="async () => await OpenClickAsync(buildInfo)">
                <td>
                    <StatusIndicator CurrentStatus="GetStatusIndicator(buildInfo)" />
                </td>

                <td class="truncate">@(buildInfo.Path)</td>


                <td>@buildInfo.Pipeline?.Last?.Commit.AuthorName</td>
                <td>@((MarkupString)buildInfo.Pipeline?.Last?.Commit.ToHtml(ConfigService.GetConfig()))</td>

            </ContextMenuTrigger>
        }
    </tbody>
</table>

@code {
    private Subject<string> _searchEvents;
    private IDisposable _subscription;

    private ElementReference filterInputElement;

    protected override async Task OnInitializedAsync()
    {
        BuildInfoStateService.OnChange += () => InvokeAsync(StateHasChanged);
        BuildInfoStateService.Load();

        _searchEvents = new Subject<string>();

        _subscription = _searchEvents
            .Throttle(TimeSpan.FromMilliseconds(500))
            .Subscribe(async x =>
            {
                try
                {
                    BuildInfoStateService.IsLoading = true;

                    var janelas = WindowUtils.EnumerarJanelas().Distinct();

                    var infos = await BuildInfoService.GetBuildInfoAsync(x);

                    BuildInfoStateService.BuildInfos = infos;
                }
                finally
                {
                    BuildInfoStateService.IsLoading = false;
                }
            });

        await SignalRClientService.StartAsync(async id =>
        {
            await ReloadById(id, x => { this.toastService.ShowSuccess($"Build {x.Path} Atualizada"); });
        });

        BuildInfoStateService.InitializeState(x =>
        {
            _searchEvents.OnNext(BuildInfoStateService.Filter); // Primeiro load
        }, !BuildInfoStateService.BuildInfos.Any());
    }

    public static double CountMatchingWindows(IEnumerable<string> titles, string project, string name)
    {
        if (!titles.Any())
        {
            return 0;
        }

        return titles.Max(x => Math.Max(Fuzz.PartialRatio(project, x, FuzzySharp.PreProcess.PreprocessMode.Full), Fuzz.PartialRatio(name, x, FuzzySharp.PreProcess.PreprocessMode.Full)));
    }

    private async Task ReloadById(Guid id, Action<Repository> action)
    {
        if (BuildInfoStateService.BuildInfos != null && BuildInfoStateService.BuildInfos.Any(b => b.Id == id))
        {
            var newBuildInfo = await BuildInfoService.GetBuildInfoByIdAsync(id);
            BuildInfoStateService.BuildInfos = await BuildInfoService.GetBuildInfoAsync(BuildInfoStateService.Filter);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await filterInputElement.FocusAsync();
        }
    }

    //Disconnect SignalR connection on component disposal
    public async ValueTask DisposeAsync()
    {
        await SignalRClientService.Disconect();
        _subscription.Dispose();
    }

    private async Task OnFilterChange(ChangeEventArgs e)
    {
        BuildInfoStateService.Filter = e.Value.ToString();
        _searchEvents.OnNext(BuildInfoStateService.Filter);
    }

    //Global
    private async ValueTask CloneAll()
    {
        await BuildInfoService.CloneAllRepositoriesAsync();
        this.toastService.ShowSuccess("TODOS OS REPOS FORAM CLONADOS");
    }

    private async ValueTask OpenCloneInVSCode()
    {
        await BuildInfoService.OpenCloneFolderInVsCode();
    }

    private async ValueTask CloneAllCmd()
    {
        var cloneCommands = await BuildInfoService.GenerateCloneCommands();
        var fileName = "clone_all_tcp.cmd";
        await DownloadFile(fileName, cloneCommands);
    }

    private async Task DownloadFile(string fileName, string fileContent)
    {
        var byteArray = System.Text.Encoding.UTF8.GetBytes(fileContent);
        var base64Content = Convert.ToBase64String(byteArray);
        await JS.InvokeVoidAsync("downloadFile", fileName, base64Content);
    }

    private async Task ClearFilter()
    {
        BuildInfoStateService.Filter = string.Empty;
        await OnFilterChange(new ChangeEventArgs { Value = BuildInfoStateService.Filter });
        await filterInputElement.FocusAsync();
    }

    async Task CloneRepoAsync(Repository e)
    {
        this.toastService.ShowInfo("Clonando repositorio");
        await BuildInfoService.CloneRepositoryByBuildInfoIdAsync(e.Id);
        this.toastService.ShowSuccess("Clonado");
    }

    //Itens
    async Task DeleteClickAsync (ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        await BuildInfoService.Delete(repo.Id);
    }

    async Task CloneClickAsync (ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        await CloneRepoAsync(repo);
    }

    async Task OpenClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        await OpenClickAsync(repo);
    }

    async Task OpenClickAsync(Repository e)
    {
        if(!e.MasterClonned)
        {
            await CloneRepoAsync(e);
        }

        await BuildInfoService.OpenProjectByBuildInfoIdAsync(e.Id);
    }

    async Task RefetchClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        await BuildInfoService.FetchRepoBuildInfoAsync(repo.Id);
    }

    async Task OpenExternalCommitClickAsync(ItemClickEventArgs e)
    {
        this.toastService.ShowInfo("Atualizando informações da pipeline");
        var repo = e.Data as Repository;
        repo = await BuildInfoService.FetchRepoBuildInfoAsync(repo.Id);

        var url = repo.Pipeline.Last.Commit.Url;
        await OpenFolderUtils.OpenUrlAsync(url);
    }

    async Task OpenRepositoryClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        var url = repo.Url;
        await OpenFolderUtils.OpenUrlAsync(url);
    }

    async Task OpenExternalRunClickAsync(ItemClickEventArgs e)
    {
        this.toastService.ShowInfo("Atualizando informações da pipeline");
        var repo = e.Data as Repository;
        repo = await BuildInfoService.FetchRepoBuildInfoAsync(repo.Id);

        var url = repo.Pipeline.Last.Url;
        await OpenFolderUtils.OpenUrlAsync(url);
    }

    async Task OpenSonarClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        var url = $"https://sonarcloud.io/project/branches_list?id={repo.Project.Replace('.', '-')}-{repo.Name.Replace('.', '-')}";
        await OpenFolderUtils.OpenUrlAsync(url);
    }

    async Task OpenLogDetailsClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        NavigationManager.NavigateTo($"/logdetails/{repo.Id}");
    }

    async Task NavigateToPRCreation(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        await BuildInfoService.NavigateToPRCreationAsync(repo);
    }

    private StatusIndicator.Status GetStatusIndicator(Repository repo)
    {
        if (repo.Pipeline?.Last == null)
            return StatusIndicator.Status.None;

        return repo.Pipeline.Last.Status switch
        {
            "NotStarted" or "InProgress" => StatusIndicator.Status.Working,
            _ when repo.Pipeline.Last.Result == "Succeeded" => StatusIndicator.Status.Success,
            _ when repo.Pipeline.Last.Result == "Failed" => StatusIndicator.Status.Error,
            _ => StatusIndicator.Status.Unknown,
        };
    }

    public void Dispose()
    {
        BuildInfoStateService.OnChange -= () => InvokeAsync(StateHasChanged);
        BuildInfoStateService.Save();
    }
}
