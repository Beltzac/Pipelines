@page "/"
@inject SignalRClientService SignalRClientService
@using Common
@using ElectronNET.API
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.RegularExpressions
@using System.Reactive.Subjects
@using System.Reactive.Linq
@using System.Linq.Expressions;
@using Microsoft.AspNetCore.WebUtilities
@inject BuildInfoBlazorApp.Data.BuildInfoService BuildInfoService
@inject IToastService toastService
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject ILogger<NavigationManager> _logger;

<h3>Build Information</h3>

<script>
    function downloadFile(fileName, base64Content) {
    const link = document.createElement('a');
    link.download = fileName;
    link.href = 'data:text/plain;base64,' + base64Content;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}
</script>

<style>
    .sticky-filter {
        position: sticky;
        top: 0;
        z-index: 1000;
        background-color: white; /* To avoid overlap with the table content */
        padding: 10px 0;
    }
</style>

<ContextMenu Id="tableContextMenu">

    @{
        var repo = context.Data as Repository;
        if (!repo.MasterClonned)
        {
            <Item OnClick="@CloneClickAsync">Clone</Item>
        }
        else
        {
            <Item OnClick="@OpenClickAsync">Open</Item>
        }

        if (!string.IsNullOrEmpty(repo.Pipeline?.Last?.ErrorLogs))
        {
            <Item OnClick="@OpenLogDetailsClickAsync">Error Logs</Item>
            <Item OnClick="@OpenSonarClickAsync">Sonar</Item>
        }

        if (repo.Pipeline?.Last != null)
        {
            <Item OnClick="@OpenExternalRunClickAsync">Open Build</Item>
        }

        if (repo.Pipeline?.Last?.Commit != null)
        {
            <Item OnClick="@OpenExternalCommitClickAsync">Open Commit</Item>
        }
        else
        {
            <Item OnClick="@OpenRepositoryClickAsync">Open Repository</Item>
        }
    }

    <Item OnClick="@DeleteClickAsync">Delete</Item>
    <Item OnClick="@RefetchClickAsync">Refetch</Item>
</ContextMenu>

<div class="mb-3 d-flex align-items-center sticky-filter">
    <input @ref="filterInputElement" type="text" id="filterInput" class="form-control me-2" @bind="filter" @oninput="OnFilterChange" />
    <button class="btn btn-secondary me-2 text-nowrap" @onclick="ClearFilter">Clear</button>
    <button class="btn btn-primary me-2 text-nowrap" @onclick="async () => await CloneAll()">Clone ALL</button>
    <button class="btn btn-primary me-2 text-nowrap" @onclick="async () => await OpenCloneInVSCode()">Open Clone Folder in VS CODE</button>
    <button class="btn btn-primary text-nowrap" @onclick="async () => await CloneAllCmd()">Clone All Script</button>
</div>


@if (buildInfos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Status</th>
                <th>Project</th>
                <th>Pessoa</th>
                <th>Commit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var buildInfo in buildInfos.ToList())
            {
                <ContextMenuTrigger WrapperTag="tr" MenuId="tableContextMenu" Data="buildInfo">
                    <td>
                        @if(buildInfo.Pipeline?.Last == null)
                        {
                            
                        }
                        else if (buildInfo.Pipeline.Last.Status == "NotStarted" || buildInfo.Pipeline.Last.Status == "InProgress")
                        {
                            <StatusIndicator CurrentStatus="@StatusIndicator.Status.Working" />
                        }
                        else if (buildInfo.Pipeline.Last.Result == "Succeeded")
                        {
                            <StatusIndicator CurrentStatus="@StatusIndicator.Status.Success" />
                        }
                        else if (buildInfo.Pipeline.Last.Result == "Failed")
                        {
                            <StatusIndicator CurrentStatus="@StatusIndicator.Status.Error" />
                        }
                        else
                        {
                            <StatusIndicator CurrentStatus="@StatusIndicator.Status.Unknown" />
                        }
                    </td>

                    <td class="truncate">@(buildInfo.Path)</td>


                    <td>@buildInfo.Pipeline?.Last?.Commit.AuthorName</td>
                    <td>@((MarkupString)buildInfo.Pipeline?.Last?.Commit.Message.ToHtml())</td>

                </ContextMenuTrigger>
            }
        </tbody>
    </table>
}

@code {
    private List<Repository> buildInfos;
    private string filter;
    private Subject<string> _searchEvents;
    private IDisposable _subscription;

    private ElementReference filterInputElement;

    protected override async Task OnInitializedAsync()
    {
        _searchEvents = new Subject<string>();

        _subscription = _searchEvents
            .Throttle(TimeSpan.FromMilliseconds(500))
            .Subscribe(async x =>
            {
                buildInfos = await BuildInfoService.GetBuildInfoAsync(x);
                _logger.LogInformation(x);
                //Navigation.NavigateTo($"?filter={filter}");
                await InvokeAsync(StateHasChanged);
            });

        buildInfos = await BuildInfoService.GetBuildInfoAsync(filter);


        await SignalRClientService.StartAsync(async id =>
        {
            await ReloadById(id, x => { this.toastService.ShowSuccess($"Build {x.Path} Atualizada"); });
        });
    }

    private async Task ReloadById(Guid id, Action<Repository> action)
    {
        if (buildInfos.Any(b => b.Id == id))
        {
            var update = false;

            // Remove the existing build info with the specified id
            var count = buildInfos.RemoveAll(b => b.Id == id);
            if (count > 0)
            {
                update = true;
            };

            var newBuildInfo = await BuildInfoService.GetBuildInfoByIdAsync(id);
            if (newBuildInfo != null)
            {
                buildInfos.Add(newBuildInfo);
                action(newBuildInfo);

                // Compile the expression into a Func
                var keySelector = BuildInfoService.GetLatestBuildDetailsExpression().Compile();

                // Sort the list in place
                buildInfos.Sort((x, y) => keySelector(y).CompareTo(keySelector(x)));

                update = true;
            }

            if (update)
            {
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await filterInputElement.FocusAsync();
        }
    }

    //Disconnect SignalR connection on component disposal
    public async ValueTask DisposeAsync()
    {
        await SignalRClientService.Disconect();
        _subscription.Dispose();
    }

    private async Task OnFilterChange(ChangeEventArgs e)
    {
        filter = e.Value.ToString();
        _searchEvents.OnNext(filter);
    }

    //Global
    private async ValueTask CloneAll()
    {
        await BuildInfoService.CloneAllRepositoriesAsync();
        this.toastService.ShowSuccess("TODOS OS REPOS FORAM CLONADOS");
    }

    private async ValueTask OpenCloneInVSCode()
    {
        await BuildInfoService.OpenCloneFolderInVsCode();
    }

    private async ValueTask CloneAllCmd()
    {
        var cloneCommands = await BuildInfoService.GenerateCloneCommands();
        var fileName = "clone_all_tcp.cmd";
        await DownloadFile(fileName, cloneCommands);
    }

    private async Task DownloadFile(string fileName, string fileContent)
    {
        var byteArray = System.Text.Encoding.UTF8.GetBytes(fileContent);
        var base64Content = Convert.ToBase64String(byteArray);
        await JS.InvokeVoidAsync("downloadFile", fileName, base64Content);
    }

    private async Task ClearFilter()
    {
        filter = string.Empty;
        await OnFilterChange(new ChangeEventArgs { Value = filter });
        await filterInputElement.FocusAsync();
    }

    //Itens
    async Task DeleteClickAsync (ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        await BuildInfoService.Delete(repo.Id);
    }

    async Task CloneClickAsync (ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        await BuildInfoService.CloneRepositoryByBuildInfoIdAsync(repo.Id);
        this.toastService.ShowSuccess("CLONADO");
    }

    async Task OpenClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        await BuildInfoService.OpenProjectByBuildInfoIdAsync(repo.Id);
    }

    async Task RefetchClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        await BuildInfoService.FetchBuildInfoByIdAsync(repo.Id);
    }

    async Task OpenExternalCommitClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        var url = repo.Pipeline.Last.Commit.Url;
        await Electron.Shell.OpenExternalAsync(url);
    }

    async Task OpenRepositoryClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        var url = repo.Url;
        await Electron.Shell.OpenExternalAsync(url);
    }

    async Task OpenExternalRunClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        var url = repo.Pipeline.Last.Url;
        await Electron.Shell.OpenExternalAsync(url);
    }   
    
    async Task OpenSonarClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        var url = $"https://sonarcloud.io/project/branches_list?id={repo.Project}-{repo.Name}";
        await Electron.Shell.OpenExternalAsync(url);
    }

    async Task OpenLogDetailsClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        NavigationManager.NavigateTo($"/logdetails/{repo.Id}");
    }
}
