@page "/config-manager"
@using Common.Models
@using Common.ExternalApis
@inject IConfigurationService ConfigService
@inject IToastService ToastService
@inject IOracleSchemaService OracleService
@inject IJSRuntime JSRuntime

<h3>Configuration Manager</h3>

<EditForm Model="@config" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card mb-3">
        <div class="card-header">User Configuration</div>
        <div class="card-body">
            <div class="form-group">
                <label for="username">Username</label>
                <InputText id="username" @bind-Value="config.Username" class="form-control"/>
                <ValidationMessage For="@(() => config.Username)" />
            </div>
            <div class="form-group">
                <label for="pat">Personal Access Token (PAT)</label>
                <InputText id="pat" @bind-Value="config.PAT" class="form-control"/>
                <ValidationMessage For="@(() => config.PAT)" />
            </div>
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-header">Organization Configuration</div>
        <div class="card-body">
            <div class="form-group">
                <label for="orgUrl">Organization URL</label>
                <InputText id="orgUrl" @bind-Value="config.OrganizationUrl" class="form-control"/>
                <ValidationMessage For="@(() => config.OrganizationUrl)" />
            </div>
            <div class="form-group">
                <label for="cloneFolder">Local Clone Folder</label>
                <InputText id="cloneFolder" @bind-Value="config.LocalCloneFolder" class="form-control"/>
                <ValidationMessage For="@(() => config.LocalCloneFolder)" />
            </div>
        </div>
    </div>

    @foreach (var env in config.ConsulEnvironments)
    {
        <div class="card mb-3">
            <div class="card-header">@env.Name Configuration</div>
            <div class="card-body">
                <div class="form-group">
                    <label for="consulName">Consul Environment Name</label>
                    <InputText id="consulName" @bind-Value="env.Name" class="form-control"/>
                    <ValidationMessage For="@(() => env.Name)" />
                </div>
                <div class="form-group">
                    <label for="consulUrl">Consul URL</label>
                    <InputText id="consulUrl" @bind-Value="env.ConsulUrl" class="form-control"/>
                    <ValidationMessage For="@(() => env.ConsulUrl)" />
                </div>
                <div class="form-group">
                    <label for="consulFolder">Consul Folder</label>
                    <InputText id="consulFolder" @bind-Value="env.ConsulFolder" class="form-control"/>
                    <ValidationMessage For="@(() => env.ConsulFolder)" />
                </div>
                <div class="form-group">
                    <label for="consulToken">Consul Token</label>
                    <InputText id="consulToken" @bind-Value="env.ConsulToken" class="form-control"/>
                    <ValidationMessage For="@(() => env.ConsulToken)" />
                </div>
                <button type="button" class="btn btn-danger" @onclick="() => RemoveConsulEnvironment(env)">Remove</button>
            </div>
        </div>
    }

    <button type="button" class="btn btn-secondary" @onclick="AddConsulEnvironment">Add Consul Environment</button>

    <div class="card mb-3">
        <div class="card-header">GitHub Configuration</div>
        <div class="card-body">
            <div class="form-group">
                <label for="githubToken">Github Token</label>
                <InputText id="githubToken" @bind-Value="config.AccessToken" class="form-control"/>
                <ValidationMessage For="@(() => config.AccessToken)" />
            </div>
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-header">Ignore Repositories by Regex</div>
        <div class="card-body">
            @for (int i = 0; i < config.IgnoreRepositoriesRegex.Count; i++)
            {
                var index = i; // Create a local copy of the loop variable
                <div class="input-group mb-2">
                    <InputText @bind-Value="config.IgnoreRepositoriesRegex[index]" class="form-control" />
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveRegex(index)">Remove</button>
                </div>
            }
            <button type="button" class="btn btn-secondary" @onclick="AddRegex">Add Regex</button>
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-header">
            Oracle Environments
            <button class="btn btn-secondary btn-sm float-end" @onclick="AddOracleEnvironment">Add Environment</button>
        </div>
        <div class="card-body">
            @foreach (var env in config.OracleEnvironments)
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <div class="form-group">
                            <label>Name:</label>
                            <InputText class="form-control" @bind-Value="env.Name" />
                        </div>
                        <div class="form-group">
                            <label>Connection String:</label>
                            <InputText class="form-control" @bind-Value="env.ConnectionString" />
                        </div>
                        <div class="form-group">
                            <label>Schema:</label>
                            <InputText class="form-control" @bind-Value="env.Schema" />
                        </div>
                        <div class="mt-2">
                            <button class="btn btn-danger" @onclick="() => RemoveOracleEnvironment(env)">Remove</button>
                            <button class="btn btn-secondary ms-2" @onclick="() => TestOracleConnection(env)">Test Connection</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    private ConfigModel config = new ConfigModel();

    protected override void OnInitialized()
    {
        config = ConfigService.GetConfig();
    }

    private string? selectedConsulEnv;

    private void AddConsulEnvironment()
    {
        config.ConsulEnvironments.Add(new ConsulEnvironment());
    }

    private void RemoveConsulEnvironment(ConsulEnvironment env)
    {
        config.ConsulEnvironments.Remove(env);
    }

    private void AddRegex()
    {
        config.IgnoreRepositoriesRegex.Add(string.Empty);
    }

    private void RemoveRegex(int index)
    {
        if (index >= 0 && index < config.IgnoreRepositoriesRegex.Count)
        {
            config.IgnoreRepositoriesRegex.RemoveAt(index);
        }
    }

    private void AddOracleEnvironment()
    {
        config.OracleEnvironments.Add(new OracleEnvironment());
    }

    private void RemoveOracleEnvironment(OracleEnvironment env)
    {
        config.OracleEnvironments.Remove(env);
    }

    private async Task TestOracleConnection(OracleEnvironment env)
    {
        try
        {
            var result = await OracleService.TestConnectionAsync(env.ConnectionString, env.Schema);
            if (result)
            {
                ToastService.ShowSuccess("Connection test successful");
            }
            else
            {
                ToastService.ShowError("Connection test failed");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Connection test failed: {ex.Message}");
        }
    }

    private async Task ExportViewDDL(string viewName, OracleEnvironment env)
    {
        try
        {
            var ddl = await OracleService.GetViewDefinitionAsync(env.ConnectionString, env.Schema, viewName);
            if (!string.IsNullOrEmpty(ddl))
            {
                var fileName = $"{viewName}_{DateTime.Now:yyyyMMdd}.sql";
                var bytes = System.Text.Encoding.UTF8.GetBytes(ddl);
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "text/plain", Convert.ToBase64String(bytes));
            }
            else
            {
                ToastService.ShowError($"View {viewName} not found");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error exporting DDL: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Validate Oracle environments
            var invalidOracleEnvs = config.OracleEnvironments.Where(e => 
                string.IsNullOrWhiteSpace(e.Name) || 
                string.IsNullOrWhiteSpace(e.ConnectionString) || 
                string.IsNullOrWhiteSpace(e.Schema)).ToList();
                
            if (invalidOracleEnvs.Any())
            {
                ToastService.ShowError("All fields are required for Oracle environments");
                return;
            }

            // Check for duplicate Oracle environment names
            if (config.OracleEnvironments.GroupBy(e => e.Name).Any(g => g.Count() > 1))
            {
                ToastService.ShowError("Oracle environment names must be unique");
                return;
            }

            await ConfigService.SaveConfigAsync(config);
            ToastService.ShowSuccess("Configuration saved successfully!");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving configuration: {ex.Message}");
        }
    }

    private void OnConsulEnvironmentSelected(ChangeEventArgs e)
    {
        selectedConsulEnv = e.Value?.ToString();
    }
}
