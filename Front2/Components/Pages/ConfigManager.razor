@page "/config-manager"
@using Common.Models
@using Common.ExternalApis
@inject IConfigurationService ConfigService
@inject IToastService ToastService
@inject IOracleSchemaService OracleService
@inject IJSRuntime JSRuntime

<div class="container-fluid pb-5">
    <h3 class="mb-4">Configuration Manager</h3>

    <EditForm Model="@config" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <!-- Left Column -->
            <div class="col-md-6">
                <!-- User and Organization Settings -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Basic Settings</h5>
                    </div>
                    <div class="card-body">
                        <h6 class="card-subtitle mb-3">User Configuration</h6>
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" @bind-Value="config.Username" class="form-control"/>
                            <ValidationMessage For="@(() => config.Username)" />
                        </div>
                        <div class="mb-3">
                            <label for="pat" class="form-label">Personal Access Token (PAT)</label>
                            <InputText id="pat" @bind-Value="config.PAT" class="form-control"/>
                            <ValidationMessage For="@(() => config.PAT)" />
                        </div>

                        <hr class="my-4"/>

                        <h6 class="card-subtitle mb-3">Organization Configuration</h6>
                        <div class="mb-3">
                            <label for="orgUrl" class="form-label">Organization URL</label>
                            <InputText id="orgUrl" @bind-Value="config.OrganizationUrl" class="form-control"/>
                            <ValidationMessage For="@(() => config.OrganizationUrl)" />
                        </div>
                        <div class="mb-3">
                            <label for="cloneFolder" class="form-label">Local Clone Folder</label>
                            <InputText id="cloneFolder" @bind-Value="config.LocalCloneFolder" class="form-control"/>
                            <ValidationMessage For="@(() => config.LocalCloneFolder)" />
                        </div>
                    </div>
                </div>

                <!-- GitHub Settings -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">GitHub Configuration</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="githubToken" class="form-label">Github Token</label>
                            <InputText id="githubToken" @bind-Value="config.AccessToken" class="form-control"/>
                            <ValidationMessage For="@(() => config.AccessToken)" />
                        </div>
                    </div>
                </div>

                <!-- Repository Ignore Rules -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Repository Ignore Rules</h5>
                    </div>
                    <div class="card-body">
                        @for (int i = 0; i < config.IgnoreRepositoriesRegex.Count; i++)
                        {
                            var index = i;
                            <div class="input-group mb-2">
                                <InputText @bind-Value="config.IgnoreRepositoriesRegex[index]" class="form-control" placeholder="Enter regex pattern"/>
                                <button type="button" class="btn btn-outline-danger" @onclick="() => RemoveRegex(index)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        }
                        <button type="button" class="btn btn-outline-secondary" @onclick="AddRegex">
                            <i class="fas fa-plus"></i> Add Pattern
                        </button>
                    </div>
                </div>
            </div>

            <!-- Right Column -->
            <div class="col-md-6">
                <!-- Consul Environments -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Consul Environments</h5>
                        <button type="button" class="btn btn-light btn-sm" @onclick="AddConsulEnvironment">
                            <i class="fas fa-plus"></i> Add Environment
                        </button>
                    </div>
                    <div class="card-body">
                        @foreach (var env in config.ConsulEnvironments)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">Environment Name</label>
                                        <InputText @bind-Value="env.Name" class="form-control"/>
                                        <ValidationMessage For="@(() => env.Name)" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Consul URL</label>
                                        <InputText @bind-Value="env.ConsulUrl" class="form-control"/>
                                        <ValidationMessage For="@(() => env.ConsulUrl)" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Consul Folder</label>
                                        <InputText @bind-Value="env.ConsulFolder" class="form-control"/>
                                        <ValidationMessage For="@(() => env.ConsulFolder)" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Consul Token</label>
                                        <InputText @bind-Value="env.ConsulToken" class="form-control"/>
                                        <ValidationMessage For="@(() => env.ConsulToken)" />
                                    </div>
                                    <button type="button" class="btn btn-outline-danger" @onclick="() => RemoveConsulEnvironment(env)">
                                        <i class="fas fa-trash"></i> Remove
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Oracle Environments -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Oracle Environments</h5>
                        <button type="button" class="btn btn-light btn-sm" @onclick="AddOracleEnvironment">
                            <i class="fas fa-plus"></i> Add Environment
                        </button>
                    </div>
                    <div class="card-body">
                        @foreach (var env in config.OracleEnvironments)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">Name</label>
                                        <InputText @bind-Value="env.Name" class="form-control"/>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Connection String</label>
                                        <InputText @bind-Value="env.ConnectionString" class="form-control"/>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Schema</label>
                                        <InputText @bind-Value="env.Schema" class="form-control"/>
                                    </div>
                                    <div class="d-flex gap-2">
                                        <button type="button" class="btn btn-outline-danger" @onclick="() => RemoveOracleEnvironment(env)">
                                            <i class="fas fa-trash"></i> Remove
                                        </button>
                                        <button type="button" class="btn btn-outline-secondary" @onclick="() => TestOracleConnection(env)">
                                            <i class="fas fa-plug"></i> Test Connection
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="position-fixed bottom-0 end-0 p-4" style="z-index: 1030;">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save"></i> Save Configuration
            </button>
        </div>
    </EditForm>
</div>

@code {
    private ConfigModel config = new ConfigModel();

    protected override void OnInitialized()
    {
        config = ConfigService.GetConfig();
    }

    private string? selectedConsulEnv;

    private void AddConsulEnvironment()
    {
        config.ConsulEnvironments.Add(new ConsulEnvironment());
    }

    private void RemoveConsulEnvironment(ConsulEnvironment env)
    {
        config.ConsulEnvironments.Remove(env);
    }

    private void AddRegex()
    {
        config.IgnoreRepositoriesRegex.Add(string.Empty);
    }

    private void RemoveRegex(int index)
    {
        if (index >= 0 && index < config.IgnoreRepositoriesRegex.Count)
        {
            config.IgnoreRepositoriesRegex.RemoveAt(index);
        }
    }

    private void AddOracleEnvironment()
    {
        config.OracleEnvironments.Add(new OracleEnvironment());
    }

    private void RemoveOracleEnvironment(OracleEnvironment env)
    {
        config.OracleEnvironments.Remove(env);
    }

    private async Task TestOracleConnection(OracleEnvironment env)
    {
        try
        {
            var result = await OracleService.TestConnectionAsync(env.ConnectionString, env.Schema);
            if (result)
            {
                ToastService.ShowSuccess("Connection test successful");
            }
            else
            {
                ToastService.ShowError("Connection test failed");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Connection test failed: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Validate Oracle environments
            var invalidOracleEnvs = config.OracleEnvironments.Where(e => 
                string.IsNullOrWhiteSpace(e.Name) || 
                string.IsNullOrWhiteSpace(e.ConnectionString) || 
                string.IsNullOrWhiteSpace(e.Schema)).ToList();
                
            if (invalidOracleEnvs.Any())
            {
                ToastService.ShowError("All fields are required for Oracle environments");
                return;
            }

            // Check for duplicate Oracle environment names
            if (config.OracleEnvironments.GroupBy(e => e.Name).Any(g => g.Count() > 1))
            {
                ToastService.ShowError("Oracle environment names must be unique");
                return;
            }

            await ConfigService.SaveConfigAsync(config);
            ToastService.ShowSuccess("Configuration saved successfully!");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving configuration: {ex.Message}");
        }
    }

    private void OnConsulEnvironmentSelected(ChangeEventArgs e)
    {
        selectedConsulEnv = e.Value?.ToString();
    }
}
