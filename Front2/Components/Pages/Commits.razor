@page "/commits"
@inject ISignalRClientService SignalRClientService
@using Common
@using Common.Models
@using Common.Services
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.RegularExpressions
@using System.Reactive.Subjects
@using System.Reactive.Linq
@using Common.Utils
@inject IToastService toastService
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject IConsulService ConsulService
@inject ICommitDataExportService CommitDataExportService
@inject IConfigurationService ConfigService

<h3>Commits</h3>

<button class="btn btn-info text-nowrap" @onclick="async () => await SyncCommits()">Sync Commits</button>
<button class="btn btn-secondary text-nowrap" @onclick="async () => await DownloadCommits()">Download to Excel</button>
<div class="progress mt-2" style="height: 20px;">
    <div class="progress-bar" role="progressbar" style="width: @progress%;" aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100">@progress%</div>
</div>

@if (commitDataList != null && commitDataList.Any())
{
    <ul class="list-group mt-3">
        @foreach (var commit in commitDataList)
        {
            <li class="list-group-item">
                <strong>@commit.ProjectName</strong> - @commit.RepoName - @commit.BranchName
                <br />
                <em>@commit.CommitDate.ToString("yyyy-MM-dd HH:mm:ss")</em> by <strong>@commit.AuthorName</strong>
                <br />
                @((MarkupString)commit.CommitMessage.ToHtml())
            </li>
        }
    </ul>
}
else
{
    <p>No commits fetched yet.</p>
}

@code {

    private List<Commit> commitDataList = new List<Commit>();
    private int progress = 0;

    protected override async Task OnInitializedAsync()
    {
        await FetchCommits();
    }

    private async Task FetchCommits()
    {
        var config = ConfigService.GetConfig();
        commitDataList = await CommitDataExportService.GetRecentCommitsAsync(config.Username, 100);
    }

    private async Task SyncCommits()
    {
        var progressHandler = new Progress<int>(value =>
        {
            progress = value;
            StateHasChanged();
        });

        await CommitDataExportService.FetchCommitDataAsync(progressHandler);
        toastService.ShowSuccess("Commits synchronized successfully!");
    }

    private async Task DownloadCommits()
    {
        await CommitDataExportService.ExportCommitDataAsync();
    }
}
