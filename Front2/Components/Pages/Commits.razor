@page "/commits"
@inject ISignalRClientService SignalRClientService
@using Common
@using Common.Models
@using Common.Services
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.RegularExpressions
@using System.Reactive.Subjects
@using System.Reactive.Linq
@using Common.Utils
@inject IToastService toastService
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject IConsulService ConsulService
@inject ICommitDataExportService CommitDataExportService
@inject IConfigurationService ConfigService

<h3>Commits</h3>

<button class="btn btn-info text-nowrap" @onclick="async () => await SyncCommits()">Sync Commits</button>
<button class="btn btn-secondary text-nowrap" @onclick="async () => await DownloadCommits()">Download to Excel</button>
<ProgressBar ProgressValue="@progress" TextColor="black" Height="25px" Label="Buscando commits..." />


@if (commitDataList != null && commitDataList.Any())
{
    var groupedCommits = commitDataList
        .GroupBy(c => c.CommitDate.Date)
        .OrderByDescending(g => g.Key);

    @foreach (var dayGroup in groupedCommits)
    {
        <div class="card mt-3">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">@dayGroup.Key.ToString("dddd, MMMM dd, yyyy")</h5>
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var commit in dayGroup.OrderByDescending(c => c.CommitDate))
                {
                    <li class="list-group-item">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <strong>@commit.ProjectName</strong> - @commit.RepoName - @commit.BranchName
                                <br />
                                <small class="text-muted">@commit.CommitDate.ToString("HH:mm:ss")</small> by <strong>@commit.AuthorName</strong>
                                <br />
                                @((MarkupString)commit.CommitMessage.ToHtml(commit.ProjectName, ConfigService.GetConfig().BaseUrl))
                            </div>
                            @if (!string.IsNullOrEmpty(commit.JiraCardID))
                            {
                                <span class="badge bg-secondary">@commit.JiraCardID</span>
                            }
                        </div>
                    </li>
                }
            </ul>
        </div>
    }
}
else
{
    <p>No commits fetched yet.</p>
}

@code {

    private List<Commit> commitDataList = new List<Commit>();
    private int progress = 0;

    protected override async Task OnInitializedAsync()
    {
        await FetchCommits();
    }

    private async Task FetchCommits()
    {
        var config = ConfigService.GetConfig();
        commitDataList = await CommitDataExportService.GetRecentCommitsAsync(config.Username, 100);
    }

    private async Task SyncCommits()
    {
        var progressHandler = new Progress<int>(value =>
        {
            progress = value;
            StateHasChanged();
        });

        await CommitDataExportService.FetchCommitDataAsync(progressHandler);
        toastService.ShowSuccess("Commits synchronized successfully!");
    }

    private async Task DownloadCommits()
    {
        await CommitDataExportService.ExportCommitDataAsync();
    }
}

<style>
    .progress {
        position: relative;
    }

    .progress-text {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        color: black;
        font-weight: bold;
    }
</style>
