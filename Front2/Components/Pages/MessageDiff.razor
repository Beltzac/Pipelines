@page "/message-diff"
@using Common
@using Common.Models
@using Common.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject IOracleMessageService OracleMessageService
@inject IToastService toastService
@inject IJSRuntime JS
@inject IConfigurationService ConfigService
@inject MessageDiffStateService MessageDiffStateService
@implements IDisposable

<ProgressBar ProgressValue="@MessageDiffStateService.ProgressValue" Label="@MessageDiffStateService.ProgressLabel" IsLoading="@MessageDiffStateService.IsLoading" />

<StickyFilter>
    <div class="row g-3">
        <div class="col-md-5">
            <div class="form-group">
                <label class="form-label">Source Environment:</label>
                <select class="form-select" @bind="MessageDiffStateService.SelectedSourceEnv">
                    @foreach (var env in environments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-5">
            <div class="form-group">
                <label class="form-label">Target Environment:</label>
                <select class="form-select" @bind="MessageDiffStateService.SelectedTargetEnv">
                    @foreach (var env in environments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary w-100 mt-4" @onclick="CompareEnvironments">Compare</button>
        </div>
    </div>

    <div class="row g-3 mt-2">
        <div class="col-md-6">
            <div class="form-group">
                <input type="text" class="form-control" placeholder="Search by module, code or prefix..."
                @bind="MessageDiffStateService.SearchKey"
                @bind:event="oninput"
                @onkeyup="async () => await HandleSearch()" />
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <select class="form-select" @bind="MessageDiffStateService.PageSize">
                    <option value="5">5 per page</option>
                    <option value="10">10 per page</option>
                    <option value="20">20 per page</option>
                    <option value="50">50 per page</option>
                </select>
            </div>
        </div>
        <div class="col-md-1">
            <div class="form-check form-switch mt-3">
                <input class="form-check-input" type="checkbox" role="switch"
                id="showOnlyChanged" @bind="MessageDiffStateService.ShowOnlyChanged">
                <label class="form-check-label" for="showOnlyChanged">Changed Only</label>
            </div>
        </div>
    </div>
</StickyFilter>

<div class="diff-container">
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Chave</th>
                <th>Source Titulo</th>
                <th>
                    Source Value (@MessageDiffStateService.SelectedSourceEnv)
                    <button class="btn btn-sm btn-outline-primary ms-2" @onclick="CopyAllSourceUpserts">
                        Copy All Source Upserts
                    </button>
                </th>
                <th>Target Titulo</th>
                <th>
                    Target Value (@MessageDiffStateService.SelectedTargetEnv)
                    <button class="btn btn-sm btn-outline-primary ms-2" @onclick="CopyAllTargetUpserts">
                        Copy All Target Upserts
                    </button>
                </th>
                <th>Campos Alterados</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var diff in GetFilteredAndPaginatedDifferences())
            {
                <tr>
                    <td>@diff.Key</td>
                    <td>@(diff.Value.Source?.Languages.Values.FirstOrDefault()?.Titulo)</td>
                    <td>
                        @(diff.Value.Source?.Languages.Values.FirstOrDefault()?.Descricao)
                        @if (diff.Value.Source != null)
                        {
                            <button class="btn btn-sm btn-outline-primary ms-2" @onclick="() => CopyUpsertStatement(diff.Value.Source)">
                                Copy Upsert
                            </button>
                        }
                    </td>
                    <td>@(diff.Value.Target?.Languages.Values.FirstOrDefault()?.Titulo)</td>
                    <td>
                        @(diff.Value.Target?.Languages.Values.FirstOrDefault()?.Descricao)
                        @if (diff.Value.Target != null)
                        {
                            <button class="btn btn-sm btn-outline-primary ms-2" @onclick="() => CopyUpsertStatement(diff.Value.Target)">
                                Copy Upsert
                            </button>
                        }
                    </td>
                    <td>@string.Join(", ", diff.Value.ChangedFields)</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<Pagination
CurrentPage="@MessageDiffStateService.CurrentPage"
TotalPages="@TotalPages"
OnPageChange="@ChangePage">
    Showing @((MessageDiffStateService.CurrentPage - 1) * MessageDiffStateService.PageSize + 1) to @Math.Min(MessageDiffStateService.CurrentPage * MessageDiffStateService.PageSize, GetFilteredCount()) of @GetFilteredCount() entries
</Pagination>

<style>
    .diff-container {
    max-width: 80vw;
    margin: 0 auto;
    overflow-x: auto;
    }

    .form-group {
    margin-bottom: 0;
    }
</style>

@code {
    private List<OracleEnvironment> environments = new();

    protected override async Task OnInitializedAsync()
    {
        var config = ConfigService.GetConfig();
        environments = config.OracleEnvironments;
    }

    private async Task CopyToClipboard(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
    }

    private async Task CopyUpsertStatement(MessageDefinition message)
    {
        try
        {
            var upsertStatement = OracleMessageService.GenerateUpsertStatement(message);
            await CopyToClipboard(upsertStatement);
            toastService.ShowSuccess("Upsert statement copied to clipboard");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error generating upsert statement: {ex.Message}");
        }
    }

    private async Task CopyAllSourceUpserts()
    {
        try
        {
            var filteredKeys = GetFilteredKeys();
            var upserts = new List<string>();

            foreach (var key in filteredKeys)
            {
                var message = MessageDiffStateService.SourceMessages.GetValueOrDefault(key);
                if (message != null)
                {
                    upserts.Add(OracleMessageService.GenerateUpsertStatement(message));
                }
            }

            if (upserts.Any())
            {
                var allUpserts = string.Join(";\n\n", upserts);
                await CopyToClipboard(allUpserts);
                toastService.ShowSuccess($"Copied {upserts.Count} upsert statements to clipboard");
            }
            else
            {
                toastService.ShowWarning("No source messages found to generate upserts");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error generating upsert statements: {ex.Message}");
        }
    }

    private async Task CopyAllTargetUpserts()
    {
        try
        {
            var filteredKeys = GetFilteredKeys();
            var upserts = new List<string>();

            foreach (var key in filteredKeys)
            {
                var message = MessageDiffStateService.TargetMessages.GetValueOrDefault(key);
                if (message != null)
                {
                    upserts.Add(OracleMessageService.GenerateUpsertStatement(message));
                }
            }

            if (upserts.Any())
            {
                var allUpserts = string.Join(";\n\n", upserts);
                await CopyToClipboard(allUpserts);
                toastService.ShowSuccess($"Copied {upserts.Count} upsert statements to clipboard");
            }
            else
            {
                toastService.ShowWarning("No target messages found to generate upserts");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error generating upsert statements: {ex.Message}");
        }
    }

    protected override void OnInitialized()
    {
        MessageDiffStateService.OnChange += StateHasChanged;
        MessageDiffStateService.Load();
    }

    public void Dispose()
    {
        MessageDiffStateService.OnChange -= StateHasChanged;
        MessageDiffStateService.Save();
    }

    private async Task CompareEnvironments()
    {
        if (string.IsNullOrEmpty(MessageDiffStateService.SelectedSourceEnv) || string.IsNullOrEmpty(MessageDiffStateService.SelectedTargetEnv))
        {
            toastService.ShowError("Please select both environments");
            return;
        }

        try
        {
            MessageDiffStateService.ProgressValue = 0;
            MessageDiffStateService.IsLoading = true;

            MessageDiffStateService.CurrentPage = 1;
            MessageDiffStateService.Differences.Clear();

            // Get source environment messages
            MessageDiffStateService.ProgressValue = 25;
            MessageDiffStateService.ProgressLabel = $"Loading messages from {MessageDiffStateService.SelectedSourceEnv}...";
            var sourceEnv = environments.First(e => e.Name == MessageDiffStateService.SelectedSourceEnv);
            MessageDiffStateService.SourceMessages = await OracleMessageService.GetMessagesAsync(sourceEnv.ConnectionString);

            // Get target environment messages
            MessageDiffStateService.ProgressValue = 50;
            MessageDiffStateService.ProgressLabel = $"Loading messages from {MessageDiffStateService.SelectedTargetEnv}...";
            var targetEnv = environments.First(e => e.Name == MessageDiffStateService.SelectedTargetEnv);
            MessageDiffStateService.TargetMessages = await OracleMessageService.GetMessagesAsync(targetEnv.ConnectionString);

            // Process messages
            MessageDiffStateService.ProgressValue = 75;
            MessageDiffStateService.ProgressLabel = "Processing message differences...";
            MessageDiffStateService.AllMessageKeys = new HashSet<string>(
                MessageDiffStateService.SourceMessages.Keys.Union(MessageDiffStateService.TargetMessages.Keys)
            );
            MessageDiffStateService.TotalCount = MessageDiffStateService.AllMessageKeys.Count;

            // Get differences for the current page
            await LoadPageDifferences();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error comparing environments: {ex.Message}");
        }
        finally
        {
            MessageDiffStateService.IsLoading = false;
        }
    }

    private async Task LoadPageDifferences()
    {
        MessageDiffStateService.IsLoading = true;
        try
        {
            MessageDiffStateService.ProgressValue = 80;
            MessageDiffStateService.ProgressLabel = "Loading differences...";

            MessageDiffStateService.Differences.Clear();
            var totalKeys = MessageDiffStateService.AllMessageKeys.Count;
            var processedKeys = 0;

            foreach (var key in MessageDiffStateService.AllMessageKeys)
            {
                MessageDiffStateService.ProgressLabel = $"Processing differences ({processedKeys + 1}/{totalKeys}): {key}";

                var sourceMessage = MessageDiffStateService.SourceMessages.GetValueOrDefault(key);
                var targetMessage = MessageDiffStateService.TargetMessages.GetValueOrDefault(key);

                var diff = await OracleMessageService.GetMessageDiff(key, sourceMessage, targetMessage);
                MessageDiffStateService.Differences[key] = diff;

                processedKeys++;
                MessageDiffStateService.ProgressValue = 80 + (int)((processedKeys / (double)totalKeys) * 20);
            }

            await RunCompare();
        }
        finally
        {
            MessageDiffStateService.IsLoading = false;
        }
    }

    protected async Task RunCompare()
    {
        var filteredDiffs = GetFilteredAndPaginatedDifferences();
        @* if (filteredDiffs.Count == 0 && MessageDiffStateService.Differences.Count > 0)
        {
            toastService.ShowInfo("No differences found matching the search criteria");
        } *@
        StateHasChanged();
    }

    private async Task HandleSearch()
    {
        MessageDiffStateService.CurrentPage = 1;
        await LoadPageDifferences();
    }

    private async Task ChangePage(int page)
    {
        MessageDiffStateService.CurrentPage = page;
        await LoadPageDifferences();
    }

    private HashSet<string> GetFilteredKeys()
    {
        var filtered = MessageDiffStateService.AllMessageKeys;

        if (!string.IsNullOrWhiteSpace(MessageDiffStateService.SearchKey))
        {
            filtered = filtered.Where(key =>
            {
                var message = MessageDiffStateService.SourceMessages.GetValueOrDefault(key) ??
                              MessageDiffStateService.TargetMessages.GetValueOrDefault(key);
                return message != null && (
                    message.Key.Contains(MessageDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase) ||
                    message.Modulo.Contains(MessageDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase) ||
                    message.Codigo.Contains(MessageDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase) ||
                    message.Prefixo.Contains(MessageDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase)
                );
            }).ToHashSet();
        }

        if (MessageDiffStateService.ShowOnlyChanged)
        {
            filtered = filtered.Where(key =>
                MessageDiffStateService.Differences.ContainsKey(key) &&
                MessageDiffStateService.Differences[key].HasDifferences
            ).ToHashSet();
        }

        return filtered;
    }

    private IEnumerable<string> GetCurrentPageKeys()
    {
        return GetFilteredKeys()
            .Skip((MessageDiffStateService.CurrentPage - 1) * MessageDiffStateService.PageSize)
            .Take(MessageDiffStateService.PageSize);
    }

    public Dictionary<string, MessageDiffResult> GetFilteredAndPaginatedDifferences()
    {
        return GetCurrentPageKeys()
            .Where(key => MessageDiffStateService.Differences.ContainsKey(key))
            .ToDictionary(
                key => key,
                key => MessageDiffStateService.Differences[key]
            );
    }

    public int TotalPages => (int)Math.Ceiling(GetFilteredCount() / (double)MessageDiffStateService.PageSize);

    public int GetFilteredCount()
    {
        return GetFilteredKeys().Count;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setDotNetReference", DotNetObjectReference.Create(this));

            bool initialized = false;

            MessageDiffStateService.InitializeState(async x =>
            {
                if (environments.Count >= 2)
                {
                    x.SelectedSourceEnv = environments[0].Name;
                    x.SelectedTargetEnv = environments.Count > 1 ? environments[1].Name : environments[0].Name;
                    await CompareEnvironments();
                }

                initialized = true;
            });

            if (!initialized)
            {
                await RunCompare();
            }
        }
    }
}