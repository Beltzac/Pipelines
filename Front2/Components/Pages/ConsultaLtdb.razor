@page "/consulta-ltdb"
@using BlazorDateRangePicker
@using Common.Models
@using Common.Services
@using Common.Utils
@using System.Globalization
@inject ILtdbLtvcService LtdbService
@inject IConfigurationService ConfigService
@inject IJSRuntime JSRuntime
@inject IToastService toastService
@inject ConsultaSggStateService ConsultaSggStateService
@implements IDisposable

<h3>LTDB/LTVC Query</h3>

<div class="card mb-3">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Filters</h5>
    </div>
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Environment</label>
                <select class="form-select" @bind="ConsultaSggStateService.SelectedEnvironment">
                    @foreach (var env in config.OracleEnvironments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>

            <div class="col-md-3">
                <label class="form-label">Range</label>

                <DateRangePicker 
                    Culture="@CultureInfo.GetCultureInfo("pt-BR")" 
                    TimePicker="true" TimePicker24Hour="true" 
                    DateFormat="@($"dd/MM/yyyy HH:mm")"
                    @bind-StartDate="ConsultaSggStateService.StartDate" 
                    @bind-EndDate="ConsultaSggStateService.EndDate"
                    class="form-control" />
            </div>

            <div class="col-md-3">
                <label class="form-label">Placa</label>
                <input type="text" class="form-control" @bind="ConsultaSggStateService.Placa" placeholder="Search by plate number">
            </div>

            <div class="col-md-3">
                <label class="form-label">Request ID</label>
                <input type="text" class="form-control" @bind="ConsultaSggStateService.RequestId">
            </div>

            <div class="col-md-3">
                <label class="form-label">Container Numbers</label>
                <input type="text" class="form-control" @bind="ConsultaSggStateService.ContainerNumbers" placeholder="Search container numbers">
            </div>

            <div class="col-md-3">
                <label class="form-label">Agendamento ID</label>
                <input type="number" class="form-control" @bind="ConsultaSggStateService.IdAgendamento">
            </div>

            <div class="col-md-3">
                <label class="form-label">Move Type</label>
                <select class="form-select" @bind="ConsultaSggStateService.MoveType">
                    <option value="">All</option>
                    <option value="ENTRY">ENTRY</option>
                    <option value="EXIT">EXIT</option>
                </select>
            </div>

            <div class="col-md-3">
                <label class="form-label">Status</label>
                <select class="form-select" @bind="ConsultaSggStateService.Status">
                    <option value="">All</option>
                    <option value="OK">OK</option>
                    <option value="Error">Error</option>
                </select>
            </div>

            <div class="col-12">
                @if (ConsultaSggStateService.IsLoading)
                {
                    <button class="btn btn-secondary" @onclick="CancelSearch">Cancel</button>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="async () => { ConsultaSggStateService.CurrentPage = 1; await ExecuteQuery(); }">Search</button>
                    <button class="btn btn-secondary" @onclick="ClearFilters">Clear</button>
                    <button class="btn btn-info" @onclick="ExportSqlQuery">Export SQL</button>
                }
            </div>
        </div>
    </div>
</div>

@if (ConsultaSggStateService.IsLoading)
{
    <div class="d-flex justify-content-center mt-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

<div class="card mb-3">
    <div class="card-header">
        <h5 class="mb-0">Response Time Analysis</h5>
    </div>
    <div class="card-body">
        <canvas id="delayChart" width="400" height="100" style='width:100%;height:100px'></canvas>
    </div>
</div>

@if (ConsultaSggStateService.Results != null)
{
    <div class="mt-4">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>LTDB Date</th>
                    <th>LTVC Date</th>
                    <th>Request ID</th>
                    <th>Agendamento</th>
                    <th>Código Barras</th>
                    <th>Move Type</th>
                    <th>Placa</th>
                    <th>Status</th>
                    <th>Containers</th>
                    <th>Delay</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in ConsultaSggStateService.Results)
                {
                    <tr>
                        <td>@(item.DataLtdb?.ToString("yyyy-MM-dd HH:mm:ss"))</td>
                        <td>@(item.DataLtvc?.ToString("yyyy-MM-dd HH:mm:ss"))</td>
                        <td>@item.RequestId</td>
                        <td>@item.IdAgendamento</td>
                        <td>@item.CodigoBarras</td>
                        <td>@item.MoveType</td>
                        <td>@item.Placa</td>
                        <td>
                            <span class="badge @(item.Status == "OK" ? "bg-success" : "bg-danger")">
                                @item.Status
                            </span>
                        </td>
                        <td>@item.ContainerNumbers</td>
                        <td>@(item.Delay?.TotalSeconds.ToString("F3"))</td>
                        <td>
                            <button class="btn btn-sm btn-info" @onclick="() => ShowDetails(item)">
                                Details
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (ConsultaSggStateService.Results != null && ConsultaSggStateService.TotalCount > 0)
{
    <div class="d-flex justify-content-between align-items-center mt-3">
        <div>
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    <li class="page-item @(ConsultaSggStateService.CurrentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="async () => { if(ConsultaSggStateService.CurrentPage > 1) { ConsultaSggStateService.CurrentPage--; await ExecuteQuery();
 }}">
                            Previous
                        </button>
                    </li>
                    @{
                        var totalPages = (int)Math.Ceiling(ConsultaSggStateService.TotalCount / (double)ConsultaSggStateService.PageSize);
                        for (int i = Math.Max(1, ConsultaSggStateService.CurrentPage - 2); i <= Math.Min(totalPages, ConsultaSggStateService.CurrentPage + 2); i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(ConsultaSggStateService.CurrentPage == pageNumber ? "active" : "")">
                                <button class="page-link" @onclick="async () => { ConsultaSggStateService.CurrentPage = pageNumber; await ExecuteQuery();
 }">
                                    @pageNumber
                                </button>
                            </li>
                        }
                    }
                    <li class="page-item @(ConsultaSggStateService.CurrentPage == Math.Ceiling(ConsultaSggStateService.TotalCount / (double)ConsultaSggStateService.PageSize) ? "disabled" : "")">
                        <button class="page-link" @onclick="async () => { if(ConsultaSggStateService.CurrentPage < Math.Ceiling(ConsultaSggStateService.TotalCount / (double)ConsultaSggStateService.PageSize)) {
 ConsultaSggStateService.CurrentPage++; await ExecuteQuery(); }}">
                            Next
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
        <div>
            Showing @((ConsultaSggStateService.CurrentPage - 1) * ConsultaSggStateService.PageSize + 1) to @Math.Min(ConsultaSggStateService.CurrentPage * ConsultaSggStateService.PageSize, ConsultaSggStateService.TotalCount) of @ConsultaSggStateService.TotalCount entries
        </div>
    </div>
}

@if (ConsultaSggStateService.SelectedItem != null)
{
    <div class="modal fade show" style="display: block" tabindex="-1" @onclick="CloseModal">
        <div class="modal-dialog modal-xl">
            <div class="modal-content" @onclick:stopPropagation>
                <div class="modal-header">
                    <h5 class="modal-title">LTDB/LTVC Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="card h-100">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">LTDB XML</h6>
                                        <button class="btn btn-outline-secondary btn-sm" @onclick="() => CopyToClipboard(ConsultaSggStateService.FormattedLtdbXml)">
                                            <i class="bi bi-clipboard"></i> Copy
                                        </button>
                                    </div>
                                    <div class="card-body p-0">
                                        <pre class="m-0 p-3" style="max-height: 400px; overflow-y: auto;">@ConsultaSggStateService.FormattedLtdbXml</pre>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="card h-100">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">LTVC XML</h6>
                                        <button class="btn btn-outline-secondary btn-sm" @onclick="() => CopyToClipboard(ConsultaSggStateService.FormattedLtvcXml)">
                                            <i class="bi bi-clipboard"></i> Copy
                                        </button>
                                    </div>
                                    <div class="card-body p-0">
                                        <pre class="m-0 p-3" style="max-height: 400px; overflow-y: auto;">@ConsultaSggStateService.FormattedLtvcXml</pre>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private ConfigModel config;
    private CancellationTokenSource cts;
    private bool chartInitialized;

    protected override void OnInitialized()
    {
        ConsultaSggStateService.OnChange += StateHasChanged;
        ConsultaSggStateService.Load();
    }

    public void Dispose()
    {
        ConsultaSggStateService.OnChange -= StateHasChanged;
        ConsultaSggStateService.Save();
    }


    protected override async Task OnInitializedAsync()
    {
        config = ConfigService.GetConfig();

        ConsultaSggStateService.InitializeState(x =>
        {
            x.SelectedEnvironment = config.OracleEnvironments.FirstOrDefault()?.Name;
            x.EndDate = DateTime.Now.Date.AddDays(1).AddTicks(-1);
            x.StartDate = x.EndDate?.AddHours(-24);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateChart();
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("addKeyboardShortcuts", objRef);
        }
    }

    private DotNetObjectReference<ConsultaLtdb>? objRef;
    public async ValueTask DisposeAsync()
    {
        if (objRef != null)
        {
            objRef.Dispose();
        }

        if (chartInitialized)
        {
            await JSRuntime.InvokeVoidAsync("eval", "if(window.delayChart) window.delayChart.destroy();");
        }
    }

    [JSInvokable]
    public async Task HandleKeyPress(string key)
    {
        if (key == "Enter")
        {
            await ExecuteQuery();
        }
        else if (key == "Escape")
        {
            await ClearFilters();
        }

        StateHasChanged();
    }

    private async Task ClearFilters()
    {
        ConsultaSggStateService.ContainerNumbers = null;
        ConsultaSggStateService.Placa = null;
        ConsultaSggStateService.MoveType = null;
        ConsultaSggStateService.IdAgendamento = null;
        ConsultaSggStateService.Status = null;
        ConsultaSggStateService.EndDate = DateTime.Now.Date.AddDays(1).AddTicks(-1);
        ConsultaSggStateService.StartDate = ConsultaSggStateService.EndDate?.AddHours(-24);
        ConsultaSggStateService.CurrentPage = 1;

        await ExecuteQuery();
    }

    private async Task ExecuteQuery()
    {
        try
        {
            cts?.Cancel();
            cts = new CancellationTokenSource();
            ConsultaSggStateService.IsLoading = true;

            StateHasChanged();

            var queryTask = LtdbService.ExecuteQueryAsync(
                ConsultaSggStateService.SelectedEnvironment,
                ConsultaSggStateService.StartDate,
                ConsultaSggStateService.EndDate,
                ConsultaSggStateService.ContainerNumbers,
                ConsultaSggStateService.Placa,
                null,
                ConsultaSggStateService.MoveType,
                ConsultaSggStateService.IdAgendamento,
                ConsultaSggStateService.Status,
                ConsultaSggStateService.PageSize,
                ConsultaSggStateService.CurrentPage,
                cts.Token);

            var delayTask = LtdbService.GetDelayMetricsAsync(
                ConsultaSggStateService.SelectedEnvironment,
                ConsultaSggStateService.StartDate,
                ConsultaSggStateService.EndDate,
                ConsultaSggStateService.ContainerNumbers,
                ConsultaSggStateService.Placa,
                null,
                ConsultaSggStateService.MoveType,
                ConsultaSggStateService.IdAgendamento,
                ConsultaSggStateService.Status,
                cts.Token);

            await Task.WhenAll(queryTask, delayTask);

            var (queryResults, total) = await queryTask;
            ConsultaSggStateService.DelayData = await delayTask;

            ConsultaSggStateService.Results = queryResults;
            ConsultaSggStateService.TotalCount = total;

            await UpdateChart();
        }
        finally
        {
            ConsultaSggStateService.IsLoading = false;
        }
    }

    private async Task UpdateChart()
    {
        if (ConsultaSggStateService.DelayData == null || !ConsultaSggStateService.DelayData.Any()) return;

        var labels = ConsultaSggStateService.DelayData.Select(d => d.Timestamp.ToString("dd/MM HH:mm")).ToArray();
        var dataAvg = ConsultaSggStateService.DelayData.Select(d => d.AvgDelaySeconds).ToArray();
        var dataMax = ConsultaSggStateService.DelayData.Select(d => d.MaxDelaySeconds).ToArray();
        var dataCount = ConsultaSggStateService.DelayData.Select(d => d.RequestCount).ToArray();

        var chartData = new
        {
            type = "line",
            data = new
            {
                labels = labels,
                datasets = new object[]
                {
                    new
                    {
                        label = "Avg Response Time (seconds)",
                        data = dataAvg,
                        borderColor = "rgb(75, 192, 192)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                    },
                    new
                    {
                        label = "Max Response Time (seconds)",
                        data = dataMax,
                        borderColor = "rgb(235, 64, 52)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                    },
                    new
                    {
                        label = "Request Count",
                        data = dataCount,
                        borderColor = "rgb(153, 102, 255)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                        yAxisID = "y1"
                    }
                }
            },
            options = new
            {
                responsive = true,
                scales = new
                {
                    y = new
                    {
                        beginAtZero = true,
                        title = new
                        {
                            display = true,
                            text = "Seconds"
                        }
                    },
                    y1 = new
                    {
                        type = "linear",
                        display = true,
                        position = "right",
                        beginAtZero = true,
                        title = new
                        {
                            display = true,
                            text = "Count"
                        },
                        grid = new
                        {
                            drawOnChartArea = false
                        }
                    },
                    x = new
                    {
                        title = new
                        {
                            display = true,
                            text = "Time"
                        }
                    }
                }
            }
        };

        if (!chartInitialized)
        {
            var chartConfig = System.Text.Json.JsonSerializer.Serialize(chartData);
            await JSRuntime.InvokeVoidAsync("eval", $@"
                var ctx = document.getElementById('delayChart').getContext('2d');
                window.delayChart = new Chart(ctx, {chartConfig});
            ");
            chartInitialized = true;
        }
        else
        {
            var newLabels = System.Text.Json.JsonSerializer.Serialize(labels);
            var newDataAvg = System.Text.Json.JsonSerializer.Serialize(dataAvg);
            var newDataMax = System.Text.Json.JsonSerializer.Serialize(dataMax);
            var newDataCount = System.Text.Json.JsonSerializer.Serialize(dataCount);
            await JSRuntime.InvokeVoidAsync("eval", $@"
                window.delayChart.data.labels = {newLabels};
                window.delayChart.data.datasets[0].data = {newDataAvg};
                window.delayChart.data.datasets[1].data = {newDataMax};
                window.delayChart.data.datasets[2].data = {newDataCount};
                window.delayChart.update();
            ");
        }
    }

    private void ShowDetails(LtdbLtvcRecord item)
    {
        ConsultaSggStateService.SelectedItem = item;
        ConsultaSggStateService.FormattedLtdbXml = DataFormatUtils.FormatXml(item.LtdbXml);
        ConsultaSggStateService.FormattedLtvcXml = DataFormatUtils.FormatXml(item.LtvcXml);
    }

    private async Task ExportSqlQuery()
    {
        var sqlQuery = LtdbService.BuildQuery(
        ConsultaSggStateService.StartDate,
        ConsultaSggStateService.EndDate,
        ConsultaSggStateService.Placa,
        ConsultaSggStateService.RequestId,
        ConsultaSggStateService.ContainerNumbers,
        ConsultaSggStateService.MoveType,
        ConsultaSggStateService.IdAgendamento,
        ConsultaSggStateService.Status,
        ConsultaSggStateService.PageSize,
        ConsultaSggStateService.CurrentPage);

        await CopyToClipboard(sqlQuery);
        toastService.ShowSuccess("SQL Query copied to clipboard");
    }

    private void CloseModal()
    {
        ConsultaSggStateService.SelectedItem = null;
    }

    private void CancelSearch()
    {
        cts?.Cancel();
        ConsultaSggStateService.IsLoading = false;
    }

    private async Task CopyToClipboard(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
    }
}
