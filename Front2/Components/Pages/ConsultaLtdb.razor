@page "/consulta-ltdb"
 @using Common.Models
 @using Common.Services
 @using Common.Utils
 @inject ILtdbLtvcService LtdbService
 @inject IConfigurationService ConfigService
 @inject IJSRuntime JSRuntime
 @inject IToastService toastService

<h3>LTDB/LTVC Query</h3>

<div class="card mb-3">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Filters</h5>
    </div>
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Environment</label>
                <select class="form-select" @bind="selectedEnvironment">
                    @foreach (var env in config.OracleEnvironments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>

            <div class="col-md-3">
                <label class="form-label">Start Date</label>
                <input type="datetime-local" class="form-control" @bind="startDate">
            </div>

            <div class="col-md-3">
                <label class="form-label">End Date</label>
                <input type="datetime-local" class="form-control" @bind="endDate">
            </div>

            <div class="col-md-3">
                <label class="form-label">Placa</label>
                <input type="text" class="form-control" @bind="placa" placeholder="Search by plate number">
            </div>

            <div class="col-md-3">
                <label class="form-label">Request ID</label>
                <input type="text" class="form-control" @bind="requestId">
            </div>

            <div class="col-md-3">
                <label class="form-label">Container Numbers</label>
                <input type="text" class="form-control" @bind="containerNumbers" placeholder="Search container numbers">
            </div>

            <div class="col-md-3">
                <label class="form-label">Agendamento ID</label>
                <input type="number" class="form-control" @bind="idAgendamento">
            </div>

            <div class="col-md-3">
                <label class="form-label">Move Type</label>
                <select class="form-select" @bind="moveType">
                    <option value="">All</option>
                    <option value="ENTRY">ENTRY</option>
                    <option value="EXIT">EXIT</option>
                </select>
            </div>

            <div class="col-md-3">
                <label class="form-label">Status</label>
                <select class="form-select" @bind="status">
                    <option value="">All</option>
                    <option value="OK">OK</option>
                    <option value="ERROR">ERROR</option>
                </select>
            </div>

            <div class="col-12">
                @if (isLoading)
                {
                    <button class="btn btn-secondary" @onclick="CancelSearch">Cancel</button>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="async () => { currentPage = 1; await ExecuteQuery(); }">Search</button>
                    <button class="btn btn-secondary" @onclick="ClearFilters">Clear</button>
                    <button class="btn btn-info" @onclick="ExportSqlQuery">Export SQL</button>
                }
            </div>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center mt-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@if (results != null)
{
    <div class="mt-4">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>LTDB Date</th>
                    <th>LTVC Date</th>
                    <th>Request ID</th>
                    <th>Agendamento</th>
                    <th>Move Type</th>
                    <th>Placa</th>
                    <th>Status</th>
                    <th>Containers</th>
                    <th>Delay</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in results)
                {
                    <tr>
                        <td>@(item.DataLtdb?.ToString("yyyy-MM-dd HH:mm:ss"))</td>
                        <td>@(item.DataLtvc?.ToString("yyyy-MM-dd HH:mm:ss"))</td>
                        <td>@item.RequestId</td>
                        <td>@item.IdAgendamento</td>
                        <td>@item.MoveType</td>
                        <td>@item.Placa</td>
                        <td>
                            <span class="badge @(item.Status == "OK" ? "bg-success" : "bg-danger")">
                                @item.Status
                            </span>
                        </td>
                        <td>@item.ContainerNumbers</td>
                        <td>@(item.Delay?.TotalSeconds.ToString("F3"))</td>
                        <td>
                            <button class="btn btn-sm btn-info" @onclick="() => ShowDetails(item)">
                                Details
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (results != null && totalCount > 0)
{
    <div class="d-flex justify-content-between align-items-center mt-3">
        <div>
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="async () => { if(currentPage > 1) { currentPage--; await ExecuteQuery();
 }}">
                            Previous
                        </button>
                    </li>
                    @{
                        var totalPages = (int)Math.Ceiling(totalCount / (double)pageSize);
                        for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                <button class="page-link" @onclick="async () => { currentPage = pageNumber; await ExecuteQuery();
 }">
                                    @pageNumber
                                </button>
                            </li>
                        }
                    }
                    <li class="page-item @(currentPage == Math.Ceiling(totalCount / (double)pageSize) ? "disabled" : "")">
                        <button class="page-link" @onclick="async () => { if(currentPage < Math.Ceiling(totalCount / (double)pageSize)) {
 currentPage++; await ExecuteQuery(); }}">
                            Next
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
        <div>
            Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalCount) of @totalCount entries
        </div>
    </div>
}

@if (selectedItem != null)
{
    <div class="modal fade show" style="display: block" tabindex="-1" @onclick="CloseModal">
        <div class="modal-dialog modal-xl">
            <div class="modal-content" @onclick:stopPropagation>
                <div class="modal-header">
                    <h5 class="modal-title">LTDB/LTVC Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="card h-100">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">LTDB XML</h6>
                                        <button class="btn btn-outline-secondary btn-sm" @onclick="() => CopyToClipboard(formattedLtdbXml)">
                                            <i class="bi bi-clipboard"></i> Copy
                                        </button>
                                    </div>
                                    <div class="card-body p-0">
                                        <pre class="m-0 p-3" style="max-height: 400px; overflow-y: auto;">@formattedLtdbXml</pre>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="card h-100">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">LTVC XML</h6>
                                        <button class="btn btn-outline-secondary btn-sm" @onclick="() => CopyToClipboard(formattedLtvcXml)">
                                            <i class="bi bi-clipboard"></i> Copy
                                        </button>
                                    </div>
                                    <div class="card-body p-0">
                                        <pre class="m-0 p-3" style="max-height: 400px; overflow-y: auto;">@formattedLtvcXml</pre>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private ConfigModel config;
    private string selectedEnvironment;
    private DateTime? startDate;
    private DateTime? endDate;
    private string placa;
    private string requestId;
    private string containerNumbers;
    private long? idAgendamento;
    private string moveType;
    private string status;
    private bool isLoading;
    private List<LtdbLtvcRecord> results;
    private int totalCount;
    private int currentPage = 1;
    private int pageSize = 10;
    private LtdbLtvcRecord selectedItem;
    private string formattedLtdbXml;
    private string formattedLtvcXml;
    private CancellationTokenSource cts;

    protected override async Task OnInitializedAsync()
    {
        config = ConfigService.GetConfig();
        selectedEnvironment = config.OracleEnvironments.FirstOrDefault()?.Name;
        endDate = DateTime.Now.Date.AddDays(1).AddTicks(-1);
        startDate = endDate?.AddHours(-24);
    }

    private async Task ExecuteQuery()
    {
        try
        {
            cts?.Cancel();
            cts = new CancellationTokenSource();
            isLoading = true;

            StateHasChanged();

            var (queryResults, total) = await LtdbService.ExecuteQueryAsync(
            selectedEnvironment,
            startDate,
            endDate,
            placa,
            requestId,
            containerNumbers,
            moveType,
            idAgendamento,
            status,
            pageSize,
            currentPage,
            cts.Token);

            results = queryResults;
            totalCount = total;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowDetails(LtdbLtvcRecord item)
    {
        selectedItem = item;
        formattedLtdbXml = DataFormatUtils.FormatXml(item.LtdbXml);
        formattedLtvcXml = DataFormatUtils.FormatXml(item.LtvcXml);
    }

    private async Task ExportSqlQuery()
    {
        var sqlQuery = LtdbService.BuildQuery(
        startDate,
        endDate,
        placa,
        requestId,
        containerNumbers,
        moveType,
        idAgendamento,
        status,
        pageSize,
        currentPage);

        await CopyToClipboard(sqlQuery);
        toastService.ShowSuccess("SQL Query copied to clipboard");
    }

    private void ClearFilters()
    {
        placa = null;
        requestId = null;
        containerNumbers = null;
        idAgendamento = null;
        moveType = null;
        status = null;
        endDate = DateTime.Now.Date.AddDays(1).AddTicks(-1);
        startDate = endDate?.AddHours(-24);
        currentPage = 1;
    }

    private void CloseModal()
    {
        selectedItem = null;
    }

    private void CancelSearch()
    {
        cts?.Cancel();
        isLoading = false;
    }

    private async Task CopyToClipboard(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
    }
}
