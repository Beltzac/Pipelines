@page "/consul-diff"
@using Common
@using Common.Models
@using Common.Services
@using Common.Utils
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.Text.RegularExpressions
@using System.Reactive.Subjects
@using System.Reactive.Linq
@inject IConsulService ConsulService
@inject IToastService toastService
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject IConfigurationService ConfigService
@inject ConsulDiffStateService ConsulDiffStateService

<div class="options floating-controls mb-4">
    <div class="row w-100">
        <div class="col-md-5">
            <div class="form-group">
                <label>Source Environment:</label>
                <select class="form-control" @bind="ConsulDiffStateService.SelectedSourceEnv">
                    @foreach (var env in environments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-5">
            <div class="form-group">
                <label>Target Environment:</label>
                <select class="form-control" @bind="ConsulDiffStateService.SelectedTargetEnv">
                    @foreach (var env in environments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-check mt-4 mb-2">
                <input class="form-check-input" type="checkbox" @bind="ConsulDiffStateService.UseRecursive" id="useRecursive">
                <label class="form-check-label" for="useRecursive">
                    Use Recursive Values
                </label>
            </div>
            <button class="btn btn-primary" @onclick="CompareEnvironments">Compare</button>
        </div>
    </div>

    <div class="row w-100 mt-3">
        <div class="col-md-4">
            <div class="form-group">
                <input type="text" class="form-control" placeholder="Search by key..."
                       @bind="ConsulDiffStateService.SearchKey"
                       @bind:event="oninput"
                       @onkeyup="async () => await HandleSearch()" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <select class="form-control" @bind="ConsulDiffStateService.PageSize">
                    <option value="5">5 per page</option>
                    <option value="10">10 per page</option>
                    <option value="20">20 per page</option>
                    <option value="50">50 per page</option>
                </select>
            </div>
        </div>
    </div>
</div>

<div class="mb-3">
    <div class="row">
        <div class="col">
            <div id="myDiffElement" style="max-width:80VW;"></div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col d-flex justify-content-center">
        <nav aria-label="Pagination">
            <ul class="pagination">
                <li class="page-item @(ConsulDiffStateService.CurrentPage <= 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="async () => await ChangePage(ConsulDiffStateService.CurrentPage - 1)" disabled="@(ConsulDiffStateService.CurrentPage <= 1)">Previous</button>
                </li>
                @{
                    const int maxVisiblePages = 5;
                    if (TotalPages <= maxVisiblePages)
                    {
                        // Show all pages if total is less than max visible
                        for (int i = 1; i <= TotalPages; i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(ConsulDiffStateService.CurrentPage == pageNumber ? "active" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(pageNumber)">@pageNumber</button>
                            </li>
                        }
                    }
                    else
                    {
                        // Always show first page
                        <li class="page-item @(ConsulDiffStateService.CurrentPage == 1 ? "active" : "")">
                            <button class="page-link" @onclick="async () => await ChangePage(1)">1</button>
                        </li>

                        // Calculate range around current page
                        var rangeStart = Math.Max(2, ConsulDiffStateService.CurrentPage - 1);
                        var rangeEnd = Math.Min(TotalPages - 1, ConsulDiffStateService.CurrentPage + 1);

                        // Show ellipsis after first page if needed
                        if (rangeStart > 2)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }

                        // Show pages around current page
                        for (int i = rangeStart; i <= rangeEnd; i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(ConsulDiffStateService.CurrentPage == pageNumber ? "active" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(pageNumber)">@pageNumber</button>
                            </li>
                        }

                        // Show ellipsis before last page if needed
                        if (rangeEnd < TotalPages - 1)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }

                        // Always show last page
                        <li class="page-item @(ConsulDiffStateService.CurrentPage == TotalPages ? "active" : "")">
                            <button class="page-link" @onclick="async () => await ChangePage(TotalPages)">@TotalPages</button>
                        </li>
                    }
                }
                <li class="page-item @(ConsulDiffStateService.CurrentPage >= TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="async () => await ChangePage(ConsulDiffStateService.CurrentPage + 1)" disabled="@(ConsulDiffStateService.CurrentPage >= TotalPages)">Next</button>
                </li>
            </ul>
        </nav>
    </div>
</div>

<style>
    .floating-controls {
        position: sticky;
        top: 0;
        background-color: #fff;
        z-index: 1000;
        padding: 1rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
</style>

<script>
    window.initializeDiff2Html = function(diffString, sourceEnv, targetEnv) {
        console.log(diffString);
        var targetElement = document.getElementById('myDiffElement');
        var configuration = {
            drawFileList: false,
            fileListToggle: false,
            fileListStartVisible: false,
            fileContentToggle: false,
            matching: 'lines',
            outputFormat: 'side-by-side',
            synchronisedScroll: true,
            renderNothingWhenEmpty: true,
            rawTemplates: {
                "file-summary-line": `<li class="d2h-file-list-line">
                    <span class="d2h-file-name-wrapper">
                    {{>fileIcon}}
                    <a href="consul-diff#{{fileHtmlId}}" class="d2h-file-name">{{fileName}}</a>
                    <span class="d2h-file-stats">
                    <span class="d2h-lines-added">{{addedLines}}</span>
                    <span class="d2h-lines-deleted">{{deletedLines}}</span>
                    </span>
                    </span>
                    </li>`,
                "side-by-side-file-diff": `<div id="{{fileHtmlId}}" class="d2h-file-wrapper" data-lang="{{file.language}}">
                    <div class="d2h-file-header">
                    {{{filePath}}}
                    </div>
                    <div class="d2h-files-diff">
                    <div class="d2h-file-side-diff">
                    <div class="d-flex justify-content-end mb-2">
                    <button class="btn btn-sm btn-outline-primary" onclick="dotNetReference.invokeMethodAsync('OpenConsulValue', '{{file.oldName}}', '${sourceEnv}')">
                    <i class="bi bi-box-arrow-up-right"></i> Open in Consul
                    </button>
                    </div>
                    <div class="d2h-code-wrapper">
                    <table class="d2h-diff-table">
                    <tbody class="d2h-diff-tbody">
                    {{{diffs.left}}}
                    </tbody>
                    </table>
                    </div>
                    </div>
                    <div class="d2h-file-side-diff">
                    <div class="d-flex justify-content-end mb-2">
                    <button class="btn btn-sm btn-outline-primary" onclick="dotNetReference.invokeMethodAsync('OpenConsulValue', '{{file.newName}}', '${targetEnv}')">
                    <i class="bi bi-box-arrow-up-right"></i> Open in Consul
                    </button>
                    </div>
                    <div class="d2h-code-wrapper">
                    <table class="d2h-diff-table">
                    <tbody class="d2h-diff-tbody">
                    {{{diffs.right}}}
                    </tbody>
                    </table>
                    </div>
                    </div>
                    </div>
                    </div>`
            }
        };
        var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration, hljs);
        diff2htmlUi.draw();

        hljs.configure({ ignoreUnescapedHTML: true })

        document.querySelectorAll('.hljs').forEach((block) => {
            block.classList.remove('plaintext');
            block.classList.add('json');
            hljs.highlightElement(block);
        });
    };
</script>

@code {
    private List<ConsulEnvironment> environments = new();

    protected override async Task OnInitializedAsync()
    {
        var config = ConfigService.GetConfig();
        environments = config.ConsulEnvironments;
    }

    protected override void OnInitialized()
    {
        ConsulDiffStateService.OnChange += StateHasChanged;
        ConsulDiffStateService.Load();
    }

    public void Dispose()
    {
        ConsulDiffStateService.OnChange -= StateHasChanged;
        ConsulDiffStateService.Save();
    }

    [JSInvokable]
    public async Task OpenConsulValue(string key, string envName)
    {
        // Remove the .JSON extension that diff2html adds
        key = key.Replace(".json", "");
        try
        {
            var config = ConfigService.GetConfig();
            var env = config.ConsulEnvironments.FirstOrDefault(e => e.Name == envName);

            if (env == null)
            {
                toastService.ShowError($"Environment {envName} not found");
                return;
            }

            var keyValues = await ConsulService.GetConsulKeyValues(env);
            if (keyValues.TryGetValue(key, out var consulValue))
            {
                await OpenFolderUtils.OpenUrlAsync(consulValue.Url);
            }
            else
            {
                toastService.ShowError($"Key {key} not found in {envName}");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error opening value in Consul: {ex.Message}");
        }
    }

    private async Task CompareEnvironments()
    {
        if (string.IsNullOrEmpty(ConsulDiffStateService.SelectedSourceEnv) || string.IsNullOrEmpty(ConsulDiffStateService.SelectedTargetEnv))
        {
            toastService.ShowError("Please select both environments");
            return;
        }

        try
        {
            ConsulDiffStateService.Differences = await ConsulService.CompareAsync(ConsulDiffStateService.SelectedSourceEnv, ConsulDiffStateService.SelectedTargetEnv, ConsulDiffStateService.UseRecursive);
            ConsulDiffStateService.CurrentPage = 1; // Reset to first page
            await RunCompare();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error comparing environments: {ex.Message}");
        }
    }

    protected async Task RunCompare()
    {
        var filteredDiffs = GetFilteredAndPaginatedDifferences();
        if (filteredDiffs.Count == 0)
        {
            await JS.InvokeVoidAsync("initializeDiff2Html", "", ConsulDiffStateService.SelectedSourceEnv, ConsulDiffStateService.SelectedTargetEnv);
            if (ConsulDiffStateService.Differences.Count > 0)
            {
                toastService.ShowInfo("No differences found matching the search criteria");
            }
            return;
        }

        var diff = String.Join("\r\n", filteredDiffs.Values);
        await JS.InvokeVoidAsync("initializeDiff2Html", diff, ConsulDiffStateService.SelectedSourceEnv, ConsulDiffStateService.SelectedTargetEnv);

        var totalItems = GetFilteredCount();
        var currentPage = ConsulDiffStateService.CurrentPage;
        var pageSize = ConsulDiffStateService.PageSize;
        var message = $"Showing {Math.Min(pageSize, filteredDiffs.Count)} of {totalItems} differences (Page {currentPage} of {TotalPages})";
        if (!string.IsNullOrWhiteSpace(ConsulDiffStateService.SearchKey))
        {
            message += $" (filtered by '{ConsulDiffStateService.SearchKey}')";
        }
        toastService.ShowSuccess(message);
    }

    private async Task HandleSearch()
    {
        ConsulDiffStateService.CurrentPage = 1; // Reset to first page when searching
        await RunCompare();
    }

    private async Task ChangePage(int page)
    {
        if (page < 1 || page > TotalPages)
            return;

        ConsulDiffStateService.CurrentPage = page;
        await RunCompare();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setDotNetReference", DotNetObjectReference.Create(this));

            bool initialized = false;

            ConsulDiffStateService.InitializeState(async x =>
            {
                if (environments.Count >= 2)
                {
                    x.SelectedSourceEnv = environments[0].Name;
                    x.SelectedTargetEnv = environments.Count > 1 ? environments[1].Name : environments[0].Name;
                    await CompareEnvironments();
                }

                initialized = true;
            });

            if (!initialized)
            {
                await RunCompare();
            }
        }
    }

    public Dictionary<string, string> GetFilteredAndPaginatedDifferences()
    {
        var filtered = string.IsNullOrWhiteSpace(ConsulDiffStateService.SearchKey)
            ? ConsulDiffStateService.Differences
            : ConsulDiffStateService.Differences.Where(kvp => kvp.Key.Contains(ConsulDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase))
                       .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);

        return filtered
            .Skip((ConsulDiffStateService.CurrentPage - 1) * ConsulDiffStateService.PageSize)
            .Take(ConsulDiffStateService.PageSize)
            .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
    }

    public int TotalPages => (int)Math.Ceiling(GetFilteredCount() / (double)ConsulDiffStateService.PageSize);

    public int GetFilteredCount()
    {
        if (string.IsNullOrWhiteSpace(ConsulDiffStateService.SearchKey))
            return ConsulDiffStateService.Differences.Count;

        return ConsulDiffStateService.Differences.Count(kvp =>
            kvp.Key.Contains(ConsulDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase));
    }
}