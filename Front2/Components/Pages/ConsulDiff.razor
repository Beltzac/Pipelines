@page "/consul-diff"
@using Common
@using Common.Models
@using Common.Services
@using Common.Utils
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.Text.RegularExpressions
@using System.Reactive.Subjects
@using System.Reactive.Linq
@inject IConsulService ConsulService
@inject IToastService toastService
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject IConfigurationService ConfigService
@inject ConsulDiffStateService ConsulDiffStateService

<div class="row mb-4">
    <div class="col-md-5">
        <div class="form-group">
            <label>Source Environment:</label>
            <select class="form-control" @bind="ConsulDiffStateService.SelectedSourceEnv">
                @foreach (var env in environments)
                {
                    <option value="@env.Name">@env.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="col-md-5">
        <div class="form-group">
            <label>Target Environment:</label>
            <select class="form-control" @bind="ConsulDiffStateService.SelectedTargetEnv">
                @foreach (var env in environments)
                {
                    <option value="@env.Name">@env.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="col-md-2">
        <div class="form-check mt-4 mb-2">
            <input class="form-check-input" type="checkbox" @bind="ConsulDiffStateService.UseRecursive" id="useRecursive">
            <label class="form-check-label" for="useRecursive">
                Use Recursive Values
            </label>
        </div>
        <button class="btn btn-primary" @onclick="CompareEnvironments">Compare</button>
    </div>
</div>

<div class="mb-3">
    <div class="row">
        <div class="col">
            <div id="myDiffElement" style="max-width:80VW;"></div>
        </div>
    </div>
</div>

<script>
    window.initializeDiff2Html = function(diffString, sourceEnv, targetEnv) {
        console.log(diffString);
        var targetElement = document.getElementById('myDiffElement');
        var configuration = {
            drawFileList: false,
            fileListToggle: false,
            fileListStartVisible: false,
            fileContentToggle: false,
            matching: 'lines',
            outputFormat: 'side-by-side',
            synchronisedScroll: true,
            renderNothingWhenEmpty: true,
            rawTemplates: {
                "file-summary-line": `<li class="d2h-file-list-line">
                    <span class="d2h-file-name-wrapper">
                    {{>fileIcon}}
                    <a href="consul-diff#{{fileHtmlId}}" class="d2h-file-name">{{fileName}}</a>
                    <span class="d2h-file-stats">
                    <span class="d2h-lines-added">{{addedLines}}</span>
                    <span class="d2h-lines-deleted">{{deletedLines}}</span>
                    </span>
                    </span>
                    </li>`,
                "side-by-side-file-diff": `<div id="{{fileHtmlId}}" class="d2h-file-wrapper" data-lang="{{file.language}}">
                    <div class="d2h-file-header">
                    {{{filePath}}}
                    </div>
                    <div class="d2h-files-diff">
                    <div class="d2h-file-side-diff">
                    <div class="d-flex justify-content-end mb-2">
                    <button class="btn btn-sm btn-outline-primary" onclick="dotNetReference.invokeMethodAsync('OpenConsulValue', '{{file.oldName}}', '${sourceEnv}')">
                    <i class="bi bi-box-arrow-up-right"></i> Open in Consul
                    </button>
                    </div>
                    <div class="d2h-code-wrapper">
                    <table class="d2h-diff-table">
                    <tbody class="d2h-diff-tbody">
                    {{{diffs.left}}}
                    </tbody>
                    </table>
                    </div>
                    </div>
                    <div class="d2h-file-side-diff">
                    <div class="d-flex justify-content-end mb-2">
                    <button class="btn btn-sm btn-outline-primary" onclick="dotNetReference.invokeMethodAsync('OpenConsulValue', '{{file.newName}}', '${targetEnv}')">
                    <i class="bi bi-box-arrow-up-right"></i> Open in Consul
                    </button>
                    </div>
                    <div class="d2h-code-wrapper">
                    <table class="d2h-diff-table">
                    <tbody class="d2h-diff-tbody">
                    {{{diffs.right}}}
                    </tbody>
                    </table>
                    </div>
                    </div>
                    </div>
                    </div>`
            }
        };
        var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration, hljs);
        diff2htmlUi.draw();

        hljs.configure({ ignoreUnescapedHTML: true })

        document.querySelectorAll('.hljs').forEach((block) => {
            block.classList.remove('plaintext');
            block.classList.add('json');
            hljs.highlightElement(block);
        });
    };
</script>

@code {
    private List<ConsulEnvironment> environments = new();

    protected override async Task OnInitializedAsync()
    {
        var config = ConfigService.GetConfig();
        environments = config.ConsulEnvironments;
    }

    protected override void OnInitialized()
    {
        ConsulDiffStateService.OnChange += StateHasChanged;
        ConsulDiffStateService.Load();
    }

    public void Dispose()
    {
        ConsulDiffStateService.OnChange -= StateHasChanged;
        ConsulDiffStateService.Save();
    }

    [JSInvokable]
    public async Task OpenConsulValue(string key, string envName)
    {
        // Remove the .JSON extension that diff2html adds
        key = key.Replace(".json", "");
        try
        {
            var config = ConfigService.GetConfig();
            var env = config.ConsulEnvironments.FirstOrDefault(e => e.Name == envName);

            if (env == null)
            {
                toastService.ShowError($"Environment {envName} not found");
                return;
            }

            var keyValues = await ConsulService.GetConsulKeyValues(env);
            if (keyValues.TryGetValue(key, out var consulValue))
            {
                await OpenFolderUtils.OpenUrlAsync(consulValue.Url);
            }
            else
            {
                toastService.ShowError($"Key {key} not found in {envName}");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error opening value in Consul: {ex.Message}");
        }
    }

    private async Task CompareEnvironments()
    {
        if (string.IsNullOrEmpty(ConsulDiffStateService.SelectedSourceEnv) || string.IsNullOrEmpty(ConsulDiffStateService.SelectedTargetEnv))
        {
            toastService.ShowError("Please select both environments");
            return;
        }

        try
        {
            ConsulDiffStateService.Differences = await ConsulService.CompareAsync(ConsulDiffStateService.SelectedSourceEnv, ConsulDiffStateService.SelectedTargetEnv, ConsulDiffStateService.UseRecursive);
            await RunCompare();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error comparing environments: {ex.Message}");
        }
    }

    protected async Task RunCompare()
    {
        var diff = String.Join("\r\n", ConsulDiffStateService.Differences.Values);
        await JS.InvokeVoidAsync("initializeDiff2Html", diff, ConsulDiffStateService.SelectedSourceEnv, ConsulDiffStateService.SelectedTargetEnv);
        toastService.ShowSuccess($"Comparison completed successfully");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setDotNetReference", DotNetObjectReference.Create(this));

            bool initialized = false;

            ConsulDiffStateService.InitializeState(async x =>
            {
                if (environments.Count >= 2)
                {
                    x.SelectedSourceEnv = environments[0].Name;
                    x.SelectedTargetEnv = environments.Count > 1 ? environments[1].Name : environments[0].Name;
                    await CompareEnvironments();
                }

                initialized = true;
            });

            if (!initialized)
            {
                await RunCompare();
            }
        }
    }
}