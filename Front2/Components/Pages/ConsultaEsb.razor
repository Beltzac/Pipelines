@page "/consulta-esb"
@using Common.Models
@using Common.Services
@using Common.Utils
@using Blazored.Typeahead
@inject IRequisicaoExecucaoService RequisicaoService
@inject IConfigurationService ConfigService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<h3>Requisição Execução Query</h3>

<div class="card mb-3">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Filters</h5>
    </div>
    <div class="card-body">
        <div class="row g-3">
    <div class="col-md-3">
        <label class="form-label">Environment</label>
        <select class="form-select" @bind="selectedEnvironment">
            @foreach (var env in config.OracleEnvironments)
            {
                <option value="@env.Name">@env.Name</option>
            }
        </select>
    </div>

    <div class="col-md-3">
        <label class="form-label">Start Date</label>
        <input type="datetime-local" class="form-control" @bind="startDate">
    </div>

    <div class="col-md-3">
        <label class="form-label">End Date</label>
        <input type="datetime-local" class="form-control" @bind="endDate">
    </div>

    <div class="col-md-3">
        <label class="form-label">URL/Nome Fluxo Filter</label>
        <input type="text" class="form-control" @bind="urlFilter" placeholder="Search URL or Nome Fluxo">
    </div>

    <div class="col-md-3">
        <label class="form-label">HTTP Method</label>
        <select class="form-select" @bind="httpMethod">
            <option value="">All</option>
            <option value="GET">GET</option>
            <option value="POST">POST</option>
            <option value="PUT">PUT</option>
            <option value="DELETE">DELETE</option>
        </select>
    </div>

    <div class="col-md-3">
        <label class="form-label">Container Numbers</label>
        <input type="text" class="form-control" @bind="containerNumbers"
               placeholder="Comma separated values">
    </div>

    <div class="col-md-3">
        <label class="form-label">User</label>
        <BlazoredTypeahead TItem="KeyValuePair<int, string>"
                          TValue="int?"
                          Value="userId"
                          ValueExpression="() => userId"
                          ValueChanged="(int? val) => userId = val"
                          SearchMethod="SearchUsers"
                          ConvertMethod="@(item => item.Key)"
                          EnableDropDown="true"
                          placeholder="Search user..."
                          class="form-control">
            <SelectedTemplate Context="user">
                @(userLogins.TryGetValue(user, out var login) ? $"{login} ({user})" : user.ToString())
            </SelectedTemplate>
            <ResultTemplate Context="kvp">
                @kvp.Value (@kvp.Key)
            </ResultTemplate>
            <NotFoundTemplate>
                No users found
            </NotFoundTemplate>
        </BlazoredTypeahead>
    </div>

    <div class="col-md-3">
        <label class="form-label">Execução ID</label>
        <input type="number" class="form-control" @bind="execucaoId">
    </div>


    <div class="col-md-3">
        <label class="form-label">HTTP Status Range</label>
        <select class="form-select" @bind="httpStatusRange">
            <option value="">All</option>
            <option value="2xx">2xx (Success)</option>
            <option value="3xx">3xx (Redirection)</option>
            <option value="4xx">4xx (Client Error)</option>
            <option value="5xx">5xx (Server Error)</option>
        </select>
    </div>

    <div class="col-md-3">
        <label class="form-label">Response Status</label>
        <select class="form-select" @bind="responseStatus">
            <option value="">All</option>
            <option value="1">Success</option>
            <option value="2">Error</option>
        </select>
    </div>

    <div class="col-12">
        @if (isLoading)
        {
            <button class="btn btn-secondary" @onclick="CancelSearch">Cancel</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="ExecuteQuery">Search</button>
        }
        </div>
    </div>
</div>
</div>
@if (isLoading)
{
    <div class="d-flex justify-content-center mt-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@if (results != null)
{
    <div class="mt-4">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Source</th>
                    <th>ID</th>
                    <th>Method</th>
                    <th>HTTP Status</th>
                    <th>Response Status</th>
                    <th>URL / Fluxo</th>
                    <th>Start Date</th>
                    <th>User ID</th>
                    <th>Delay (Segundos)</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in results)
                {
                    <tr>
                        <td>@item.Source</td>
                        <td>@item.IdExecucao</td>
                        <td>@item.HttpMethod</td>
                        <td>
                            <span class="badge @GetStatusBadgeClass(item.HttpStatusCode)">
                                @item.HttpStatusCode
                            </span>
                        </td>
                        <td>@(GetResponseStatus(item.Resposta))</td>
                        <td title="@(item.Url ?? item.NomeFluxo)" style="max-width: 300px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                            @(item.Url ?? item.NomeFluxo)
                        </td>
                        <td>@item.DataInicio.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@(userLogins.TryGetValue(item.IdUsuarioInclusao, out var login) ? login : item.IdUsuarioInclusao.ToString())</td>
                        <td>@(item.Duration?.TotalSeconds.ToString("F3"))</td>
                        <td>
                            <button class="btn btn-sm btn-info" @onclick="() => ShowDetails(item)">
                                Details
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (results != null && totalCount > 0)
{
    <div class="d-flex justify-content-between align-items-center mt-3">
        <div>
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="async () => { if(currentPage > 1) { currentPage--; await ExecuteQuery(); }}">Previous</button>
                    </li>
                    @{
                        var totalPages = (int)Math.Ceiling(totalCount / (double)pageSize);
                        for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                <button class="page-link" @onclick="async () => { currentPage = pageNumber; await ExecuteQuery(); }">@pageNumber</button>
                            </li>
                        }
                    }
                    <li class="page-item @(currentPage == Math.Ceiling(totalCount / (double)pageSize) ? "disabled" : "")">
                        <button class="page-link" @onclick="async () => { if(currentPage < Math.Ceiling(totalCount / (double)pageSize)) { currentPage++; await ExecuteQuery(); }}">Next</button>
                    </li>
                </ul>
            </nav>
        </div>
        <div>
            Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalCount) of @totalCount entries
        </div>
    </div>
}

@if (selectedItem != null)
{
    <div class="modal fade show" style="display: block" tabindex="-1" @onclick="CloseModal">
        <div class="modal-dialog modal-xl">
            <div class="modal-content" @onclick:stopPropagation>
                <div class="modal-header">
                    <h5 class="modal-title">Execution Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="card h-100">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">Request</h6>
                                        <div>
                                            <button class="btn btn-outline-secondary btn-sm me-2" @onclick="() => CopyToClipboard(formattedRequest)">
                                                <i class="bi bi-clipboard"></i> Copy
                                            </button>
                                            @if (DataFormatUtils.IsJson(formattedRequest) || DataFormatUtils.IsXml(formattedRequest))
                                            {
                                                <button class="btn btn-outline-secondary btn-sm" @onclick="() => ConvertRequest()">
                                                    @(DataFormatUtils.IsJson(formattedRequest) ? "To XML" : "To JSON")
                                                </button>
                                            }
                                        </div>
                                    </div>
                                    <div class="card-body p-0">
                                        <pre class="m-0 p-3" style="max-height: 400px; overflow-y: auto;">@formattedRequest</pre>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="card h-100">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">Response</h6>
                                        <div>
                                            <button class="btn btn-outline-secondary btn-sm me-2" @onclick="() => CopyToClipboard(formattedResponse)">
                                                <i class="bi bi-clipboard"></i> Copy
                                            </button>
                                            @if (DataFormatUtils.IsJson(formattedResponse) || DataFormatUtils.IsXml(formattedResponse))
                                            {
                                                <button class="btn btn-outline-secondary btn-sm" @onclick="() => ConvertResponse()">
                                                    @(DataFormatUtils.IsJson(formattedResponse) ? "To XML" : "To JSON")
                                                </button>
                                            }
                                        </div>
                                    </div>
                                    <div class="card-body p-0">
                                        <pre class="m-0 p-3" style="max-height: 400px; overflow-y: auto;">@formattedResponse</pre>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(selectedItem.Erro))
                        {
                            <div class="row">
                                <div class="col-12">
                                    <div class="card">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <h6 class="mb-0">Error</h6>
                                            <div>
                                                <button class="btn btn-outline-secondary btn-sm me-2" @onclick="() => CopyToClipboard(selectedItem.Erro)">
                                                    <i class="bi bi-clipboard"></i> Copy
                                                </button>
                                                @if (DataFormatUtils.IsJson(selectedItem.Erro) || DataFormatUtils.IsXml(selectedItem.Erro))
                                                {
                                                    <button class="btn btn-outline-secondary btn-sm" @onclick="() => ConvertError()">
                                                        @(DataFormatUtils.IsJson(selectedItem.Erro) ? "To XML" : "To JSON")
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                        <div class="card-body p-0">
                                            <pre class="m-0 p-3" style="max-height: 400px; overflow-y: auto;">@formattedError</pre>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string selectedEnvironment;
    private DateTime? startDate;
    private DateTime? endDate;
    private string urlFilter;
    private string httpMethod;
    private string containerNumbers;
    private string nomeFluxo;
    private int? userId;
    private int? execucaoId;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalCount = 0;
    private string? httpStatusRange;
    private string? responseStatus;

    private List<RequisicaoExecucao> results;
    private RequisicaoExecucao selectedItem;
    private Dictionary<int, string> userLogins = new();

    private ConfigModel config;

    private async Task<IEnumerable<KeyValuePair<int, string>>> SearchUsers(string searchText)
    {
        if (string.IsNullOrEmpty(selectedEnvironment))
        {
            return new List<KeyValuePair<int, string>>();
        }

        return await RequisicaoService.GetUsersAsync(selectedEnvironment, searchText);
    }

    protected override async Task OnInitializedAsync()
    {
        config = ConfigService.GetConfig();
        selectedEnvironment = config.OracleEnvironments.FirstOrDefault()?.Name;
        
        // Set default date range to last 24 hours
        endDate = DateTime.Now;
        startDate = endDate?.AddHours(-24);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("addKeyboardShortcuts", objRef);
        }
    }

    private DotNetObjectReference<ConsultaEsb>? objRef;
    public async ValueTask DisposeAsync()
    {
        if (objRef != null)
        {
            objRef.Dispose();
        }
    }

    [JSInvokable]
    public async Task HandleKeyPress(string key)
    {
        if (key == "Enter")
        {
            await ExecuteQuery();
        }
        else if (key == "Escape")
        {
            await ClearFilters();
        }

        StateHasChanged();
    }

    private async Task ClearFilters()
    {
        urlFilter = null;
        httpMethod = null;
        containerNumbers = null;
        nomeFluxo = null;
        userId = null;
        execucaoId = null;
        httpStatusRange = null;
        responseStatus = null;
        startDate = DateTime.Now.AddHours(-24);
        endDate = DateTime.Now;
        currentPage = 1;
        await ExecuteQuery();
    }

    private string GetStatusBadgeClass(string? statusCode)
    {
        if (string.IsNullOrEmpty(statusCode)) return "bg-secondary";
        return statusCode.StartsWith("2") ? "bg-success" :
               statusCode.StartsWith("3") ? "bg-info" :
               statusCode.StartsWith("4") ? "bg-warning" :
               statusCode.StartsWith("5") ? "bg-danger" :
               "bg-secondary";
    }

    private bool isLoading = false;
    private CancellationTokenSource? cts;

    private async Task ExecuteQuery()
    {
        try 
        {
            cts?.Cancel();
            cts = new CancellationTokenSource();
            isLoading = true;

            StateHasChanged();

            var containerNumbersArray = !string.IsNullOrEmpty(containerNumbers)
                ? containerNumbers.Split(',').Select(x => x.Trim()).ToArray()
                : null;

            // Get all unique user IDs from the current results
            var uniqueUserIds = results?.Select(r => r.IdUsuarioInclusao).Distinct().ToList() ?? new List<int>();
            userLogins = await RequisicaoService.GetUsersAsync(selectedEnvironment);

            var (queryResults, total) = await RequisicaoService.ExecuteQueryAsync(
            selectedEnvironment,
            startDate,
            endDate,
            urlFilter,
            httpMethod,
            containerNumbersArray,
            userId,
            execucaoId,
            pageSize,
            currentPage,
            httpStatusRange,
            responseStatus,
            cts.Token);
            results = queryResults;
            totalCount = total;
        }
        finally
        {
            isLoading = false;
        }
    }

    private string formattedRequest = "";
    private string formattedResponse = "";
    private string formattedError = "";
    private void ShowDetails(RequisicaoExecucao item)
    {
        selectedItem = item;
        formattedRequest = DataFormatUtils.IsJson(item.Requisicao) 
            ? DataFormatUtils.FormatJson(item.Requisicao)
            : DataFormatUtils.IsXml(item.Requisicao)
                ? DataFormatUtils.FormatXml(item.Requisicao)
                : item.Requisicao;
                
        formattedResponse = DataFormatUtils.IsJson(item.Resposta)
            ? DataFormatUtils.FormatJson(item.Resposta)
            : DataFormatUtils.IsXml(item.Resposta)
                ? DataFormatUtils.FormatXml(item.Resposta)
                : item.Resposta;

        formattedError = DataFormatUtils.IsJson(item.Erro)
            ? DataFormatUtils.FormatJson(item.Erro)
            : DataFormatUtils.IsXml(item.Erro)
                ? DataFormatUtils.FormatXml(item.Erro)
                : item.Erro ?? "";
    }


    private void ConvertRequest()
    {
        if (selectedItem?.Requisicao == null) return;
        if (DataFormatUtils.IsJson(formattedRequest))
        {
            formattedRequest = DataFormatUtils.JsonToXml(formattedRequest);
        }
        else if (DataFormatUtils.IsXml(formattedRequest))
        {
            formattedRequest = DataFormatUtils.XmlToJson(formattedRequest);
        }
        StateHasChanged();
    }

    private void ConvertResponse()
    {
        if (selectedItem?.Resposta == null) return;
        if (DataFormatUtils.IsJson(formattedResponse))
        {
            formattedResponse = DataFormatUtils.JsonToXml(formattedResponse);
        }
        else if (DataFormatUtils.IsXml(formattedResponse))
        {
            formattedResponse = DataFormatUtils.XmlToJson(formattedResponse);
        }
        StateHasChanged();
    }

    private void ConvertError()
    {
        if (selectedItem?.Erro == null) return;
        if (DataFormatUtils.IsJson(formattedError))
        {
            formattedError = DataFormatUtils.JsonToXml(formattedError);
        }
        else if (DataFormatUtils.IsXml(formattedError))
        {
            formattedError = DataFormatUtils.XmlToJson(formattedError);
        }
        StateHasChanged();
    }

    private void CloseModal()
    {
        selectedItem = null;
    }

    private void CancelSearch()
    {
        cts?.Cancel();
        isLoading = false;
    }

    private async Task CopyToClipboard(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
    }

    private string GetResponseStatus(string? response)
    {
        if (string.IsNullOrEmpty(response)) return "";

        try
        {
            if (DataFormatUtils.IsJson(response))
            {
                var match = System.Text.RegularExpressions.Regex.Match(response, @"""Status""\s*:\s*""?([^"",}\s]+)");
                return match.Success ? (match.Groups[1].Value == "1" ? "Success" : match.Groups[1].Value == "2" ? "Error" : match.Groups[1].Value) : "";
            }
            else if (DataFormatUtils.IsXml(response))
            {
                var match = System.Text.RegularExpressions.Regex.Match(response, @"<Status>\s*([^<\s]+)");
                return match.Success ? (match.Groups[1].Value == "1" ? "Success" : match.Groups[1].Value == "2" ? "Error" : match.Groups[1].Value) : "";
            }
        }
        catch
        {
            // If there's any error parsing, return empty string
            return "";
        }

        return "";
    }
 }
