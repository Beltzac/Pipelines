@page "/consulta-esb"
@using Common.Models
@using Common.Services
@using Common.Utils
@using Blazored.Typeahead
@inject IRequisicaoExecucaoService RequisicaoService
@inject IConfigurationService ConfigService

<h3>Requisição Execução Query</h3>

<div class="row g-3">
    <div class="col-md-3">
        <label class="form-label">Environment</label>
        <select class="form-select" @bind="selectedEnvironment">
            @foreach (var env in config.OracleEnvironments)
            {
                <option value="@env.Name">@env.Name</option>
            }
        </select>
    </div>

    <div class="col-md-3">
        <label class="form-label">Start Date</label>
        <input type="datetime-local" class="form-control" @bind="startDate">
    </div>

    <div class="col-md-3">
        <label class="form-label">URL Filter</label>
        <input type="text" class="form-control" @bind="urlFilter">
    </div>

    <div class="col-md-3">
        <label class="form-label">HTTP Method</label>
        <select class="form-select" @bind="httpMethod">
            <option value="">All</option>
            <option value="GET">GET</option>
            <option value="POST">POST</option>
            <option value="PUT">PUT</option>
            <option value="DELETE">DELETE</option>
        </select>
    </div>

    <div class="col-md-3">
        <label class="form-label">Container Numbers</label>
        <input type="text" class="form-control" @bind="containerNumbers"
               placeholder="Comma separated values">
    </div>

    <div class="col-md-3">
        <label class="form-label">Nome Fluxo</label>
        <input type="text" class="form-control" @bind="nomeFluxo">
    </div>

    <div class="col-md-3">
        <label class="form-label">User</label>
        <BlazoredTypeahead TItem="KeyValuePair<int, string>"
                          TValue="int?"
                          Value="userId"
                          ValueExpression="() => userId"
                          ValueChanged="(int? val) => userId = val"
                          SearchMethod="SearchUsers"
                          ConvertMethod="item => item.Key"
                          EnableDropDown="true"
                          placeholder="Search user..."
                          class="form-control">
            <SelectedTemplate>
                @context.Value
            </SelectedTemplate>
            <ResultTemplate>
                @context.Value
            </ResultTemplate>
            <NotFoundTemplate>
                No users found
            </NotFoundTemplate>
        </BlazoredTypeahead>
    </div>

    <div class="col-md-3">
        <label class="form-label">Execução ID</label>
        <input type="number" class="form-control" @bind="execucaoId">
    </div>

    <div class="col-md-3">
        <label class="form-label">Max Rows</label>
        <input type="number" class="form-control" @bind="maxRows">
    </div>

    <div class="col-md-3">
        <label class="form-label">HTTP Status Range</label>
        <select class="form-select" @bind="httpStatusRange">
            <option value="">All</option>
            <option value="2xx">2xx (Success)</option>
            <option value="3xx">3xx (Redirection)</option>
            <option value="4xx">4xx (Client Error)</option>
            <option value="5xx">5xx (Server Error)</option>
        </select>
    </div>

    <div class="col-md-3">
        <label class="form-label">Response Status</label>
        <select class="form-select" @bind="responseStatus">
            <option value="">All</option>
            <option value="1">Success</option>
            <option value="2">Error</option>
        </select>
    </div>

    <div class="col-12">
        <button class="btn btn-primary" @onclick="ExecuteQuery">Search</button>
    </div>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center mt-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (results != null)
{
    <div class="mt-4">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Source</th>
                    <th>ID</th>
                    <th>Method</th>
                    <th>HTTP Status</th>
                    <th>Response Status</th>
                    <th>Flow</th>
                    <th>URL</th>
                    <th>Start Date</th>
                    <th>User ID</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in results)
                {
                    <tr>
                        <td>@item.Source</td>
                        <td>@item.IdExecucao</td>
                        <td>@item.HttpMethod</td>
                        <td>@item.HttpStatusCode</td>
                        <td>@(GetResponseStatus(item.Resposta))</td>
                        <td>@item.NomeFluxo</td>
                        <td>@item.Url</td>
                        <td>@item.DataInicio.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@item.IdUsuarioInclusao</td>
                        <td>
                            <button class="btn btn-sm btn-info" @onclick="() => ShowDetails(item)">
                                Details
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (selectedItem != null)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Execution Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6>Request</h6>
                                    <button class="btn btn-outline-secondary btn-sm" @onclick="() => ConvertRequest()"
                                            disabled="@(!DataFormatUtils.IsJson(formattedRequest) && !DataFormatUtils.IsXml(formattedRequest))">
                                        @(DataFormatUtils.IsJson(formattedRequest) ? "To XML" : "To JSON")
                                    </button>
                                </div>
                                <pre class="pre-scrollable">@formattedRequest</pre>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6>Response</h6>
                                    <button class="btn btn-outline-secondary btn-sm" @onclick="() => ConvertResponse()"
                                            disabled="@(!DataFormatUtils.IsJson(formattedResponse) && !DataFormatUtils.IsXml(formattedResponse))">
                                        @(DataFormatUtils.IsJson(formattedResponse) ? "To XML" : "To JSON")
                                    </button>
                                </div>
                                <pre class="pre-scrollable">@formattedResponse</pre>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(selectedItem.Erro))
                        {
                            <div class="row mt-3">
                                <div class="col-12">
                                    <h6>Error</h6>
                                    <pre class="pre-scrollable">@selectedItem.Erro</pre>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string selectedEnvironment;
    private DateTime? startDate;
    private string urlFilter;
    private string httpMethod;
    private string containerNumbers;
    private string nomeFluxo;
    private int? userId;
    private int? execucaoId;
    private int maxRows = 10;
    private string? httpStatusRange;
    private string? responseStatus;

    private List<RequisicaoExecucao> results;
    private RequisicaoExecucao selectedItem;

    private ConfigModel config;

    private async Task<IEnumerable<KeyValuePair<int, string>>> SearchUsers(string searchText)
    {
        if (string.IsNullOrEmpty(selectedEnvironment))
        {
            return new List<KeyValuePair<int, string>>();
        }

        return await RequisicaoService.GetUsersAsync(selectedEnvironment, searchText);
    }

    protected override async Task OnInitializedAsync()
    {
        config = ConfigService.GetConfig();
        selectedEnvironment = config.OracleEnvironments.FirstOrDefault()?.Name;
    }

    private bool isLoading = false;

    private async Task ExecuteQuery()
    {
        try 
        {
            isLoading = true;
            var containerNumbersArray = !string.IsNullOrEmpty(containerNumbers)
                ? containerNumbers.Split(',').Select(x => x.Trim()).ToArray()
                : null;

            results = await RequisicaoService.ExecuteQueryAsync(
            selectedEnvironment,
            startDate,
            urlFilter,
            httpMethod,
            containerNumbersArray,
            nomeFluxo,
            userId,
            execucaoId,
            maxRows,
            httpStatusRange,
            responseStatus);
        }
        finally
        {
            isLoading = false;
        }
    }

    private string formattedRequest = "";
    private string formattedResponse = "";
    private void ShowDetails(RequisicaoExecucao item)
    {
        selectedItem = item;
        formattedRequest = DataFormatUtils.IsJson(item.Requisicao) 
            ? DataFormatUtils.FormatJson(item.Requisicao)
            : DataFormatUtils.IsXml(item.Requisicao)
                ? DataFormatUtils.FormatXml(item.Requisicao)
                : item.Requisicao;
                
        formattedResponse = DataFormatUtils.IsJson(item.Resposta)
            ? DataFormatUtils.FormatJson(item.Resposta)
            : DataFormatUtils.IsXml(item.Resposta)
                ? DataFormatUtils.FormatXml(item.Resposta)
                : item.Resposta;
    }


    private void ConvertRequest()
    {
        if (selectedItem?.Requisicao == null) return;
        if (DataFormatUtils.IsJson(formattedRequest))
        {
            formattedRequest = DataFormatUtils.JsonToXml(formattedRequest);
        }
        else if (DataFormatUtils.IsXml(formattedRequest))
        {
            formattedRequest = DataFormatUtils.XmlToJson(formattedRequest);
        }
        StateHasChanged();
    }

    private void ConvertResponse()
    {
        if (selectedItem?.Resposta == null) return;
        if (DataFormatUtils.IsJson(formattedResponse))
        {
            formattedResponse = DataFormatUtils.JsonToXml(formattedResponse);
        }
        else if (DataFormatUtils.IsXml(formattedResponse))
        {
            formattedResponse = DataFormatUtils.XmlToJson(formattedResponse);
        }
        StateHasChanged();
    }

    private void CloseModal()
    {
        selectedItem = null;
    }

    private string GetResponseStatus(string? response)
    {
        if (string.IsNullOrEmpty(response)) return "";

        try
        {
            if (DataFormatUtils.IsJson(response))
            {
                var match = System.Text.RegularExpressions.Regex.Match(response, @"""Status""\s*:\s*""?([^"",}\s]+)");
                return match.Success ? match.Groups[1].Value : "";
            }
            else if (DataFormatUtils.IsXml(response))
            {
                var match = System.Text.RegularExpressions.Regex.Match(response, @"<Status>\s*([^<\s]+)");
                return match.Success ? match.Groups[1].Value : "";
            }
        }
        catch
        {
            // If there's any error parsing, return empty string
            return "";
        }

        return "";
    }
 }
