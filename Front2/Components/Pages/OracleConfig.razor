@page "/oracle-config"
@using Common.Models
@inject IConfigurationService ConfigService
@inject IToastService toastService
@rendermode InteractiveServer

<h3>Oracle Environments Configuration</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="AddEnvironment">Add Environment</button>
</div>

@foreach (var env in config.OracleEnvironments)
{
    <div class="card mb-3">
        <div class="card-body">
            <div class="form-group">
                <label>Name:</label>
                <input class="form-control" @bind="env.Name" />
            </div>
            <div class="form-group">
                <label>Connection String:</label>
                <input class="form-control" @bind="env.ConnectionString" type="password" />
            </div>
            <div class="form-group">
                <label>Schema:</label>
                <input class="form-control" @bind="env.Schema" />
            </div>
            <div class="mt-2">
                <button class="btn btn-danger" @onclick="() => RemoveEnvironment(env)">Remove</button>
                <button class="btn btn-secondary ms-2" @onclick="() => TestConnection(env)">Test Connection</button>
            </div>
        </div>
    </div>
}

<button class="btn btn-primary" @onclick="SaveConfig">Save Configuration</button>

@code {
    private ConfigModel config = new();

    protected override void OnInitialized()
    {
        config = ConfigService.GetConfig();
    }

    private void AddEnvironment()
    {
        config.OracleEnvironments.Add(new OracleEnvironment());
    }

    private void RemoveEnvironment(OracleEnvironment env)
    {
        config.OracleEnvironments.Remove(env);
    }

    private async Task SaveConfig()
    {
        try
        {
            // Add validation
            var invalidEnvs = config.OracleEnvironments.Where(e => 
                string.IsNullOrWhiteSpace(e.Name) || 
                string.IsNullOrWhiteSpace(e.ConnectionString) || 
                string.IsNullOrWhiteSpace(e.Schema)).ToList();
                
            if (invalidEnvs.Any())
            {
                toastService.ShowError("All fields are required for each environment");
                return;
            }

            // Check for duplicate names
            if (config.OracleEnvironments.GroupBy(e => e.Name).Any(g => g.Count() > 1))
            {
                toastService.ShowError("Environment names must be unique");
                return;
            }

            await ConfigService.SaveConfigAsync(config);
            toastService.ShowSuccess("Configuration saved successfully");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error saving configuration: {ex.Message}");
        }
    }
}
