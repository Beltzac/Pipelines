@page "/consul"
@using Common.Models
@using Common
@using Common.Services
@using Common.Utils
@using Front2.Services
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.RegularExpressions
@using System.Reactive.Subjects
@using System.Reactive.Linq
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inject IToastService toastService
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject IConsulService ConsulService
@inject IConfigurationService ConfigService
@inject ICommitDataExportService CommitDataExportService
@inject ConsulStateService ConsulStateService
@implements IDisposable

<h3>Consul Key Management</h3>

<div class="options floating-controls">
    <div class="form-group">
        <label for="consulEnvSelect">Select Consul Environment</label>
        <select id="consulEnvSelect" class="form-control" @bind="ConsulStateService.SelectedConsulEnv">
            @foreach (var env in config.ConsulEnvironments)
            {
                <option value="@env.Name">@env.Name</option>
            }
        </select>
    </div>

    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="recursiveToggle" @bind="ConsulStateService.IsRecursive" />
        <label class="form-check-label" for="recursiveToggle">
            Enable Recursive Values
        </label>
    </div>

    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="showInvalidOnlyToggle" @bind="ConsulStateService.ShowInvalidOnly" />
        <label class="form-check-label" for="showInvalidOnlyToggle">
            Show Only Invalid Values
        </label>
    </div>

    <div class="buttons">
        <button class="btn btn-primary" @onclick="async () => await LoadConsul()">Load Consul</button>
        <button class="btn btn-success" @onclick="async () => await SaveConsulToFolder()">Save To Folder</button>
        <button class="btn btn-secondary" @onclick="async () => await OpenFolderInVsCode()">Open Folder in VS Code</button>
    </div>

    <div class="search-container">
        <input type="text" class="form-control" placeholder="Search keys" @bind="ConsulStateService.SearchKey" />
        <input type="text" class="form-control" placeholder="Search values" @bind="ConsulStateService.SearchValue" />
    </div>
</div>

<ul class="key-list">
    @foreach (var kvp in filteredConsulKeyValues)
    {
        <li class="key-item">
            <div class="key-header" @onclick="() => ToggleKeyVisibility(kvp.Key)" style="cursor: pointer;">
                <span>@(kvp.Value.IsValidJson ? "✔️" : "❌")</span>
                <span class="key-name">@kvp.Key</span>
                <button class="btn btn-primary open-consul" @onclick="async (e) => await OpenConsulUrl(kvp.Value.Url)">
                    Open in Consul
                </button>
            </div>
            @if (ConsulStateService.VisibleKeys.Contains(kvp.Key))
            {
                <div class="key-value-container">
                    @if (ConsulStateService.IsRecursive)
                    {
                        <textarea @bind="kvp.Value.ValueRecursive" class="form-control" readonly></textarea>
                    }
                    else
                    {
                        <textarea @bind="kvp.Value.Value" class="form-control"></textarea>
                        <button class="btn btn-secondary save-key" @onclick="() => SaveKeyValueToConsul(kvp.Key, kvp.Value.Value)">
                            Save
                        </button>
                    }
                </div>
            }
        </li>
    }
</ul>

<style>
    .floating-controls {
        position: sticky;
        top: 0;
        background-color: #fff;
        z-index: 1000;
        padding: 1rem 2rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        gap: 1.5rem;
    }

    .form-group {
        flex: 1 1 200px;
        min-width: 150px;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .buttons {
        display: flex;
        gap: 0.75rem;
    }

    .search-container {
        display: flex;
        gap: 0.75rem;
    }

    .options {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .floating-controls {
        position: sticky;
        top: 0;
        background-color: #fff;
        z-index: 1000;
        padding: 1rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .key-list {
        list-style-type: none;
        padding-left: 0;
    }

    .key-item {
        border: 1px solid #ddd;
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 5px;
    }

    .key-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .key-name {
        font-weight: bold;
        text-align: left;
    }

    .key-value-container {
        margin-top: 1rem;
    }

    textarea {
        width: 100%;
        height: 150px;
        white-space: pre;
        overflow-x: auto;
        margin-bottom: 0.5rem;
    }

    .open-consul {
        margin-left: auto;
    }
</style>

@code {
    private ConfigModel config;

    private IEnumerable<KeyValuePair<string, ConsulKeyValue>> filteredConsulKeyValues =>
        ConsulStateService.ConsulKeyValues.Where(kvp =>
            (
                (string.IsNullOrWhiteSpace(ConsulStateService.SearchKey) && string.IsNullOrWhiteSpace(ConsulStateService.SearchValue)) ||
                (!string.IsNullOrWhiteSpace(ConsulStateService.SearchKey) && kvp.Key.Contains(ConsulStateService.SearchKey, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrWhiteSpace(ConsulStateService.SearchValue) && !ConsulStateService.IsRecursive && kvp.Value.Value.Contains(ConsulStateService.SearchValue, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrWhiteSpace(ConsulStateService.SearchValue) && ConsulStateService.IsRecursive && kvp.Value.ValueRecursive.Contains(ConsulStateService.SearchValue, StringComparison.OrdinalIgnoreCase))
            )
            && (!ConsulStateService.ShowInvalidOnly || !kvp.Value.IsValidJson));

    protected override void OnInitialized()
    {
        ConsulStateService.OnChange += StateHasChanged;
        ConsulStateService.Load();

        config = ConfigService.GetConfig();

        ConsulStateService.InitializeState(x =>
        {
            if (config.ConsulEnvironments.Any())
            {
                ConsulStateService.SelectedConsulEnv = config.ConsulEnvironments.First().Name;
            }
        });
    }

    private async ValueTask LoadConsul()
    {
        try
        {
            var consulEnv = config.ConsulEnvironments.FirstOrDefault(env => env.Name == ConsulStateService.SelectedConsulEnv);
            if (consulEnv == null)
            {
                toastService.ShowError("Please select a Consul environment.");
                return;
            }

            var keyValues = await ConsulService.GetConsulKeyValues(consulEnv);
            ConsulStateService.SetConsulKeyValues(keyValues);
            toastService.ShowSuccess("Consul key-values downloaded successfully!");
        }
        catch (OperationCanceledException)
        {
            // Do nothing
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    private void ToggleKeyVisibility(string key)
    {
        if (ConsulStateService.VisibleKeys.Contains(key))
        {
            ConsulStateService.RemoveVisibleKey(key);
        }
        else
        {
            ConsulStateService.AddVisibleKey(key);
        }
    }

    private async Task SaveConsulToFolder()
    {
        var consulEnv = config.ConsulEnvironments.FirstOrDefault(env => env.Name == ConsulStateService.SelectedConsulEnv);
        if (consulEnv == null)
        {
            toastService.ShowError("Please select a Consul environment.");
            return;
        }

        await ConsulService.DownloadConsulAsync(consulEnv);
        toastService.ShowSuccess("Consul content saved successfully!");
    }

    private async Task SaveKeyValueToConsul(string key, string value)
    {
        if (ConsulStateService.SelectedConsulEnv == null)
        {
            toastService.ShowError("Please select a Consul environment.");
            return;
        }

        try
        {
            var consulEnv = config.ConsulEnvironments.FirstOrDefault(env => env.Name == ConsulStateService.SelectedConsulEnv);
            if (consulEnv == null)
            {
                toastService.ShowError("Please select a valid Consul environment.");
                return;
            }

            await ConsulService.UpdateConsulKeyValue(consulEnv, key, value);
            toastService.ShowSuccess($"Key '{key}' saved successfully!");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Failed to save key '{key}': {ex.Message}");
        }
    }

    private async Task OpenConsulUrl(string url)
    {
        await OpenFolderUtils.OpenUrlAsync(url);
    }

    private async Task OpenFolderInVsCode()
    {
        var consulEnv = config.ConsulEnvironments.FirstOrDefault(env => env.Name == ConsulStateService.SelectedConsulEnv);
        if (consulEnv == null)
        {
            toastService.ShowError("Please select a Consul environment.");
            return;
        }

        await ConsulService.OpenInVsCode(consulEnv);
    }

    public void Dispose()
    {
        ConsulStateService.OnChange -= StateHasChanged;
        ConsulStateService.Save();
    }
}
