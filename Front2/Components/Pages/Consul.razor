@page "/consul"
@using Common.Models
@inject ISignalRClientService SignalRClientService
@using Common
@using Common.Services
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.RegularExpressions
@using System.Reactive.Subjects
@using System.Reactive.Linq
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inject IToastService toastService
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject IConsulService ConsulService
@inject IConfigurationService ConfigService
@inject ICommitDataExportService CommitDataExportService

<h3>Consul Key Management</h3>

<div class="options floating-controls">
    <div class="form-group">
        <label for="consulEnvSelect">Select Consul Environment</label>
        <select id="consulEnvSelect" class="form-control" @bind="selectedConsulEnv">
            @foreach (var env in config.ConsulEnvironments)
            {
                <option value="@env.Name">@env.Name</option>
            }
        </select>
    </div>



    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="recursiveToggle" @bind="isRecursive" />
        <label class="form-check-label" for="recursiveToggle">
            Enable Recursive Values
        </label>
    </div>

    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="showInvalidOnlyToggle" @bind="showInvalidOnly" />
        <label class="form-check-label" for="showInvalidOnlyToggle">
            Show Only Invalid Values
        </label>
    </div>

    <div class="buttons">
        <button class="btn btn-primary" @onclick="async () => await LoadConsul()">Load Consul</button>
        <button class="btn btn-success" @onclick="async () => await SaveConsulToFolder()">Save To Folder</button>
        <button class="btn btn-secondary" @onclick="async () => await OpenFolderInVsCode()">Open Folder in VS Code</button>
    </div>

    <div class="search-container mb-3">
        <input type="text" class="form-control" placeholder="Search keys/values" @oninput="UpdateSearchTerm" />
    </div>
</div>



<ul class="key-list">
    @foreach (var kvp in filteredConsulKeyValues)
    {
        <li class="key-item" @onclick="() => ToggleKeyVisibility(kvp.Key)" style="cursor: pointer;">
            <div class="key-header">
                <span>@(kvp.Value.IsValidJson ? "✔️" : "❌")</span>
                <span class="key-name">@kvp.Key</span>
                <button class="btn btn-primary open-consul" @onclick="(e) => { OpenConsulUrl(kvp.Value.Url); }">
                    Open in Consul
                </button>
            </div>
            @if (visibleKeys.Contains(kvp.Key))
            {
                <div class="key-value-container">
                    @if (isRecursive)
                    {
                        <textarea @bind="kvp.Value.ValueRecursive" class="form-control" readonly></textarea>
                    }
                    else
                    {
                        <textarea @bind="kvp.Value.Value" class="form-control"></textarea>
                        <button class="btn btn-secondary save-key" @onclick="() => SaveKeyValueToConsul(kvp.Key, kvp.Value.Value)">
                            Save
                        </button>
                    }
                </div>
            }
        </li>
    }
</ul>

<style>
    .floating-controls {
        position: sticky;
        top: 0;
        background-color: #fff;
        z-index: 1000;
        padding: 1rem 2rem; /* Increase horizontal padding for better spacing */
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        gap: 1.5rem; /* Adds consistent spacing between elements */
    }

    .form-group {
        flex: 1 1 200px; /* Adjust size based on available space */
        min-width: 150px;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.5rem; /* Spacing between checkbox and label */
    }

    .buttons {
        display: flex;
        gap: 0.75rem;
    }

    .search-container {
        max-width: 300px;
        flex: 1 1 200px;
    }

    .options {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .floating-controls {
        position: sticky;
        top: 0;
        background-color: #fff;
        z-index: 1000;
        padding: 1rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .key-list {
        list-style-type: none;
        padding-left: 0;
    }

    .key-item {
        border: 1px solid #ddd;
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 5px;
    }

    .key-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .key-name {
        font-weight: bold;
        text-align: left;
    }

    .key-value-container {
        margin-top: 1rem;
    }

    textarea {
        width: 100%;
        height: 150px;
        white-space: pre;
        overflow-x: auto;
        margin-bottom: 0.5rem;
    }

    .open-consul {
        margin-left: auto;
    }
</style>

@code {

    private ConfigModel config;
    private string selectedConsulEnv;
    private Dictionary<string, ConsulKeyValue> consulKeyValues = new Dictionary<string, ConsulKeyValue>();
    private List<string> visibleKeys = new List<string>();
    private string searchTerm = string.Empty;

    private bool isRecursive = false;
    private bool showInvalidOnly = false;

    private void UpdateSearchTerm(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
    }

    private IEnumerable<KeyValuePair<string, ConsulKeyValue>> filteredConsulKeyValues =>
        consulKeyValues.Where(kvp => 
            (
                kvp.Key.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || 
                (!isRecursive && kvp.Value.Value.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (isRecursive && kvp.Value.ValueRecursive.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            )
            && (!showInvalidOnly || !kvp.Value.IsValidJson));

    protected override void OnInitialized()
    {
        config = ConfigService.GetConfig();

        if (config.ConsulEnvironments.Any())
        {
            selectedConsulEnv = config.ConsulEnvironments.First().Name;
        }
    }

    private async ValueTask LoadConsul()
    {
        var consulEnv = config.ConsulEnvironments.FirstOrDefault(env => env.Name == selectedConsulEnv);
        if (consulEnv == null)
        {
            toastService.ShowError("Please select a Consul environment.");
            return;
        }

        consulKeyValues = await ConsulService.GetConsulKeyValues(consulEnv);
        toastService.ShowSuccess("Consul key-values downloaded successfully!");
    }

    private void ToggleKeyVisibility(string key)
    {
        if (visibleKeys.Contains(key))
        {
            visibleKeys.Remove(key);
        }
        else
        {
            visibleKeys.Add(key);
        }
    }

    private async Task SaveConsulToFolder()
    {
        var consulEnv = config.ConsulEnvironments.FirstOrDefault(env => env.Name == selectedConsulEnv);
        if (consulEnv == null)
        {
            toastService.ShowError("Please select a Consul environment.");
            return;
        }

        await ConsulService.DownloadConsulAsync(consulEnv);
        toastService.ShowSuccess("Consul content saved successfully!");
    }

    private async Task SaveKeyValueToConsul(string key, string value)
    {
        if (selectedConsulEnv == null)
        {
            toastService.ShowError("Please select a Consul environment.");
            return;
        }

        try
        {
            var consulEnv = config.ConsulEnvironments.FirstOrDefault(env => env.Name == selectedConsulEnv);
            if (consulEnv == null)
            {
                toastService.ShowError("Please select a valid Consul environment.");
                return;
            }

            await ConsulService.UpdateConsulKeyValue(consulEnv, key, value);
            toastService.ShowSuccess($"Key '{key}' saved successfully!");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Failed to save key '{key}': {ex.Message}");
        }
    }

    private void OpenConsulUrl(string url)
    {
        JS.InvokeVoidAsync("open", url, "_blank");
    }

    private async Task OpenFolderInVsCode()
    {
        var consulEnv = config.ConsulEnvironments.FirstOrDefault(env => env.Name == selectedConsulEnv);
        if (consulEnv == null)
        {
            toastService.ShowError("Please select a Consul environment.");
            return;
        }

        await ConsulService.OpenInVsCode(consulEnv);
    }
}
