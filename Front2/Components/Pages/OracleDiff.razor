@page "/oracle-diff"
@inject ISignalRClientService SignalRClientService
@using Common
@using Common.ExternalApis
@using Common.Models
@using Common.Services
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.Text.RegularExpressions
@using System.Reactive.Subjects
@using System.Reactive.Linq
@inject IOracleSchemaService OracleSchemaService
@inject IToastService toastService
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject IConfigurationService ConfigService

<div class="row mb-4">
    <div class="col-md-5">
        <div class="form-group">
            <label>Source Environment:</label>
            <select class="form-control" @bind="selectedSourceEnv">
                @foreach (var env in environments)
                {
                    <option value="@env.Name">@env.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="col-md-5">
        <div class="form-group">
            <label>Target Environment:</label>
            <select class="form-control" @bind="selectedTargetEnv">
                @foreach (var env in environments)
                {
                    <option value="@env.Name">@env.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="col-md-2">
        <button class="btn btn-primary mt-4" @onclick="CompareEnvironments">Compare</button>
    </div>
</div>

<div class="mb-3">
    <div class="row">
        <div class="col">
            <div id="myDiffElement" style="max-width:80VW;"></div>
        </div>
    </div>
</div>

<script>

    window.initializeDiff2Html = function(diffString, sourceEnv, targetEnv) {

        //var hljs = require('highlight.js');

        console.log(diffString);
        var targetElement = document.getElementById('myDiffElement');
        var configuration = {
            drawFileList: true,
            fileListToggle: false,
            fileListStartVisible: false,
            fileContentToggle: false,
            matching: 'lines',
            outputFormat: 'side-by-side',
            synchronisedScroll: true,

            renderNothingWhenEmpty: true,
            rawTemplates: {
                "file-summary-line": `<li class="d2h-file-list-line">
            <span class="d2h-file-name-wrapper">
              {{>fileIcon}}
                  <a href="oracle-diff#{{fileHtmlId}}" class="d2h-file-name">{{fileName}}</a>
              <span class="d2h-file-stats">
                  <span class="d2h-lines-added">{{addedLines}}</span>
                  <span class="d2h-lines-deleted">{{deletedLines}}</span>
              </span>
            </span>
        </li>`,
                "side-by-side-file-diff": `<div id="{{fileHtmlId}}" class="d2h-file-wrapper" data-lang="{{file.language}}">
                    <div class="d2h-file-header">
                      {{{filePath}}}
                    </div>

                    <div class="d2h-files-diff">
                        <div class="d2h-file-side-diff">
                            <div class="d-flex justify-content-end mb-2">
                                        <button class="btn btn-sm btn-outline-primary" onclick="dotNetReference.invokeMethodAsync('ExportViewDDL', '{{file.oldName}}', '${sourceEnv}')">
                                    <i class="bi bi-download"></i> Source
                                </button>
                            </div>
                            <div class="d2h-code-wrapper">
                                <table class="d2h-diff-table">
                                    <tbody class="d2h-diff-tbody">
                                    {{{diffs.left}}}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="d2h-file-side-diff">
                            <div class="d-flex justify-content-end mb-2">
                                    <button class="btn btn-sm btn-outline-primary" onclick="dotNetReference.invokeMethodAsync('ExportViewDDL', '{{file.newName}}', '${targetEnv}')">
                                    <i class="bi bi-download"></i> Target
                                </button>
                            </div>
                            <div class="d2h-code-wrapper">
                                <table class="d2h-diff-table">
                                    <tbody class="d2h-diff-tbody">
                                    {{{diffs.right}}}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>`
            }
        };
        console.log(hljs);
        var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration, hljs);
        diff2htmlUi.draw();

        hljs.configure({ ignoreUnescapedHTML: true })

        document.querySelectorAll('.hljs').forEach((block) => {
            block.classList.remove('plaintext'); // Remove the plaintext class
            block.classList.add('sql'); // Add the SQL language class
            hljs.highlightElement(block); // Highlight the block
        });

        // Add Bootstrap classes to buttons
        document.querySelectorAll('.d2h-file-header button').forEach(button => {
            button.classList.add('btn-sm', 'btn-outline-primary');
        });

        //diff2htmlUi.highlightCode();
    };
</script>



@code {
    private List<OracleEnvironment> environments = new();
    private string selectedSourceEnv;
    private string selectedTargetEnv;
    private Dictionary<string, string> differences;

    protected override async Task OnInitializedAsync()
    {
        var config = ConfigService.GetConfig();
        environments = config.OracleEnvironments;

        if (environments.Any())
        {
            selectedSourceEnv = environments[0].Name;
            selectedTargetEnv = environments.Count > 1 ? environments[1].Name : environments[0].Name;
        }
    }

    [JSInvokable]
    public async Task ExportViewDDL(string viewName, string envName)
    {
        // Remove the .SQL extension that diff2html adds
        viewName = viewName.Replace(".SQL", "");
        try
        {
            var config = ConfigService.GetConfig();
            var env = config.OracleEnvironments.FirstOrDefault(e => e.Name == envName);
            
            if (env == null)
            {
                toastService.ShowError($"Environment {envName} not found");
                return;
            }

            var ddl = await OracleSchemaService.GetViewDefinitionAsync(env.ConnectionString, env.Schema, viewName);
            if (!string.IsNullOrEmpty(ddl))
            {
                var fileName = $"{viewName}_{envName}_{DateTime.Now:yyyyMMdd}.sql".Replace(" ", "_");
                await DownloadFile(fileName, ddl);
                toastService.ShowSuccess($"Downloaded {fileName}");
            }
            else
            {
                toastService.ShowError($"View {viewName} not found in {envName}");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error exporting DDL: {ex.Message}");
        }
    }

    private async Task DownloadFile(string fileName, string fileContent)
    {
        var byteArray = System.Text.Encoding.UTF8.GetBytes(fileContent);
        var base64Content = Convert.ToBase64String(byteArray);
        await JS.InvokeVoidAsync("downloadFile", fileName, base64Content);
    }

    private async Task CompareEnvironments()
    {
        if (string.IsNullOrEmpty(selectedSourceEnv) || string.IsNullOrEmpty(selectedTargetEnv))
        {
            toastService.ShowError("Please select both environments");
            return;
        }

        try 
        {
            differences = OracleSchemaService.Compare(selectedSourceEnv, selectedTargetEnv);
            var diff = String.Join("\r\n", differences.Values);
            // Store environment variables
            await JS.InvokeVoidAsync("initializeDiff2Html", diff, selectedSourceEnv, selectedTargetEnv);
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error comparing environments: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setDotNetReference", DotNetObjectReference.Create(this));
        }

        if (firstRender && environments.Count >= 2)
        {
            await CompareEnvironments();
        }
    }
}
