name: Electronize Build

on:
  push:
    branches:
      - master
    tags:
      - '*'  # Trigger on all tag pushes
  pull_request:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set VERSION variable
        id: set_version
        shell: powershell
        run: |
          if ($env:GITHUB_REF -like 'refs/tags/*') {
              # Extract the tag name by removing 'refs/tags/' prefix
              $VERSION = $env:GITHUB_REF.Substring(10)
          } else {
              # Use the short commit SHA (first 7 characters)
              $VERSION = $env:GITHUB_SHA.Substring(0,7)
          }
          
          # Set environment variable
          Add-Content -Path $env:GITHUB_ENV -Value "VERSION=$VERSION"
          
          # Set output variable
          Add-Content -Path $env:GITHUB_OUTPUT -Value "version=$VERSION"

      - name: Update Version in electron.manifest.json
        shell: powershell
        run: |
          $jsonPath = 'Front2/electron.manifest.json'
          $json = Get-Content $jsonPath | ConvertFrom-Json
          $json.build.buildVersion = $env:VERSION
          $json | ConvertTo-Json -Depth 100 | Out-File $jsonPath -Encoding utf8
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add $jsonPath
          git commit -m "Update buildVersion to $env:VERSION"

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'
          cache: true
          cache-dependency-path: '**/packages.lock.json'

      - name: Install ElectronNET.CLI
        run: dotnet tool install ElectronNET.CLI --global

      - name: Restore dependencies
        run: dotnet restore Front2

      - name: Test
        run: dotnet test --verbosity minimal

      - name: Build with Electronize
        run: |
          cd Front2
          electronize build /target win

      - name: Generate Release Notes
        id: generate_release_notes
        uses: actions/github-script@v6
        if: startsWith(github.ref, 'refs/tags/')
        with:
          script: |
            const { data: releaseNotes } = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
            });
            core.setOutput('release_notes', releaseNotes.body);

      - name: Create or Update a Release
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.generate_release_notes.outputs.release_notes }}
          artifacts: Front2/bin/Desktop/*.exe
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          prerelease: false
