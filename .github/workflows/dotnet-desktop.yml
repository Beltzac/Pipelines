name: Windows Installer Build

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          persist-credentials: true

      - name: Set VERSION variable
        id: set_version
        shell: pwsh
        run: |
          if ($env:GITHUB_REF -like 'refs/tags/*') {
            $VERSION = $env:GITHUB_REF.Substring(10)
          } else {
            try {
              $latestTag = git describe --tags --abbrev=0
              if (-not $latestTag) {
                throw "No tags found."
              }
              $latestTag = $latestTag.Trim()
              $baseVersion = $latestTag.TrimStart('v')
            } catch {
              $baseVersion = "0.1.0"
            }
            $commitId = $env:GITHUB_SHA.Substring(0,7)
            $VERSION = "$baseVersion-beta.$commitId"
          }
          Write-Host "Computed VERSION: $VERSION"
          Add-Content -Path $env:GITHUB_ENV -Value "VERSION=$VERSION"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "version=$VERSION"

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'
          cache: true
          cache-dependency-path: '**/packages.lock.json'

      - name: Restore dependencies
        run: dotnet restore TugboatCaptainsPlayground

      - name: Test
        run: dotnet test --verbosity minimal

      - name: Publish to Release Folder
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Define a dedicated folder for publish output
          $publishFolder = "$env:GITHUB_WORKSPACE\release"
          if (-Not (Test-Path -Path $publishFolder)) {
            New-Item -ItemType Directory -Force -Path $publishFolder | Out-Null
          }
          # Publish the project output to the release folder
          dotnet publish TugboatCaptainsPlayground/TugboatCaptainsPlayground.csproj -c Release -o $publishFolder

      - name: Create zip artifact
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          $appName = "TugboatCaptainsPlayground"
          $version = $env:VERSION
          $zipName = "$appName-v$version.zip"
          $publishFolder = "$env:GITHUB_WORKSPACE\release"
          # Compress all contents of the release folder into a zip file in the workspace root
          Compress-Archive -Path "$publishFolder\*" -DestinationPath "$env:GITHUB_WORKSPACE\$zipName"

      - name: Generate Release Notes
        id: generate_release_notes
        uses: actions/github-script@v6
        if: startsWith(github.ref, 'refs/tags/')
        with:
          script: |
            const { data: releaseNotes } = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
            });
            core.setOutput('release_notes', releaseNotes.body);

      - name: Create or Update a Release
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.generate_release_notes.outputs.release_notes }}
          artifacts: ${{ github.workspace }}/*.zip
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          prerelease: false
