name: Electronize Build

on:
  push:
    branches:
      - master
    tags:
      - '*'  # Trigger on all tag pushes
  pull_request:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set VERSION variable
        id: set_version
        shell: powershell
        run: |
          if ($env:GITHUB_REF.StartsWith('refs/tags/')) {
            $VERSION = $env:GITHUB_REF -replace 'refs/tags/', ''
          } else {
            $VERSION = $env:GITHUB_RUN_NUMBER
          }
          echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Update Version in electron.manifest.json
        uses: maxgfr/github-change-json@main
        with:
          path: 'Front2/electron.manifest.json'
          key: 'build.buildVersion'
          value: '${{ steps.set_version.outputs.version }}'
          commit: true

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'
          cache: true
          cache-dependency-path: '**/packages.lock.json'

      - name: Install ElectronNET.CLI
        run: dotnet tool install ElectronNET.CLI --global

      - name: Restore dependencies
        run: dotnet restore Front2

      - name: Test
        run: dotnet test --verbosity minimal

      - name: Build with Electronize
        run: |
          cd Front2
          electronize build /target win

      - name: Generate Release Notes
        id: generate_release_notes
        uses: actions/github-script@v6
        if: startsWith(github.ref, 'refs/tags/')
        with:
          script: |
            const { data: releaseNotes } = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
            });
            core.setOutput('release_notes', releaseNotes.body);

      - name: Create or Update a Release
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.generate_release_notes.outputs.release_notes }}
          artifacts: Front2/bin/Desktop/*.exe
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          prerelease: false
