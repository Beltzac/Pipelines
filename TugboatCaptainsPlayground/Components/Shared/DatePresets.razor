@using System.Globalization
<div class="d-flex flex-wrap gap-2">
    <button class="btn btn-sm btn-outline-secondary flex-grow-1" @onclick="@(() => SetDateRange("last6"))">Últimas 6h</button>
    <button class="btn btn-sm btn-outline-secondary flex-grow-1" @onclick="@(() => SetDateRange("today"))">Hoje</button>
    <button class="btn btn-sm btn-outline-secondary flex-grow-1" @onclick="@(() => SetDateRange("yesterday"))">Ontem</button>
    <button class="btn btn-sm btn-outline-secondary flex-grow-1" @onclick="@(() => SetDateRange("last24"))">Últimas 24h</button>
    <button class="btn btn-sm btn-outline-secondary flex-grow-1" @onclick="@(() => SetDateRange("week"))">Últimos 7 dias</button>
    <button class="btn btn-sm btn-outline-secondary flex-grow-1" @onclick="@(() => SetDateRange("month"))">Últimos 30 dias</button>
</div>

@code {
    [Parameter]
    public EventCallback<(DateTime? StartDate, DateTime? EndDate)> OnDateRangeSelected { get; set; }

    private async Task SetDateRange(string preset)
    {
        var now = DateTime.Now;
        var endDate = now.Date.AddDays(1).AddTicks(-1);
        var startDate = preset switch
        {
            "last6" => now.AddHours(-6),
            "today" => now.Date,
            "yesterday" => now.Date.AddDays(-1),
            "last24" => now.AddHours(-24),
            "week" => now.Date.AddDays(-7),
            "month" => now.Date.AddDays(-30),
            _ => now.Date
        };

        await OnDateRangeSelected.InvokeAsync((startDate, endDate));
    }
}
