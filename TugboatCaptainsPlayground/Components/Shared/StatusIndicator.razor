@using Microsoft.AspNetCore.Components

@code {
    [Parameter]
    public Status CurrentStatus { get; set; }

    [Parameter]
    public EventCallback<Status> OnStatusClick { get; set; }

    public enum Status
    {
        Working,
        Error,
        Success,
        Unknown,
        None
    }

    private string GetStatusText(Status status) => status switch
    {
        Status.Working => "Em Execução",
        Status.Error => "Erro",
        Status.Success => "Sucesso",
        Status.Unknown => "Desconhecido",
        Status.None => "Inativo",
        _ => status.ToString()
    };

    private string GetSvgIcon(Status status)
    {
        return status switch
        {
            Status.Working => @"<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'>\
  <circle cx='12' cy='12' r='10' fill='dodgerblue'/>\
  <path fill='white' transform='translate(12,12) scale(0.75) translate(-12,-12)' d='M19.14,12.94c0.04,-0.3 0.06,-0.61 0.06,-0.94c0,-0.33 -0.02,-0.64 -0.06,-0.94l2.03,-1.58c0.18,-0.14 0.23,-0.41 0.12,-0.61l-1.92,-3.32c-0.11,-0.2 -0.35,-0.28 -0.56,-0.22l-2.39,0.96c-0.5,-0.38 -1.05,-0.7 -1.66,-0.94L14.5,2.81c-0.04,-0.23 -0.24,-0.4 -0.48,-0.4h-3.04c-0.24,0 -0.44,0.17 -0.48,0.4l-0.36,2.49c-0.61,0.24 -1.16,0.56 -1.66,0.94L5.65,5.22c-0.21,-0.09 -0.45,0.02 -0.56,0.22l-1.92,3.32c-0.11,0.2 -0.06,0.47 0.12,0.61l2.03,1.58c-0.04,0.3 -0.06,0.61 -0.06,0.94c0,0.33 0.02,0.64 0.06,0.94L3.3,14.52c-0.18,0.14 -0.23,0.41 -0.12,0.61l1.92,3.32c0.11,0.2 0.35,0.28 0.56,0.22l2.39,-0.96c0.5,0.38 1.05,0.7 1.66,0.94l0.36,2.49c0.04,0.23 0.24,0.4 0.48,0.4h3.04c0.24,0 0.44,-0.17 0.48,-0.4l0.36,-2.49c0.61,-0.24 1.16,-0.56 1.66,-0.94l2.39,0.96c0.21,0.09 0.45,-0.02 0.56,-0.22l1.92,-3.32c0.11,-0.2 0.06,-0.47 -0.12,-0.61l-2.03,-1.58ZM12,15.5c-1.93,0 -3.5,-1.57 -3.5,-3.5c0,-1.93 1.57,-3.5 3.5,-3.5c1.93,0 3.5,1.57 3.5,3.5c0,1.93 -1.57,3.5 -3.5,3.5Z'/>\
</svg>",
            Status.Error => "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'><path d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z' fill='red' /></svg>",
            Status.Success => "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'><path d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z' fill='green' /></svg>",
            _ => @"<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'>\
  <circle cx='12' cy='12' r='10' fill='gray'/>\
  <rect x='7' y='11' width='10' height='2' fill='white'/>\
</svg>"
        };
    }
}

<div class="status-indicator @(CurrentStatus.ToString().ToLower())" @onclick="() => OnStatusClick.InvokeAsync(CurrentStatus)">
    @((MarkupString)GetSvgIcon(CurrentStatus))
    <div class="indicator-text">@GetStatusText(CurrentStatus)</div>
</div>

<style>
    .status-indicator {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        position: relative;
        text-transform: uppercase;
        color: #333;
        font-size: 0.8rem;
        text-align: center;
        transition: all 0.3s ease, box-shadow 0.3s ease;  /* Added box-shadow transition for visual improvement */
        cursor: pointer;
        height: 100%;
        margin: 0 auto;
    }

    .status-indicator svg {
        width: 30px;
        height: 30px;
        transition: transform 0.3s ease;
    }

    .status-indicator:hover svg {
        transform: scale(1.3);
    }

    .working .status-indicator svg {
        animation: pulse 1s infinite;
    }

    .error .status-indicator svg {
        animation: shake 0.5s infinite;
    }

    .success .status-indicator svg {
        animation: fadeIn 1s;
    }

    .unknown .status-indicator svg {
        animation: spin 2s infinite linear;
    }

    .none .status-indicator svg {
        opacity: 0.5;
    }

    .indicator-text {
        display: none;
        position: absolute;
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(0, 0, 0, 0.75);
        padding: 5px 10px;
        border-radius: 5px;
        white-space: nowrap;
        color: #fff;
        z-index: 1;
        font-size: 0.7rem;
    }

    .status-indicator:hover .indicator-text {
        display: block;
    }

    @@keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
    }

    @@keyframes shake {
        0% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        50% { transform: translateX(5px); }
        75% { transform: translateX(-5px); }
        100% { transform: translateX(0); }
    }

    .status-indicator svg {
        fill: currentColor;  /* Ensure SVG colors are inherited */
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }

    @@media (max-width: 768px) {
        .status-indicator {
            font-size: 0.6rem;
            height: 80%;
        }

        .status-indicator svg {
            width: 20px;
            height: 20px;
        }
    }
</style>
