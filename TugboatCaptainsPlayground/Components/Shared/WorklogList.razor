@using Common.Models
@using Common.Services.Interfaces
@inject IWorklogService WorklogService
@inject IConfigurationService ConfigService
@inject IJSRuntime JS
@inject ToastService toastService
@inject ILogger<WorklogList> Logger

@if (Worklogs != null && Worklogs.Any())
{
    Logger.LogInformation("WorklogList: Displaying {WorklogCount} worklogs", Worklogs.Count);
    <div class="list-group list-group-flush">
    @foreach (var worklog in Worklogs.OrderBy(w => w.StartDate))
    {
        <div class="list-group-item list-group-item-action bg-light border-start border-success border-3 mb-2">
            <div class="d-flex justify-content-between align-items-start">
                <div class="flex-grow-1">
                    <div class="d-flex align-items-center mb-1">
                        <i class="fas fa-clock text-success me-2"></i>
                        <strong class="text-success">@worklog.Issue.Key</strong>
                        <span class="badge bg-success ms-2">
                            @(worklog.TimeSpentSeconds / 3600)h @((worklog.TimeSpentSeconds % 3600) / 60)m
                        </span>
                    </div>
                    <div class="text-muted small mb-1">
                        <i class="fas fa-calendar-alt me-1"></i>
                        @worklog.StartDate.ToString("dd/MM/yyyy HH:mm")
                    </div>
                    <div class="text-muted small">
                        @worklog.Description
                    </div>
                </div>
                <div class="ms-2">
                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteSingleWorklog(worklog)" title="Deletar worklog">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        </div>
    }
    </div>
}
else if (IsLoading)
{
    Logger.LogInformation("WorklogList: Loading state - showing spinner");
    <div class="d-flex justify-content-center align-items-center py-3">
        <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <span class="text-muted">Carregando worklogs...</span>
    </div>
}
else
{
    Logger.LogInformation("WorklogList: No worklogs found - showing empty state");
    <div class="alert alert-info mt-2">
        <i class="fas fa-info-circle me-2"></i>
        Nenhum worklog encontrado para esta data
    </div>
}

@code {
    [Parameter]
    public List<TempoWorklog> Worklogs { get; set; } = new List<TempoWorklog>();

    [Parameter]
    public bool IsLoading { get; set; }

    private async Task DeleteSingleWorklog(TempoWorklog worklog)
    {
        if (worklog == null) return;

        var confirmed = await JS.InvokeAsync<bool>("confirm",
            $"Tem certeza que deseja deletar o worklog para {worklog.Issue.Key} ({worklog.StartDate:dd/MM/yyyy HH:mm})?");

        if (!confirmed) return;

        try
        {
            await WorklogService.DeleteWorklogAsync(worklog.Id);
            toastService.ShowSuccess($"Worklog deletado com sucesso");

            // Refresh the parent component
            await OnWorklogDeleted.InvokeAsync();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Erro ao deletar worklog: {ex.Message}");
        }
    }

    [Parameter]
    public EventCallback OnWorklogDeleted { get; set; }
}
