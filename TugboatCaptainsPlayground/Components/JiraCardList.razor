@using Common.Models
@using Common.Services.Interfaces
@inject IJSRuntime JS
@inject ToastService toastService
@inject ILogger<JiraCardList> Logger

<div class="list-group list-group-flush">
@foreach (var commit in Commits.OrderByDescending(c => c.CommitDate))
{
    <div class="list-group-item">
        <div class="d-flex justify-content-between align-items-start">
            <div class="flex-grow-1">
                <div class="d-flex align-items-center mb-1">
                    <strong class="text-primary">@commit.ProjectName</strong>
                    <span class="text-muted mx-1">•</span>
                    <span class="text-muted">@commit.RepoName</span>
                    <span class="text-muted mx-1">•</span>
                    <span class="badge bg-light text-dark">@commit.BranchName</span>
                </div>
                <div class="text-muted small mb-1">
                    <i class="fas fa-clock me-1"></i>
                    @commit.CommitDate.ToString("dd/MM/yyyy HH:mm:ss")
                    <span class="mx-1">by</span>
                    <strong>@commit.AuthorName</strong>
                </div>
                <div class="commit-message">
                    @((MarkupString)commit.ToHtml(ConfigService.GetConfig()))
                </div>
            </div>
            <div class="ms-3 d-flex gap-1 align-items-center">
                @if (!string.IsNullOrEmpty(commit.JiraCardID))
                {
                    <span class="badge bg-secondary clickable-badge" @onclick="() => CopyToClipboard(commit.JiraCardID)" title="Copiar JIRA card">
                        @commit.JiraCardID
                    </span>
                    <button class="btn btn-sm btn-outline-primary" @onclick="() => SendSingleWorklogToTempo(commit)" title="Enviar worklog (1h)">
                        <i class="fas fa-clock"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-success" @onclick="() => SendGMWorklogToTempo(commit)" title="Enviar worklog GM (2h)">
                        <i class="fas fa-tools"></i>
                    </button>
                }
            </div>
        </div>
    </div>
}
</div>

@code {
    [Parameter]
    public List<Commit> Commits { get; set; } = new List<Commit>();

    [Parameter]
    public IConfigurationService ConfigService { get; set; }

    [Parameter]
    public IWorklogService WorklogService { get; set; }

    [Parameter]
    public EventCallback OnWorklogCreated { get; set; }

    private async Task CopyToClipboard(string jiraCardID)
    {
        Logger.LogInformation("CopyToClipboard called with JIRA card: {JiraCardID}", jiraCardID);
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", jiraCardID);
        toastService.ShowSuccess($"Copiado {jiraCardID} para a área de transferência!");
    }

    private async Task SendSingleWorklogToTempo(Commit commit)
    {
        Logger.LogInformation("SendSingleWorklogToTempo called for commit: {CommitId} - {JiraCardID}", commit?.Id, commit?.JiraCardID);

        if (commit == null || string.IsNullOrEmpty(commit.JiraCardID))
        {
            toastService.ShowWarning("No JIRA card found for this commit");
            return;
        }

        try
        {
            var result = await WorklogService.CreateWorklogFromCommitAsync(commit);

            if (result.Success)
            {
                toastService.ShowSuccess($"Worklog created for {commit.JiraCardID}");
                await OnWorklogCreated.InvokeAsync();
            }
            else
            {
                toastService.ShowError($"Failed to create worklog: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error sending worklog: {Message}", ex.Message);
            toastService.ShowError($"Error sending worklog: {ex.Message}");
        }
    }

    private async Task SendGMWorklogToTempo(Commit commit)
    {
        Logger.LogInformation("SendGMWorklogToTempo called for commit: {CommitId} - {JiraCardID}", commit?.Id, commit?.JiraCardID);

        if (commit == null || string.IsNullOrEmpty(commit.JiraCardID))
        {
            toastService.ShowWarning("No JIRA card found for this commit");
            return;
        }

        try
        {
            var result = await WorklogService.CreateWorklogFromCommitAsync(commit, 120);

            if (result.Success)
            {
                toastService.ShowSuccess($"GM worklog (2h) created for {commit.JiraCardID}");
                await OnWorklogCreated.InvokeAsync();
            }
            else
            {
                toastService.ShowError($"Failed to create GM worklog: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error sending GM worklog: {Message}", ex.Message);
            toastService.ShowError($"Error sending GM worklog: {ex.Message}");
        }
    }
}
