@page "/consul"
@using System.Reactive.Linq
@using System.Reactive.Subjects
@using System.Text.RegularExpressions
@using Common
@using Common.Models
@using Common.Services
@using Common.Services.Interfaces
@using Common.Utils
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using TugboatCaptainsPlayground.Services
@inject ToastService toastService
@inject IJSRuntime JS
@inject IConsulService ConsulService
@inject IConfigurationService ConfigService
@inject ICommitExportService CommitDataExportService
@inject ConsulStateService ConsulStateService
@implements IDisposable

<CustomProgressBar ProgressValue="@ConsulStateService.ProgressValue" Label="@ConsulStateService.ProgressLabel" IsLoading="@ConsulStateService.IsLoading" />

<StickyFilter>
   <div class="row g-3 align-items-end">
       <div class="col-md-6 col-lg-3">
           <label for="consulEnvSelect" class="form-label">Selecionar Ambiente Consul</label>
           <select id="consulEnvSelect" class="form-select" @bind="ConsulStateService.SelectedConsulEnv">
               @foreach (var env in config.ConsulEnvironments)
               {
                   <option value="@env.Name">@env.Name</option>
               }
           </select>
       </div>

       <div class="col-md-6 col-lg-3">
           <div class="form-check mb-2">
               <input class="form-check-input" type="checkbox" id="recursiveToggle" @bind="ConsulStateService.IsRecursive" />
               <label class="form-check-label" for="recursiveToggle">
                   Habilitar Valores Recursivos
               </label>
           </div>
           <div class="form-check">
               <input class="form-check-input" type="checkbox" id="showInvalidOnlyToggle" @bind="ConsulStateService.ShowInvalidOnly" />
               <label class="form-check-label" for="showInvalidOnlyToggle">
                   Mostrar Apenas Valores Inválidos
               </label>
           </div>
       </div>

       <div class="col-md-12 col-lg-6">
           <div class="d-flex flex-wrap gap-2">
               <button class="btn btn-primary text-nowrap" @onclick="async () => await LoadConsul()">Carregar Consul</button>
               <button class="btn btn-success text-nowrap" @onclick="async () => await SaveConsulToFolder()">Salvar na Pasta</button>
               <button class="btn btn-secondary text-nowrap" @onclick="async () => await OpenFolderInVsCode()">Abrir Pasta no VS Code</button>
           </div>
       </div>
   </div>

   <div class="row g-3 mt-2">
       <div class="col-md-6">
           <input type="text" class="form-control" placeholder="Pesquisar chaves" @bind="ConsulStateService.SearchKey" />
       </div>
       <div class="col-md-6">
           <input type="text" class="form-control" placeholder="Pesquisar valores" @bind="ConsulStateService.SearchValue" />
       </div>
   </div>
</StickyFilter>

<ul class="key-list">
    @foreach (var kvp in filteredConsulKeyValues)
    {
        <li class="key-item">
            <div class="key-header" @onclick="() => ToggleKeyVisibility(kvp.Key)" style="cursor: pointer;">
                <span>@(kvp.Value.IsValidJson ? "✔️" : "❌")</span>
                <span class="key-name">@kvp.Key.GetHighlightedText(ConsulStateService.SearchKey);</span>
                <CopyButton FetchText="@(() => kvp.Key)"/>
                <button class="btn btn-primary open-consul" @onclick="async (e) => await OpenConsulUrl(kvp.Value.Url)" @onclick:stopPropagation>
                    Abrir no Consul
                </button>
            </div>

            @if (ConsulStateService.VisibleKeys.Contains(kvp.Key))
            {
                <div class="key-value-container">
                    @if (ConsulStateService.IsRecursive)
                    {
                        <textarea @bind="kvp.Value.ValueRecursive" class="form-control" readonly></textarea>
                    }
                    else
                    {
                        <textarea @bind="kvp.Value.Value" class="form-control"></textarea>
                        <button class="btn btn-secondary save-key" @onclick="() => SaveKeyValueToConsul(kvp.Key, kvp.Value.Value)">
                            Salvar
                        </button>
                    }
                </div>
            }
        </li>
    }
</ul>

<style>
    .floating-controls {
    position: sticky;
    top: 0;
    background-color: #fff;
    z-index: 1000;
    padding: 1rem 2rem;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 1.5rem;
    }

    .form-group {
    flex: 1 1 200px;
    min-width: 150px;
    }

    .form-check {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    }

    .buttons {
    display: flex;
    gap: 0.75rem;
    }

    .search-container {
    display: flex;
    gap: 0.75rem;
    }

    .options {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    }

    .floating-controls {
    position: sticky;
    top: 0;
    background-color: #fff;
    z-index: 1000;
    padding: 1rem;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .key-list {
    list-style-type: none;
    padding-left: 0;
    }

    .key-item {
    border: 1px solid #ddd;
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: 5px;
    }

    .key-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    }

    .key-name {
    font-weight: bold;
    text-align: left;
    }

    .key-value-container {
    margin-top: 1rem;
    }

    textarea {
    width: 100%;
    height: 150px;
    white-space: pre;
    overflow-x: auto;
    margin-bottom: 0.5rem;
    }

    .open-consul {
    margin-left: auto;
    }
</style>

@code {
    private ConfigModel config;

    private IEnumerable<KeyValuePair<string, ConsulKeyValue>> filteredConsulKeyValues =>
        ConsulStateService.ConsulKeyValues.Where(kvp =>
            (
                (string.IsNullOrWhiteSpace(ConsulStateService.SearchKey) && string.IsNullOrWhiteSpace(ConsulStateService.SearchValue)) ||
                (!string.IsNullOrWhiteSpace(ConsulStateService.SearchKey) && kvp.Key.Contains(ConsulStateService.SearchKey, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrWhiteSpace(ConsulStateService.SearchValue) && !ConsulStateService.IsRecursive && kvp.Value.Value.Contains(ConsulStateService.SearchValue, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrWhiteSpace(ConsulStateService.SearchValue) && ConsulStateService.IsRecursive && kvp.Value.ValueRecursive.Contains(ConsulStateService.SearchValue, StringComparison.OrdinalIgnoreCase))
            )
            && (!ConsulStateService.ShowInvalidOnly || !kvp.Value.IsValidJson));

    protected override void OnInitialized()
    {
        ConsulStateService.OnChange += () => InvokeAsync(StateHasChanged);
        ConsulStateService.Load();

        config = ConfigService.GetConfig();

        ConsulStateService.InitializeState(x =>
        {
            if (config.ConsulEnvironments.Any())
            {
                ConsulStateService.SelectedConsulEnv = config.ConsulEnvironments.First().Name;
            }
        });
    }

    private async ValueTask LoadConsul()
    {
        try
        {
            var consulEnv = config.ConsulEnvironments.FirstOrDefault(env => env.Name == ConsulStateService.SelectedConsulEnv);
            if (consulEnv == null)
            {
                toastService.ShowError("Por favor, selecione um ambiente Consul.");
                return;
            }

            ConsulStateService.ProgressValue = 0;
            ConsulStateService.IsLoading = true;

            ConsulStateService.ProgressValue = 25;
            ConsulStateService.ProgressLabel = $"Conectando ao ambiente {ConsulStateService.SelectedConsulEnv}...";

            var keyValues = await ConsulService.GetConsulKeyValues(consulEnv);

            ConsulStateService.ProgressValue = 75;
            ConsulStateService.ProgressLabel = "Processando pares chave-valor...";
            ConsulStateService.SetConsulKeyValues(keyValues);

            ConsulStateService.ProgressValue = 100;
            ConsulStateService.ProgressLabel = "Concluído";
        }
        catch (OperationCanceledException)
        {
            ConsulStateService.ProgressValue = 0;
            // Do nothing
        }
        catch (Exception ex)
        {
            ConsulStateService.ProgressValue = 0;
            toastService.ShowError(ex.Message);
        }
        finally
        {
            ConsulStateService.IsLoading = false;
        }
    }

    private void ToggleKeyVisibility(string key)
    {
        if (ConsulStateService.VisibleKeys.Contains(key))
        {
            ConsulStateService.RemoveVisibleKey(key);
        }
        else
        {
            ConsulStateService.AddVisibleKey(key);
        }
    }

    private async Task SaveConsulToFolder()
    {
        var consulEnv = config.ConsulEnvironments.FirstOrDefault(env => env.Name == ConsulStateService.SelectedConsulEnv);
        if (consulEnv == null)
        {
            toastService.ShowError("Por favor, selecione um ambiente Consul.");
            return;
        }

        try
        {

            ConsulStateService.ProgressValue = 0;
            ConsulStateService.IsLoading = true;

            ConsulStateService.ProgressValue = 25;
            ConsulStateService.ProgressLabel = $"Preparando para salvar o ambiente {ConsulStateService.SelectedConsulEnv}...";

            await ConsulService.DownloadConsulAsync(consulEnv);

            ConsulStateService.ProgressValue = 100;
            ConsulStateService.ProgressLabel = "Concluído";
        }
        catch (Exception ex)
        {
            ConsulStateService.ProgressValue = 0;
            toastService.ShowError($"Falha ao salvar conteúdo do Consul: {ex.Message}");
        }
        finally
        {
            ConsulStateService.IsLoading = false;
        }
    }

    private async Task SaveKeyValueToConsul(string key, string value)
    {
        if (ConsulStateService.SelectedConsulEnv == null)
        {
            toastService.ShowError("Por favor, selecione um ambiente Consul.");
            return;
        }

        try
        {
            var consulEnv = config.ConsulEnvironments.FirstOrDefault(env => env.Name == ConsulStateService.SelectedConsulEnv);
            if (consulEnv == null)
            {
                toastService.ShowError("Por favor, selecione um ambiente Consul válido.");
                return;
            }

            await ConsulService.UpdateConsulKeyValue(consulEnv, key, value);
            toastService.ShowSuccess($"Chave '{key}' salva com sucesso!");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Falha ao salvar chave '{key}': {ex.Message}");
        }
    }

    private async Task OpenConsulUrl(string url)
    {
        OpenFolderUtils.OpenUrl(url);
    }

    private async Task OpenFolderInVsCode()
    {
        var consulEnv = config.ConsulEnvironments.FirstOrDefault(env => env.Name == ConsulStateService.SelectedConsulEnv);
        if (consulEnv == null)
        {
            toastService.ShowError("Por favor, selecione um ambiente Consul.");
            return;
        }

        try
        {
            ConsulStateService.IsLoading = true;
            ConsulStateService.ProgressValue = null;

            await ConsulService.OpenInVsCode(consulEnv);
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Falha ao abrir pasta / salvar conteúdo do Consul: {ex.Message}");
        }
        finally
        {
            ConsulStateService.IsLoading = false;
        }

    }

    public void Dispose()
    {
        ConsulStateService.OnChange -= () => InvokeAsync(StateHasChanged);
        ConsulStateService.Save();
    }
}
