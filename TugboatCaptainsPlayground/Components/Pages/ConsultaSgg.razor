@page "/consulta-sgg"
@using System.Globalization
@using BlazorDateRangePicker
@using Common.Models
@using Common.Services
@using Common.Services.Interfaces
@using Common.Utils
@inject ISggService LtdbService
@inject IConfigurationService ConfigService
@inject IJSRuntime JSRuntime
@inject IToastService toastService
@inject ConsultaSggStateService ConsultaSggStateService
@implements IDisposable

<StickyFilter>
    <div class="row g-3">
        <div class="col-md-3">
            <label class="form-label">Ambiente</label>
            <select class="form-select" @bind="ConsultaSggStateService.SelectedEnvironment">
                @foreach (var env in config.OracleEnvironments)
                {
                    <option value="@env.Name">@env.Name</option>
                }
            </select>
        </div>

        <div class="col-md-6">
            <label class="form-label">Período</label>
            <div class="d-flex gap-2 mb-2">
                <DatePresets OnDateRangeSelected="HandleDateRangeSelected" />
            </div>
            <DateRangePicker
                Culture="@CultureInfo.GetCultureInfo("pt-BR")"
                TimePicker="true"
                TimePicker24Hour="true"
                TimePickerSeconds="true"
                AutoApply="true"
                DateFormat="@($"dd/MM/yyyy HH:mm:ss")"
                @bind-StartDate="ConsultaSggStateService.StartDate"
                @bind-EndDate="ConsultaSggStateService.EndDate"
                class="form-control" />
        </div>

        <div class="col-md-3">
            <label class="form-label">Placa</label>
            <input type="text" class="form-control" @bind="ConsultaSggStateService.Placa" placeholder="Search by plate number">
        </div>

        <div class="col-md-3">
            <label class="form-label">ID de Requisição</label>
            <input type="text" class="form-control" @bind="ConsultaSggStateService.RequestId">
        </div>

        <div class="col-md-3">
            <label class="form-label">LTDB/LTVC</label>
            <input type="text" class="form-control" @bind="ConsultaSggStateService.GenericText" placeholder="Aceita Regex">
        </div>

        <div class="col-md-3">
            <label class="form-label">ID de Agendamento</label>
            <input type="number" class="form-control" @bind="ConsultaSggStateService.IdAgendamento">
        </div>

        <div class="col-md-6">
            <div class="row">
                <div class="col-md-6">
                    <label class="form-label">Tipo de Movimento</label>
                    <select class="form-select" @bind="ConsultaSggStateService.MoveType">
                        <option value="">Todos</option>
                        <option value="ENTRY">ENTRADA</option>
                        <option value="EXIT">SAÍDA</option>
                    </select>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Status</label>
                    <select class="form-select" @bind="ConsultaSggStateService.Status">
                        <option value="">Todos</option>
                        <option value="OK">OK</option>
                        <option value="Error">Erro</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <label class="form-label">Atraso Mínimo (segundos)</label>
            <input type="number" class="form-control" @bind="ConsultaSggStateService.MinDelay" step="0.1" min="0">
        </div>

        <div class="col-md-6">
            @if (ConsultaSggStateService.IsLoading)
            {
                <button class="btn btn-secondary" @onclick="CancelSearch">Cancelar</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="async () => { ConsultaSggStateService.CurrentPage = 1; await ExecuteQuery(false); }">Buscar</button>
                <button class="btn btn-secondary" @onclick="async () => await ClearFilters()">Limpar</button>
                <button class="btn btn-info" @onclick="ExportSqlQuery">Exportar SQL</button>
            }
        </div>
    </div>
</StickyFilter>

<ProgressBar IsLoading="@ConsultaSggStateService.IsLoading" Label="Carregando..." />

<div class="card mb-3">
    <div class="card-header">
        <h5 class="mb-0">Análise de Tempo de Resposta</h5>
    </div>
    <div class="card-body">
        <canvas id="delayChart" width="400" height="100" style='width:100%;height:100px'></canvas>
    </div>
</div>

@if (ConsultaSggStateService.Results != null)
{
    <div class="mt-4">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th class="align-middle">Data LTDB</th>
                    <th class="align-middle">Data LTVC</th>
                    <th class="align-middle">ID de Requisição</th>
                    <th class="align-middle">Agendamento</th>
                    <th class="align-middle">Código Barras</th>
                    <th class="align-middle">Tipo de Movimento</th>
                    <th class="align-middle">Placa</th>
                    <th class="align-middle">Status</th>
                    <th class="align-middle">Containers</th>
                    <th class="align-middle">Atraso</th>
                    <th class="align-middle">Ações</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in ConsultaSggStateService.Results)
                {
                    <tr>
                        <td class="align-middle">@(item.DataLtdb?.ToString("yyyy-MM-dd HH:mm:ss"))</td>
                        <td class="align-middle">@(item.DataLtvc?.ToString("yyyy-MM-dd HH:mm:ss"))</td>
                        <td class="align-middle"><span class="badge bg-info" style="cursor: pointer;" @onclick="() => ToggleRequestIdFilter(item.RequestId)">@item.RequestId</span></td>
                        <td class="align-middle"><span class="badge bg-warning text-dark" style="cursor: pointer;" @onclick="() => ToggleSchedulingFilter(item.IdAgendamento)">@item.IdAgendamento</span></td>
                        <td class="align-middle"><span class="badge bg-light text-dark" style="cursor: pointer;" @onclick="() => ToggleBarcodeFilter(item.CodigoBarras)">@item.CodigoBarras</span></td>
                        <td class="align-middle"><span class="badge bg-secondary" style="cursor: pointer;" @onclick="() => ToggleMoveTypeFilter(item.MoveType)">@item.MoveType</span></td>
                        <td class="align-middle"><span class="badge bg-primary" style="cursor: pointer;" @onclick="() => TogglePlateFilter(item.Placa)">@item.Placa</span></td>
                            <td class="align-middle"><span class="badge @(item.Status == "OK" ? "bg-success" : "bg-danger")" style="cursor: pointer;" @onclick="() => ToggleStatusFilter(item.Status)">
                                @item.Status
                            </span>
                         </td>
                        <td class="align-middle"><span class="badge bg-dark" style="cursor: pointer;" @onclick="() => ToggleContainerFilter(item.ContainerNumbers)">@item.ContainerNumbers</span></td>
                        <td class="align-middle">@(item.Delay?.ToString("F3"))</td>
                        <td class="align-middle">
                            <button class="btn btn-sm btn-info" @onclick="() => ShowDetails(item)">
                                Detalhes
                            </button>
                         </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<Pagination State="@ConsultaSggStateService" OnPageChange="@(async (page) => { ConsultaSggStateService.CurrentPage = page; await ExecuteQuery(true); })" />

@if (ConsultaSggStateService.SelectedItem != null)
{
    <div class="modal fade show" style="display: block" tabindex="-1" @onclick="CloseModal">
        <div class="modal-dialog modal-xl">
            <div class="modal-content" @onclick:stopPropagation>
                <div class="modal-header">
                    <h5 class="modal-title">Detalhes LTDB/LTVC</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="card h-100">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">XML LTDB</h6>
                                        <button class="btn btn-outline-secondary btn-sm" @onclick="() => CopyToClipboard(ConsultaSggStateService.FormattedLtdbXml)">
                                            <i class="bi bi-clipboard"></i> Copiar
                                        </button>
                                    </div>
                                    <div class="card-body p-0">
                                        <pre class="m-0 p-3" style="max-height: 400px; overflow-y: auto;">@ConsultaSggStateService.FormattedLtdbXml</pre>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="card h-100">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">XML LTVC</h6>
                                        <button class="btn btn-outline-secondary btn-sm" @onclick="() => CopyToClipboard(ConsultaSggStateService.FormattedLtvcXml)">
                                            <i class="bi bi-clipboard"></i> Copiar
                                        </button>
                                    </div>
                                    <div class="card-body p-0">
                                        <pre class="m-0 p-3" style="max-height: 400px; overflow-y: auto;">@ConsultaSggStateService.FormattedLtvcXml</pre>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private ConfigModel config;

    private void ToggleRequestIdFilter(string requestId)
    {
        ConsultaSggStateService.RequestId = ConsultaSggStateService.RequestId == requestId ? null : requestId;
        ExecuteQuery(false);
    }

    private void ToggleMoveTypeFilter(string moveType)
    {
        ConsultaSggStateService.MoveType = ConsultaSggStateService.MoveType == moveType ? null : moveType;
        ExecuteQuery(false);
    }

    private void TogglePlateFilter(string plate)
    {
        ConsultaSggStateService.Placa = ConsultaSggStateService.Placa == plate ? null : plate;
        ExecuteQuery(false);
    }

    private void ToggleStatusFilter(string status)
    {
        ConsultaSggStateService.Status = ConsultaSggStateService.Status == status ? null : status;
        ExecuteQuery(false);
    }

    private void ToggleSchedulingFilter(long? schedulingId)
    {
        ConsultaSggStateService.IdAgendamento = ConsultaSggStateService.IdAgendamento == schedulingId ? null : schedulingId;
        ExecuteQuery(false);
    }

    private void ToggleBarcodeFilter(string barcode)
    {
        ConsultaSggStateService.CodigoBarras = ConsultaSggStateService.CodigoBarras == barcode ? null : barcode;
        ExecuteQuery(false);
    }

    private void ToggleContainerFilter(string containerNumbers)
    {
        // Assuming GenericText is used for container filtering
        ConsultaSggStateService.GenericText = ConsultaSggStateService.GenericText == containerNumbers ? null : containerNumbers;
        ExecuteQuery(false);
    }
    private CancellationTokenSource cts;
    private bool chartInitialized;

    protected override void OnInitialized()
    {
        ConsultaSggStateService.OnChange += () => InvokeAsync(StateHasChanged);
        ConsultaSggStateService.Load();
    }

    public void Dispose()
    {
        ConsultaSggStateService.OnChange -= () => InvokeAsync(StateHasChanged);
        ConsultaSggStateService.Save();
    }

    protected override async Task OnInitializedAsync()
    {
        config = ConfigService.GetConfig();

        ConsultaSggStateService.InitializeState(x =>
        {
            x.SelectedEnvironment = config.OracleEnvironments.FirstOrDefault()?.Name;
            x.EndDate = DateTime.Now.Date.AddDays(1).AddTicks(-1);
            x.StartDate = x.EndDate?.AddHours(-24).AddTicks(1);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateChart();
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("addKeyboardShortcuts", objRef);
        }
    }

    private DotNetObjectReference<ConsultaSgg>? objRef;
    public async ValueTask DisposeAsync()
    {
        if (objRef != null)
        {
            objRef.Dispose();
        }

        if (chartInitialized)
        {
            await JSRuntime.InvokeVoidAsync("eval", "if(window.delayChart) window.delayChart.destroy();");
        }
    }

    [JSInvokable]
    public async Task HandleKeyPress(string key)
    {
        if (key == "Enter")
        {
            await ExecuteQuery(false);
        }
        else if (key == "Escape")
        {
            await ClearFilters();
        }

        StateHasChanged();
    }

    private async Task HandleDateRangeSelected((DateTime? StartDate, DateTime? EndDate) range)
    {
        ConsultaSggStateService.StartDate = range.StartDate;
        ConsultaSggStateService.EndDate = range.EndDate;
        await ExecuteQuery(false);
    }

    private async Task ClearFilters()
    {
        ConsultaSggStateService.RequestId = null;  // Added to clear ID de Requisição filter
        ConsultaSggStateService.CodigoBarras = null;  // Added to clear CODIGO_BARRAS filter
        ConsultaSggStateService.GenericText = null;
        ConsultaSggStateService.Placa = null;
        ConsultaSggStateService.MoveType = null;
        ConsultaSggStateService.IdAgendamento = null;
        ConsultaSggStateService.Status = null;
        ConsultaSggStateService.MinDelay = null;
        ConsultaSggStateService.EndDate = DateTime.Now.Date.AddDays(1).AddTicks(-1);
        ConsultaSggStateService.StartDate = ConsultaSggStateService.EndDate?.AddHours(-24);
        ConsultaSggStateService.CurrentPage = 1;

        await ExecuteQuery(false);
    }

    private async Task ExecuteQuery(bool paginate)
    {
        try
        {
            cts?.Cancel();
            cts = new CancellationTokenSource();

            var oracleEnv = config.OracleEnvironments.FirstOrDefault(env => env.Name == ConsultaSggStateService.SelectedEnvironment);
            if (oracleEnv == null)
            {
                toastService.ShowError("Por favor, selecione um ambiente Oracle.");
                return;
            }

            ConsultaSggStateService.ProgressValue = 0;
            ConsultaSggStateService.IsLoading = true;

            StateHasChanged();

            var filter = new SggQueryFilter
            {
                Environment = oracleEnv.ConnectionString,
                StartDate = ConsultaSggStateService.StartDate,
                EndDate = ConsultaSggStateService.EndDate,
                GenericText = ConsultaSggStateService.GenericText,
                Placa = ConsultaSggStateService.Placa,
                RequestId = ConsultaSggStateService.RequestId, // Added RequestId
                MoveType = ConsultaSggStateService.MoveType,
                IdAgendamento = ConsultaSggStateService.IdAgendamento,
                Status = ConsultaSggStateService.Status,
                MinDelay = ConsultaSggStateService.MinDelay,
                CodigoBarras = ConsultaSggStateService.CodigoBarras,
                PageSize = ConsultaSggStateService.PageSize,
                PageNumber = ConsultaSggStateService.CurrentPage
            };

            var queryTask = LtdbService.ExecuteQueryAsync(filter, cts.Token);

            var delayTask = Task.FromResult(new List<DelayMetric>());
            if (!paginate)
            {
                delayTask = LtdbService.GetDelayMetricsAsync(filter, cts.Token);
            }

            await Task.WhenAll(queryTask, delayTask);

            var (queryResults, total) = await queryTask;
            if (!paginate)
            {
                ConsultaSggStateService.DelayData = await delayTask;
                await UpdateChart();
            }

            ConsultaSggStateService.Results = queryResults;
            ConsultaSggStateService.TotalCount = total;
        }
        catch (OperationCanceledException)
        {
            // Do nothing
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            ConsultaSggStateService.IsLoading = false;
        }
    }

    private async Task UpdateChart()
    {
        if (ConsultaSggStateService.DelayData == null) return;

        var labels = ConsultaSggStateService.DelayData.Select(d => d.Timestamp).ToArray();
        var dataAvg = ConsultaSggStateService.DelayData.Select(d => d.AvgDelaySeconds).ToArray();
        var dataMax = ConsultaSggStateService.DelayData.Select(d => d.MaxDelaySeconds).ToArray();
        var dataCount = ConsultaSggStateService.DelayData.Select(d => d.RequestCount).ToArray();

        var chartData = new
        {
            type = "line",
            data = new
            {
                labels = labels,
                datasets = new object[]
                {
                    new
                    {
                        label = "Tempo Médio de Resposta (segundos)",
                        data = dataAvg,
                        borderColor = "rgb(75, 192, 192)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                    },
                    new
                    {
                        label = "Tempo Máximo de Resposta (segundos)",
                        data = dataMax,
                        borderColor = "rgb(235, 64, 52)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                    },
                    new
                    {
                        label = "Contagem de Requisições",
                        data = dataCount,
                        borderColor = "rgb(153, 102, 255)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                        yAxisID = "y1"
                    }
                }
            },
            options = new
            {
                responsive = true,
                scales = new
                {
                    y = new
                    {
                        beginAtZero = true,
                        title = new
                        {
                            display = true,
                            text = "Segundos"
                        }
                    },
                    y1 = new
                    {
                        type = "linear",
                        display = true,
                        position = "right",
                        beginAtZero = true,
                        title = new
                        {
                            display = true,
                            text = "Contagem"
                        },
                        grid = new
                        {
                            drawOnChartArea = false
                        }
                    },
                    x = new
                    {
                        title = new
                        {
                            display = true,
                            text = "Tempo"
                        }
                    }
                }
            }
        };

        if (!chartInitialized)
        {
            var chartConfig = System.Text.Json.JsonSerializer.Serialize(chartData);
            await JSRuntime.InvokeVoidAsync("eval", $@"
                var ctx = document.getElementById('delayChart').getContext('2d');
                window.delayChart = new Chart(ctx, {chartConfig});
            ");
            chartInitialized = true;
        }
        else
        {
            var newLabels = System.Text.Json.JsonSerializer.Serialize(labels);
            var newDataAvg = System.Text.Json.JsonSerializer.Serialize(dataAvg);
            var newDataMax = System.Text.Json.JsonSerializer.Serialize(dataMax);
            var newDataCount = System.Text.Json.JsonSerializer.Serialize(dataCount);
            await JSRuntime.InvokeVoidAsync("eval", $@"
                window.delayChart.data.labels = {newLabels};
                window.delayChart.data.datasets[0].data = {newDataAvg};
                window.delayChart.data.datasets[1].data = {newDataMax};
                window.delayChart.data.datasets[2].data = {newDataCount};
                window.delayChart.update();
            ");
        }
    }

    private void ShowDetails(LtdbLtvcRecord item)
    {
        ConsultaSggStateService.SelectedItem = item;
        ConsultaSggStateService.FormattedLtdbXml = DataFormatUtils.FormatXml(item.LtdbXml);
        ConsultaSggStateService.FormattedLtvcXml = DataFormatUtils.FormatXml(item.LtvcXml);
    }

    private async Task ExportSqlQuery()
    {
        var oracleEnv = config.OracleEnvironments.FirstOrDefault(env => env.Name == ConsultaSggStateService.SelectedEnvironment);
        if (oracleEnv == null)
        {
            toastService.ShowError("Por favor, selecione um ambiente Oracle.");
            return;
        }

        var filter = new SggQueryFilter
        {
            Environment = oracleEnv.ConnectionString,
            StartDate = ConsultaSggStateService.StartDate,
            EndDate = ConsultaSggStateService.EndDate,
            GenericText = ConsultaSggStateService.GenericText,
            Placa = ConsultaSggStateService.Placa,
            RequestId = ConsultaSggStateService.RequestId, // Added RequestId
            MoveType = ConsultaSggStateService.MoveType,
            IdAgendamento = ConsultaSggStateService.IdAgendamento,
            Status = ConsultaSggStateService.Status,
            MinDelay = ConsultaSggStateService.MinDelay,
            CodigoBarras = ConsultaSggStateService.CodigoBarras,
            PageSize = ConsultaSggStateService.PageSize,
            PageNumber = ConsultaSggStateService.CurrentPage
        };

        var sqlQuery = LtdbService.BuildQuery(filter);
        await CopyToClipboard(sqlQuery);
        toastService.ShowSuccess("Consulta copiada para área de transferência");
    }

    private void CloseModal()
    {
        ConsultaSggStateService.SelectedItem = null;
    }

    private void CancelSearch()
    {
        cts?.Cancel();
        ConsultaSggStateService.IsLoading = false;
    }

    private async Task CopyToClipboard(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
    }
}
