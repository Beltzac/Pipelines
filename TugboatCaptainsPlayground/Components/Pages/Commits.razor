@page "/commits"
@using System.Reactive.Linq
@using System.Reactive.Subjects
@using System.Text.RegularExpressions
@using Common
@using Common.Models
@using Common.Services
@using Common.Services.Interfaces
@using Common.Utils
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@inject ToastService toastService
@inject IJSRuntime JS
@inject IConsulService ConsulService
@inject ICommitExportService CommitDataExportService
@inject IConfigurationService ConfigService
@inject CommitsStateService CommitsStateService
@inject IWorklogService WorklogService

<StickyFilter>
    <div class="d-flex flex-column gap-2">
        <div class="row g-2 align-items-center">
            <div class="col-auto">
                @if (CommitsStateService.IsLoading)
                {
                    <button class="btn btn-danger text-nowrap" @onclick="async () => await CancelSyncCommits()">Cancelar Sincronização</button>
                }
                else
                {
                    <button class="btn btn-info text-nowrap" @onclick="async () => await SyncCommits()">Sincronizar Commits</button>
                }
            </div>
            <div class="col-auto">
                <button class="btn btn-secondary text-nowrap" @onclick="async () => await DownloadCommits()">Baixar para Excel</button>
            </div>
            <div class="col-auto">
                <button class="btn btn-outline-primary text-nowrap" @onclick="async () => await RefreshWorklogs()" disabled="@isLoadingWorklogs" title="Atualizar worklogs">
                    @if (isLoadingWorklogs)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-1">Atualizando...</span>
                    }
                    else
                    {
                        <i class="fas fa-sync-alt"></i>
                        <span class="ms-1">Worklogs</span>
                    }
                </button>
            </div>
            <div class="col-auto">
                <button class="btn btn-success text-nowrap" @onclick="async () => await SendWorklogsToTempo()" disabled="@(!commitsWithJira.Any() || isSendingWorklogs || isLoadingWorklogs)">
                    @if (isSendingWorklogs)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-1">Enviando...</span>
                    }
                    else
                    {
                        <span>Enviar Worklogs (@commitsWithJira.Count)</span>
                    }
                </button>
            </div>
            <div class="col-auto">
                <button class="btn btn-warning text-nowrap" @onclick="async () => await SendDailyWorklogsToTempo()" disabled="@(!commitsWithJira.Any() || isSendingWorklogs)" title="Distribui 8 horas de trabalho entre todos os commits de cada dia">
                    @if (isSendingWorklogs)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-1">Enviando...</span>
                    }
                    else
                    {
                        <span>8h Diária</span>
                    }
                </button>
            </div>
            <div class="col">
                <DatePresets OnDateRangeSelected="HandleDateRangeSelected" />
            </div>
        </div>
    </div>
</StickyFilter>

<CustomProgressBar IsLoading="@CommitsStateService.IsLoading" ProgressValue="@CommitsStateService.ProgressValue" TextColor="black" Height="25px" Label="Buscando commits..." />

@if (isLoadingWorklogs)
{
    <div class="alert alert-info d-flex align-items-center mt-2" role="alert">
        <div class="spinner-border spinner-border-sm me-2" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div>
            <strong>Atualizando worklogs...</strong>
            <div class="progress mt-1" style="height: 5px;">
                <div class="progress-bar" role="progressbar" style="width: @worklogLoadingProgress%" aria-valuenow="@worklogLoadingProgress" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(worklogLoadingError))
{
    <div class="alert alert-danger d-flex align-items-center mt-2" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>
        <div>
            <strong>Erro ao carregar worklogs:</strong> @worklogLoadingError
        </div>
    </div>
}

@if (commitDataList != null && commitDataList.Any())
{
    var groupedCommits = commitDataList
        .GroupBy(c => c.CommitDate.Date)
        .OrderByDescending(g => g.Key);

    @foreach (var dayGroup in groupedCommits)
    {
        var dayWorklogs = worklogsByDate.ContainsKey(dayGroup.Key) ? worklogsByDate[dayGroup.Key] : new List<TempoWorklog>();
        <div class="card mt-3">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0">@dayGroup.Key.ToString("dddd, MMMM dd, yyyy")</h5>
                <div class="d-flex align-items-center gap-2">
                    @{
                        var dayWorklogCount = dayWorklogs.Count;
                        if (dayWorklogCount > 0)
                        {
                            <span class="badge bg-success" title="@dayWorklogCount worklog(s) encontrado(s)">
                                <i class="fas fa-check-circle"></i> @dayWorklogCount
                            </span>
                        }
                        else if (isLoadingWorklogs)
                        {
                            <span class="badge bg-info">
                                <span class="spinner-border spinner-border-sm" role="status"></span>
                            </span>
                        }

                        var dayCommitsWithJira = dayGroup.Where(c => !string.IsNullOrEmpty(c.JiraCardID)).ToList();
                        if (dayCommitsWithJira.Any())
                        {
                            <button class="btn btn-sm btn-warning" @onclick="() => SendDailyWorklogsForDate(dayGroup.Key)"
                                    title="Distribuir 8h entre @dayCommitsWithJira.Count commits deste dia">
                                <i class="fas fa-clock"></i> 8h
                            </button>
                        }
                    }
                </div>
            </div>
            <ul class="list-group list-group-flush">
                @* Display Worklogs first *@
                @if (dayWorklogs.Any())
                {
                    @foreach (var worklog in dayWorklogs.OrderBy(w => w.StartDate))
                    {
                        <li class="list-group-item bg-light border-start border-success border-3">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <strong class="text-success">
                                        <i class="fas fa-clock text-success me-1"></i>
                                        Worklog: @worklog.Issue.Key
                                    </strong>
                                    <br />
                                    <small class="text-muted">
                                        <i class="fas fa-calendar-alt me-1"></i>
                                        @worklog.StartDate.ToString("HH:mm") -
                                        <span class="badge bg-secondary">@(worklog.TimeSpentSeconds / 3600)h @((worklog.TimeSpentSeconds % 3600) / 60)m</span>
                                    </small>
                                    <br />
                                    <span class="text-muted small">@worklog.Description</span>
                                </div>
                                <div>
                                    <span class="badge bg-success">
                                        <i class="fas fa-check me-1"></i>
                                        @(worklog.TimeSpentSeconds / 3600)h @((worklog.TimeSpentSeconds % 3600) / 60)m
                                    </span>
                                </div>
                            </div>
                        </li>
                    }
                }
                else if (isLoadingWorklogs)
                {
                    <li class="list-group-item bg-light">
                        <div class="d-flex justify-content-center align-items-center py-2">
                            <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <span class="text-muted">Carregando worklogs...</span>
                        </div>
                    </li>
                }

                @* Display Commits *@
                @foreach (var commit in dayGroup.OrderByDescending(c => c.CommitDate))
                {
                    <li class="list-group-item">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <strong>@commit.ProjectName</strong> - @commit.RepoName - @commit.BranchName
                                <br />
                                <small class="text-muted">@commit.CommitDate.ToString("HH:mm:ss")</small> by <strong>@commit.AuthorName</strong>
                                <br />
                                @((MarkupString)commit.ToHtml(ConfigService.GetConfig()))
                            </div>
                            <div class="d-flex gap-2 align-items-center">
                                @if (!string.IsNullOrEmpty(commit.JiraCardID))
                                {
                                    <span class="badge bg-secondary clickable-badge" @onclick="() => CopyToClipboard(commit.JiraCardID)"> @commit.JiraCardID </span>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => SendSingleWorklogToTempo(commit)" title="Enviar worklog para Tempo">
                                        <i class="fas fa-clock"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </li>
                }
            </ul>
        </div>
    }
}
else
{
    <p>Nenhum commit buscado ainda.</p>
}

@if (worklogResults.Any())
{
    <div class="card mt-4">
        <div class="card-header bg-info text-white">
            <h5 class="mb-0">
                <i class="fas fa-list-check me-2"></i>
                Worklog Results
                @{
                    var successCount = worklogResults.Count(r => r.Success);
                    var failCount = worklogResults.Count(r => !r.Success);
                }
                <span class="badge bg-light text-dark ms-2">@successCount ✓ @failCount ✗</span>
            </h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="alert alert-success py-2">
                        <i class="fas fa-check-circle me-2"></i>
                        <strong>@successCount</strong> worklogs criados com sucesso
                    </div>
                </div>
                <div class="col-md-6">
                    @if (failCount > 0)
                    {
                        <div class="alert alert-danger py-2">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>@failCount</strong> falharam
                        </div>
                    }
                </div>
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var result in worklogResults)
                {
                    <li class="list-group-item @(result.Success ? "border-start border-success border-3" : "border-start border-danger border-3")">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <strong>@result.Commit?.JiraCardID</strong>
                                <small class="text-muted">- @result.Commit?.RepoName</small>
                                <br />
                                <small class="text-muted">@result.Commit?.CommitMessage?.Split('\n')[0]</small>
                            </div>
                            <div>
                                @if (result.Success)
                                {
                                    <span class="badge bg-success">
                                        <i class="fas fa-check me-1"></i> Criado
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-danger" title="@result.Error">
                                        <i class="fas fa-times me-1"></i> Falhou
                                    </span>
                                }
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(result.Message))
                        {
                            <div class="mt-1">
                                <small class="text-muted fst-italic">@result.Message</small>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(result.Error) && !result.Success)
                        {
                            <div class="mt-1">
                                <small class="text-danger fst-italic">@result.Error</small>
                            </div>
                        }
                    </li>
                }
            </ul>
        </div>
    </div>
}

@code {
    private List<Commit> commitDataList = new List<Commit>();
    private List<WorklogCreationResult> worklogResults = new List<WorklogCreationResult>();
    private List<TempoWorklog> existingWorklogs = new List<TempoWorklog>();
    private bool isSendingWorklogs = false;
    private bool isLoadingWorklogs = false;
    private string worklogLoadingError = null;
    private int worklogLoadingProgress = 0;

    private List<Commit> commitsWithJira => commitDataList.Where(c => !string.IsNullOrEmpty(c.JiraCardID)).ToList();

    private Dictionary<DateTime, List<TempoWorklog>> worklogsByDate => existingWorklogs
        .GroupBy(w => w.StartDate.Date)
        .OrderByDescending(g => g.Key)
        .ToDictionary(g => g.Key, g => g.ToList());

    protected override async Task OnInitializedAsync()
    {
        await FetchCommits();
        await FetchExistingWorklogs();
    }

    private async Task HandleDateRangeSelected((DateTime? StartDate, DateTime? EndDate) args)
    {
        if (args.StartDate != null && args.EndDate != null)
        {
            CommitsStateService.DataInicial = args.StartDate.Value;
            await FetchCommits();
        }
    }

    private async Task FetchCommits()
    {
        var config = ConfigService.GetConfig();
        commitDataList = await CommitDataExportService.GetRecentCommitsAsync(config.Username, CommitsStateService.DataInicial);
        await FetchExistingWorklogs();
    }

    private async Task FetchExistingWorklogs()
    {
        if (!commitDataList.Any())
        {
            existingWorklogs = new List<TempoWorklog>();
            return;
        }

        isLoadingWorklogs = true;
        worklogLoadingError = null;
        worklogLoadingProgress = 0;

        try
        {
            var startDate = CommitsStateService.DataInicial ?? DateTime.Now.AddDays(-7);
            var endDate = DateTime.Now.Date;

            // Get all unique dates from commits
            var uniqueDates = commitDataList
                .Select(c => c.CommitDate.Date)
                .Distinct()
                .OrderBy(d => d)
                .ToList();

            // Add any additional dates in the range
            for (var date = startDate; date <= endDate; date = date.AddDays(1))
            {
                if (!uniqueDates.Contains(date))
                {
                    uniqueDates.Add(date);
                }
            }

            var allWorklogs = new List<TempoWorklog>();
            var config = ConfigService.GetConfig();
            var accountId = config.TempoConfig?.AccountId;
            var totalDates = uniqueDates.Count;
            var processedDates = 0;

            if (!string.IsNullOrEmpty(accountId))
            {
                foreach (var date in uniqueDates)
                {
                    try
                    {
                        var dayWorklogs = await WorklogService.GetWorklogsByUserAsync(accountId, date.Date, date.Date.AddDays(1).AddTicks(-1));
                        allWorklogs.AddRange(dayWorklogs);

                        processedDates++;
                        worklogLoadingProgress = (int)((double)processedDates / totalDates * 100);
                        StateHasChanged();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error fetching worklogs for {date:yyyy-MM-dd}: {ex.Message}");
                        processedDates++;
                        worklogLoadingProgress = (int)((double)processedDates / totalDates * 100);
                        StateHasChanged();
                    }
                }
            }
            else
            {
                // Fallback to original method if account ID is not configured
                foreach (var date in uniqueDates)
                {
                    try
                    {
                        var dayWorklogs = await WorklogService.GetExistingWorklogsForDateRangeAsync(date, date);
                        allWorklogs.AddRange(dayWorklogs);

                        processedDates++;
                        worklogLoadingProgress = (int)((double)processedDates / totalDates * 100);
                        StateHasChanged();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error fetching worklogs for {date:yyyy-MM-dd}: {ex.Message}");
                        processedDates++;
                        worklogLoadingProgress = (int)((double)processedDates / totalDates * 100);
                        StateHasChanged();
                    }
                }
            }

            existingWorklogs = allWorklogs;
            worklogLoadingProgress = 100;
        }
        catch (Exception ex)
        {
            worklogLoadingError = ex.Message;
            toastService.ShowError($"Error fetching worklogs: {ex.Message}");
            existingWorklogs = new List<TempoWorklog>();
        }
        finally
        {
            isLoadingWorklogs = false;
            worklogLoadingProgress = 0;
            StateHasChanged();
        }
    }

    private CancellationTokenSource cts = new CancellationTokenSource();

    private async Task SyncCommits()
    {
        CommitsStateService.IsLoading = true;
        try
        {
            cts = new CancellationTokenSource();
            var progressHandler = new Progress<int>(value =>
            {
                CommitsStateService.ProgressValue = value;
                StateHasChanged();
            });

            await CommitDataExportService.FetchCommitDataAsync(progressHandler, CommitsStateService.DataInicial, cts.Token);
            toastService.ShowSuccess("Commits sincronizados com sucesso!");

            // Refresh worklogs after commits are updated
            await FetchExistingWorklogs();
        }
        catch (OperationCanceledException)
        {
            toastService.ShowWarning("Sincronização cancelada pelo usuário.");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            CommitsStateService.IsLoading = false;
        }
    }

    private async Task CancelSyncCommits()
    {
        cts.Cancel();
        await Task.Yield();
        cts.Dispose();
    }

    private async Task DownloadCommits()
    {
        await CommitDataExportService.ExportCommitDataAsync();
    }

    private async Task CopyToClipboard(string jiraCardID)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", jiraCardID);
        toastService.ShowSuccess($"Copiado {jiraCardID} para a área de transferência!");
    }

    private async Task SendWorklogsToTempo()
    {
        if (!commitsWithJira.Any())
        {
            toastService.ShowWarning("No commits with JIRA cards found");
            return;
        }

        isSendingWorklogs = true;
        try
        {
            worklogResults = await WorklogService.CreateWorklogsFromCommitsAsync(commitsWithJira);

            var successful = worklogResults.Count(r => r.Success);
            var failed = worklogResults.Count(r => !r.Success);

            if (successful > 0)
            {
                toastService.ShowSuccess($"Successfully created {successful} worklogs");
            }

            if (failed > 0)
            {
                toastService.ShowWarning($"Failed to create {failed} worklogs");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error sending worklogs: {ex.Message}");
        }
        finally
        {
            isSendingWorklogs = false;
        }
    }

    private async Task SendSingleWorklogToTempo(Commit commit)
    {
        if (commit == null || string.IsNullOrEmpty(commit.JiraCardID))
        {
            toastService.ShowWarning("No JIRA card found for this commit");
            return;
        }

        try
        {
            var result = await WorklogService.CreateWorklogFromCommitAsync(commit);

            if (result.Success)
            {
                toastService.ShowSuccess($"Worklog created for {commit.JiraCardID}");
            }
            else
            {
                toastService.ShowError($"Failed to create worklog: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error sending worklog: {ex.Message}");
        }
    }

    private async Task SendDailyWorklogsToTempo()
    {
        if (!commitsWithJira.Any())
        {
            toastService.ShowWarning("No commits with JIRA cards found");
            return;
        }

        // Confirm with user before proceeding
        var confirmed = await JS.InvokeAsync<bool>("confirm",
            "This will distribute 8 hours evenly between all commits for each day. Continue?");

        if (!confirmed)
        {
            return;
        }

        isSendingWorklogs = true;
        try
        {
            var groupedByDay = commitsWithJira
                .GroupBy(c => c.CommitDate.Date)
                .OrderByDescending(g => g.Key)
                .ToList();

            var allResults = new List<WorklogCreationResult>();

            foreach (var dayGroup in groupedByDay)
            {
                var commitsForDay = dayGroup.ToList();
                var totalCommits = commitsForDay.Count;

                if (totalCommits == 0) continue;

                // Split 8 hours (480 minutes) evenly between all commits for the day
                var timePerCommit = 480 / totalCommits;

                // Create worklogs for each commit in the day
                foreach (var commit in commitsForDay)
                {
                    var result = await WorklogService.CreateWorklogFromCommitAsync(commit, timePerCommit);
                    allResults.Add(result);
                }
            }

            worklogResults = allResults;

            var successful = allResults.Count(r => r.Success);
            var failed = allResults.Count(r => !r.Success);

            if (successful > 0)
            {
                toastService.ShowSuccess($"Successfully created {successful} worklogs with distributed 8h daily time");
            }

            if (failed > 0)
            {
                toastService.ShowWarning($"Failed to create {failed} worklogs");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error sending daily worklogs: {ex.Message}");
        }
        finally
        {
            isSendingWorklogs = false;
        }
    }

    private async Task SendDailyWorklogsForDate(DateTime date)
    {
        var commitsForDate = commitsWithJira.Where(c => c.CommitDate.Date == date.Date).ToList();

        if (!commitsForDate.Any())
        {
            toastService.ShowWarning("No commits with JIRA cards found for this date");
            return;
        }

        // Confirm with user before proceeding
        var confirmed = await JS.InvokeAsync<bool>("confirm",
            $"This will distribute 8 hours evenly between {commitsForDate.Count} commits for {date:dd/MM/yyyy}. Continue?");

        if (!confirmed)
        {
            return;
        }

        isSendingWorklogs = true;
        try
        {
            var totalCommits = commitsForDate.Count;
            var timePerCommit = 480 / totalCommits;

            var results = new List<WorklogCreationResult>();

            foreach (var commit in commitsForDate)
            {
                var result = await WorklogService.CreateWorklogFromCommitAsync(commit, timePerCommit);
                results.Add(result);
            }

            worklogResults = results;

            var successful = results.Count(r => r.Success);
            var failed = results.Count(r => !r.Success);

            if (successful > 0)
            {
                toastService.ShowSuccess($"Successfully created {successful} worklogs for {date:dd/MM/yyyy}");
            }

            if (failed > 0)
            {
                toastService.ShowWarning($"Failed to create {failed} worklogs");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error sending worklogs for {date:dd/MM/yyyy}: {ex.Message}");
        }
        finally
        {
            isSendingWorklogs = false;
        }
    }

    private async Task RefreshWorklogs()
    {
        if (isLoadingWorklogs) return;

        isLoadingWorklogs = true;
        try
        {
            await FetchExistingWorklogs();
            toastService.ShowSuccess("Worklogs atualizados com sucesso!");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Erro ao atualizar worklogs: {ex.Message}");
        }
        finally
        {
            isLoadingWorklogs = false;
        }
    }
}

<style>
    .progress {
        position: relative;
    }

    .progress-text {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        color: black;
        font-weight: bold;
    }

    .clickable-badge {
        cursor: pointer;
    }
</style>
