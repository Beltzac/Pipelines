@page "/commits"
@using System.Reactive.Linq
@using System.Reactive.Subjects
@using System.Text.RegularExpressions
@using Common
@using Common.Models
@using Common.Services
@using Common.Services.Interfaces
@using Common.Utils
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@inject ToastService toastService
@inject IJSRuntime JS
@inject IConsulService ConsulService
@inject ICommitExportService CommitDataExportService
@inject IConfigurationService ConfigService
@inject CommitsStateService CommitsStateService
@inject IWorklogService WorklogService
@inject IRepositoryService RepositoryService
@inject ILogger<Commits> Logger

<StickyFilter>
    <div class="d-flex flex-column gap-2">
        <div class="row g-2 align-items-center">
            <div class="col-auto">
                @if (CommitsStateService.IsLoading)
                {
                    <button class="btn btn-danger text-nowrap" @onclick="async () => await CancelSyncCommits()">Cancelar Sincronização</button>
                }
                else
                {
                    <button class="btn btn-info text-nowrap" @onclick="async () => await SyncCommits()">Sincronizar Commits</button>
                }
            </div>
            <div class="col-auto">
                <button class="btn btn-secondary text-nowrap" @onclick="async () => await DownloadCommits()">Baixar para Excel</button>
            </div>
            <div class="col-auto">
                <button class="btn btn-outline-primary text-nowrap" @onclick="async () => await RefreshWorklogs()" disabled="@isLoadingWorklogs" title="Atualizar worklogs">
                    @if (isLoadingWorklogs)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-1">Atualizando...</span>
                    }
                    else
                    {
                        <i class="fas fa-sync-alt"></i>
                        <span class="ms-1">Worklogs</span>
                    }
                </button>
            </div>
            <div class="col-auto">
                <button class="btn btn-success text-nowrap" @onclick="async () => await SendWorklogsToTempo()" disabled="@(!commitsWithJira.Any() || isSendingWorklogs || isLoadingWorklogs)">
                    @if (isSendingWorklogs)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-1">Enviando...</span>
                    }
                    else
                    {
                        <span>Enviar Worklogs (@commitsWithJira.Count)</span>
                    }
                </button>
            </div>
            <div class="col-auto">
                <button class="btn btn-warning text-nowrap" @onclick="async () => await SendDailyWorklogsToTempo()" disabled="@(!commitsWithJira.Any() || isSendingWorklogs)" title="Distribui 8 horas de trabalho entre todos os commits de cada dia">
                    @if (isSendingWorklogs)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-1">Enviando...</span>
                    }
                    else
                    {
                        <span>8h Diária</span>
                    }
                </button>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary text-nowrap" @onclick="async () => await RefreshPullRequestsFromAzureDevOps()" disabled="@CommitsStateService.IsLoading" title="Atualizar Pull Requests do Azure DevOps">
                    @if (CommitsStateService.IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-1">Atualizando PRs...</span>
                    }
                    else
                    {
                        <i class="fas fa-sync-alt"></i>
                        <span class="ms-1">Atualizar PRs</span>
                    }
                </button>
            </div>
            <div class="col">
                <DatePresets OnDateRangeSelected="HandleDateRangeSelected" />
            </div>
        </div>
    </div>
</StickyFilter>

<CustomProgressBar IsLoading="@CommitsStateService.IsLoading" ProgressValue="@CommitsStateService.ProgressValue" TextColor="black" Height="25px" Label="Buscando commits..." />

@if (isLoadingWorklogs)
{
    <div class="alert alert-info d-flex align-items-center mt-2" role="alert">
        <div class="spinner-border spinner-border-sm me-2" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div>
            <strong>Atualizando worklogs...</strong>
            <div class="progress mt-1" style="height: 5px;">
                <div class="progress-bar" role="progressbar" style="width: @worklogLoadingProgress%" aria-valuenow="@worklogLoadingProgress" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(worklogLoadingError))
{
    <div class="alert alert-danger d-flex align-items-center mt-2" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>
        <div>
            <strong>Erro ao carregar worklogs:</strong> @worklogLoadingError
        </div>
    </div>
}

@if (AllUniqueDates.Any())
{
    @foreach (var date in AllUniqueDates)
    {
        var dayCommits = commitDataList.Where(c => c.CommitDate.Date == date).ToList();
        var dayPullRequests = pullRequestsByDate.ContainsKey(date) ? pullRequestsByDate[date] : new List<PullRequest>();
        var dayWorklogs = worklogsByDate.ContainsKey(date) ? worklogsByDate[date] : new List<TempoWorklog>();

        if (dayCommits.Any() || dayPullRequests.Any())
        {
            <div class="card mt-3">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">@date.ToString("dddd, MMMM dd, yyyy")</h5>
                    <div class="d-flex align-items-center gap-2">
                        @{
                            var dayWorklogCount = dayWorklogs.Count;
                            if (dayWorklogCount > 0)
                            {
                                <span class="badge bg-success" title="@dayWorklogCount worklog(s) encontrado(s)">
                                    <i class="fas fa-check-circle"></i> @dayWorklogCount
                                </span>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteWorklogsForDate(date)"
                                        title="Deletar todos os worklogs deste dia">
                                    <i class="fas fa-trash"></i> Delete All
                                </button>
                            }
                            else if (isLoadingWorklogs)
                            {
                                <span class="badge bg-info">
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                </span>
                            }

                            var dayCommitsWithJira = dayCommits.Where(c => !string.IsNullOrEmpty(c.JiraCardID)).ToList();
                            if (dayCommitsWithJira.Any())
                            {
                                <button class="btn btn-sm btn-warning" @onclick="() => SendDailyWorklogsForDate(date)"
                                        title="Distribuir 8h entre @dayCommitsWithJira.Count commits deste dia">
                                    <i class="fas fa-clock"></i> 8h
                                </button>
                            }
                        }
                    </div>
                </div>
                @if (dayCommits.Any())
                {
                    <WorklogList Worklogs="@dayWorklogs" IsLoading="@isLoadingWorklogs" OnWorklogDeleted="RefreshWorklogs" />
                    <JiraCardList Commits="@dayCommits" ConfigService="@ConfigService" WorklogService="@WorklogService" OnWorklogCreated="RefreshWorklogs" />
                }

                @if (dayPullRequests.Any())
                {
                    <div class="card mt-3">
                        <div class="card-header bg-secondary text-white">
                            <h6 class="mb-0">Pull Requests (@dayPullRequests.Count)</h6>
                        </div>
                        <div class="card-body">
                            <ul class="list-group list-group-flush">
                                @foreach (var pr in dayPullRequests)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <a href="@pr.Url" target="_blank">@pr.Title</a>
                                            <br />
                                            <small class="text-muted">Source: @pr.SourceBranch.Replace("refs/heads/", "")</small>
                                            <br />
                                            <small class="text-muted">Target: @pr.TargetBranch.Replace("refs/heads/", "")</small>
                                        </div>
                                        @if (pr.JiraCardIDs != null && pr.JiraCardIDs.Any())
                                        {
                                            @foreach (var jiraCardID in pr.JiraCardIDs)
                                            {
                                                <button class="btn btn-sm btn-success ms-1" @onclick="() => SendSingleWorklogToTempoForPullRequest(pr, jiraCardID)">
                                                    <i class="fas fa-plus"></i> GM (@jiraCardID)
                                                </button>
                                            }
                                        }
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
        }
    }
}
else
{
    <p>Nenhum commit ou pull request buscado ainda.</p>
}

@if (worklogResults.Any())
{
    <div class="card mt-4">
        <div class="card-header bg-info text-white">
            <h5 class="mb-0">
                <i class="fas fa-list-check me-2"></i>
                Worklog Results
                @{
                    var successCount = worklogResults.Count(r => r.Success);
                    var failCount = worklogResults.Count(r => !r.Success);
                }
                <span class="badge bg-light text-dark ms-2">@successCount ✓ @failCount ✗</span>
            </h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="alert alert-success py-2">
                        <i class="fas fa-check-circle me-2"></i>
                        <strong>@successCount</strong> worklogs criados com sucesso
                    </div>
                </div>
                <div class="col-md-6">
                    @if (failCount > 0)
                    {
                        <div class="alert alert-danger py-2">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>@failCount</strong> falharam
                        </div>
                    }
                </div>
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var result in worklogResults)
                {
                    <li class="list-group-item @(result.Success ? "border-start border-success border-3" : "border-start border-danger border-3")">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <strong>@result.Commit?.JiraCardID</strong>
                                <small class="text-muted">- @result.Commit?.RepoName</small>
                                <br />
                                <small class="text-muted">@result.Commit?.CommitMessage?.Split('\n')[0]</small>
                            </div>
                            <div>
                                @if (result.Success)
                                {
                                    <span class="badge bg-success">
                                        <i class="fas fa-check me-1"></i> Criado
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-danger" title="@result.Error">
                                        <i class="fas fa-times me-1"></i> Falhou
                                    </span>
                                }
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(result.Message))
                        {
                            <div class="mt-1">
                                <small class="text-muted fst-italic">@result.Message</small>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(result.Error) && !result.Success)
                        {
                            <div class="mt-1">
                                <small class="text-danger fst-italic">@result.Error</small>
                            </div>
                        }
                        @if (!result.Success)
                        {
                            <div class="mt-2">
                                <button class="btn btn-sm btn-warning"
                                        @onclick="() => RetryWorklogAsync(result)"
                                        disabled="@retryLoadingStates.GetValueOrDefault(GetResultKey(result), false)">
                                    @if (retryLoadingStates.GetValueOrDefault(GetResultKey(result), false))
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span class="ms-1">Retrying...</span>
                                    }
                                    else
                                    {
                                        <i class="fas fa-redo me-1"></i>
                                        <span>Retry</span>
                                    }
                                </button>
                            </div>
                        }
                    </li>
                }
            </ul>
        </div>
    </div>
}

@code {
    private List<Commit> commitDataList = new List<Commit>();
    private List<WorklogCreationResult> worklogResults = new List<WorklogCreationResult>();
    private List<TempoWorklog> existingWorklogs = new List<TempoWorklog>();
    private List<PullRequest> pullRequests = new List<PullRequest>();
    private bool isSendingWorklogs = false;
    private bool isLoadingWorklogs = false;
    private string worklogLoadingError = null;
    private int worklogLoadingProgress = 0;
    private Dictionary<int, bool> retryLoadingStates = new Dictionary<int, bool>();
    private (DateTime Start, DateTime End) WorklogDateRange;

    private List<Commit> commitsWithJira => commitDataList.Where(c => !string.IsNullOrEmpty(c.JiraCardID)).ToList();

    private Dictionary<DateTime, List<TempoWorklog>> worklogsByDate => existingWorklogs
        .GroupBy(w => w.StartDate.Date)
        .OrderByDescending(g => g.Key)
        .ToDictionary(g => g.Key, g => g.ToList());

    private Dictionary<DateTime, List<PullRequest>> pullRequestsByDate
    {
        get
        {
            var allDatedPullRequests = new List<(DateTime Date, PullRequest PR)>();

            foreach (var pr in pullRequests)
            {
                // Add CreatedDate
                allDatedPullRequests.Add((pr.CreatedDate.Date, pr));

                // Add LastUpdatedDate if available and different from CreatedDate
                if (pr.LastUpdatedDate.HasValue && pr.LastUpdatedDate.Value.Date != pr.CreatedDate.Date)
                {
                    allDatedPullRequests.Add((pr.LastUpdatedDate.Value.Date, pr));
                }

                // Add LastPipelineRunDate if available and different from other dates
                if (pr.LastPipelineRunDate.HasValue &&
                    pr.LastPipelineRunDate.Value.Date != pr.CreatedDate.Date &&
                    (!pr.LastUpdatedDate.HasValue || pr.LastPipelineRunDate.Value.Date != pr.LastUpdatedDate.Value.Date))
                {
                    allDatedPullRequests.Add((pr.LastPipelineRunDate.Value.Date, pr));
                }
            }

            return allDatedPullRequests
                .GroupBy(item => item.Date)
                .OrderByDescending(g => g.Key)
                .ToDictionary(g => g.Key, g => g.Select(item => item.PR).Distinct().ToList());
        }
    }

    private IEnumerable<DateTime> AllUniqueDates
    {
        get
        {
            var dates = commitDataList.Select(c => c.CommitDate.Date)
                .Concat(pullRequestsByDate.Keys);

            if (WorklogDateRange.End.Date != default)
            {
                dates = dates.Append(WorklogDateRange.End.Date);
            }

            return dates.Distinct().OrderByDescending(d => d);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        WorklogDateRange = (DateTime.Today.AddDays(-30), DateTime.Today);
        CommitsStateService.DataInicial = WorklogDateRange.Start;

        await FetchCommits();
        await LoadPullRequests();
    }

    private async Task HandleDateRangeSelected((DateTime? StartDate, DateTime? EndDate) args)
    {
        if (args.StartDate.HasValue && args.EndDate.HasValue)
        {
            WorklogDateRange = (args.StartDate.Value, args.EndDate.Value);
            CommitsStateService.DataInicial = args.StartDate.Value;
            await FetchCommits();
        }
    }

    private async Task FetchCommits()
    {
        var config = ConfigService.GetConfig();
        commitDataList = await CommitDataExportService.GetRecentCommitsAsync(config.Username, CommitsStateService.DataInicial);
        await FetchExistingWorklogs();
    }

    private async Task LoadPullRequests()
    {
        try
        {
            var repositories = await RepositoryService.GetBuildInfoAsync();
            var allPullRequests = new List<PullRequest>();

            if (repositories != null)
            {
                foreach (var repo in repositories)
                {
                    if (repo.ActivePullRequests != null && repo.ActivePullRequests.Any())
                    {
                        allPullRequests.AddRange(repo.ActivePullRequests);
                    }
                }
            }

            pullRequests = allPullRequests;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading pull requests: {ex.Message}");
        }
    }

    private async Task FetchExistingWorklogs()
    {
        if (!AllUniqueDates.Any())
        {
            existingWorklogs = new List<TempoWorklog>();
            StateHasChanged();
            return;
        }

        isLoadingWorklogs = true;
        worklogLoadingError = null;
        worklogLoadingProgress = 0;
        StateHasChanged();

        try
        {
            var config = ConfigService.GetConfig();
            var accountId = config.TempoConfig?.AccountId;
            var startDate = WorklogDateRange.Start;
            var endDate = WorklogDateRange.End;

            Logger.LogInformation("Fetching worklogs from {StartDate} to {EndDate} using accountId: {AccountId}",
                startDate.ToShortDateString(), endDate.ToShortDateString(), accountId ?? "fallback");

            List<TempoWorklog> allWorklogs;
            if (!string.IsNullOrEmpty(accountId))
            {
                allWorklogs = await WorklogService.GetWorklogsByUserAsync(accountId, startDate, endDate);
            }
            else
            {
                allWorklogs = await WorklogService.GetExistingWorklogsForDateRangeAsync(startDate, endDate);
            }

            // Deduplicate worklogs by ID to prevent duplicates
            existingWorklogs = allWorklogs
                .GroupBy(w => w.Id)
                .Select(g => g.First())
                .ToList();

            Logger.LogInformation("Successfully loaded {TotalWorklogs} unique worklogs", existingWorklogs.Count);
            worklogLoadingProgress = 100;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to fetch existing worklogs: {Message}", ex.Message);
            worklogLoadingError = ex.Message;
            toastService.ShowError($"Error fetching worklogs: {ex.Message}");
            existingWorklogs = new List<TempoWorklog>();
            StateHasChanged();
        }
        finally
        {
            isLoadingWorklogs = false;
            // Only reset progress to 0 if we're not in a successful completion state
            if (worklogLoadingProgress != 100)
            {
                worklogLoadingProgress = 0;
            }
            StateHasChanged();
        }
    }

    private CancellationTokenSource cts = new CancellationTokenSource();

    private async Task SyncCommits()
    {
        CommitsStateService.IsLoading = true;
        // Dispose old CTS and create new one
        cts?.Dispose();
        cts = new CancellationTokenSource();

        try
        {
            var progressHandler = new Progress<int>(value =>
            {
                CommitsStateService.ProgressValue = value;
                StateHasChanged();
            });

            await CommitDataExportService.FetchCommitDataAsync(progressHandler, CommitsStateService.DataInicial, cts.Token);
            toastService.ShowSuccess("Commits sincronizados com sucesso!");

            // Refresh worklogs after commits are updated
            await FetchExistingWorklogs();
        }
        catch (OperationCanceledException)
        {
            toastService.ShowWarning("Sincronização cancelada pelo usuário.");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            CommitsStateService.IsLoading = false;
        }
    }

    private async Task CancelSyncCommits()
    {
        try
        {
            cts?.Cancel();
        }
        catch (ObjectDisposedException)
        {
            // CTS already disposed, create new one
            cts = new CancellationTokenSource();
        }
        finally
        {
            cts?.Dispose();
            cts = new CancellationTokenSource();
        }
    }

    private async Task RefreshPullRequestsFromAzureDevOps()
    {
        CommitsStateService.IsLoading = true;
        try
        {
            await RepositoryService.FetchBuildInfoAsync(); // This fetches and persists the latest PR data
            await LoadPullRequests(); // This loads the fresh data into the UI
            toastService.ShowSuccess("Pull Requests atualizados com sucesso!");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Erro ao atualizar Pull Requests: {ex.Message}");
        }
        finally
        {
            CommitsStateService.IsLoading = false;
        }
    }

    private async Task DownloadCommits()
    {
        var config = ConfigService.GetConfig();
        var commitsToExport = commitDataList.Where(c => !string.IsNullOrEmpty(c.JiraCardID)).ToList();
        if (!commitsToExport.Any())
        {
            toastService.ShowWarning("Nenhum commit com JIRA ID para exportar.");
            return;
        }

        try
        {
            var excelBytes = CommitDataExportService.ExportToExcel(commitsToExport, existingWorklogs);
            var fileName = $"Commits_Export_{DateTime.Now:yyyyMMdd_HHmmss}.xlsx";
            await JS.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(excelBytes));
            toastService.ShowSuccess("Commits exportados com sucesso!");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Erro ao exportar commits: {ex.Message}");
        }
    }

    private async Task SendWorklogsToTempo()
    {
        isSendingWorklogs = true;
        worklogResults.Clear();
        StateHasChanged();

        try
        {
            var config = ConfigService.GetConfig();
            var accountId = config.TempoConfig?.AccountId;

            foreach (var commit in commitsWithJira)
            {
                var result = await WorklogService.CreateWorklogFromCommitAsync(commit);
                worklogResults.Add(result);
                StateHasChanged();
            }
            toastService.ShowSuccess("Worklogs enviados com sucesso!");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Erro ao enviar worklogs: {ex.Message}");
        }
        finally
        {
            isSendingWorklogs = false;
            await RefreshWorklogs();
        }
    }

    private async Task SendDailyWorklogsToTempo()
    {
        isSendingWorklogs = true;
        worklogResults.Clear();
        StateHasChanged();

        try
        {
            var config = ConfigService.GetConfig();
            var accountId = config.TempoConfig?.AccountId;

            var dailyGroupedCommits = commitDataList
                .Where(c => !string.IsNullOrEmpty(c.JiraCardID))
                .GroupBy(c => c.CommitDate.Date)
                .OrderByDescending(g => g.Key);

            foreach (var dayGroup in dailyGroupedCommits)
            {
                var result = await WorklogService.CreateDailyWorklogForCommitsAsync(dayGroup.ToList(), accountId);
                worklogResults.Add(result);
                StateHasChanged();
            }
            toastService.ShowSuccess("Worklogs diários enviados com sucesso!");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Erro ao enviar worklogs diários: {ex.Message}");
        }
        finally
        {
            isSendingWorklogs = false;
            await RefreshWorklogs();
        }
    }

    private async Task SendDailyWorklogsForDate(DateTime date)
    {
        isSendingWorklogs = true;
        worklogResults.Clear();
        StateHasChanged();

        try
        {
            var config = ConfigService.GetConfig();
            var accountId = config.TempoConfig?.AccountId;

            var dayCommits = commitDataList
                .Where(c => !string.IsNullOrEmpty(c.JiraCardID) && c.CommitDate.Date == date)
                .ToList();

            if (dayCommits.Any())
            {
                var result = await WorklogService.CreateDailyWorklogForCommitsAsync(dayCommits, accountId);
                worklogResults.Add(result);
                toastService.ShowSuccess($"Worklog diário para {date.ToShortDateString()} enviado com sucesso!");
            }
            else
            {
                toastService.ShowWarning($"Nenhum commit com JIRA ID encontrado para {date.ToShortDateString()}.");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Erro ao enviar worklog diário para {date.ToShortDateString()}: {ex.Message}");
        }
        finally
        {
            isSendingWorklogs = false;
            await RefreshWorklogs();
        }
    }

    private async Task RefreshWorklogs()
    {
        await FetchExistingWorklogs();
    }

    private async Task DeleteWorklogsForDate(DateTime date)
    {
        try
        {
            var worklogsToDelete = existingWorklogs.Where(w => w.StartDate.Date == date).ToList();
            if (!worklogsToDelete.Any())
            {
                toastService.ShowWarning($"Nenhum worklog encontrado para {date.ToShortDateString()}.");
                return;
            }

            foreach (var worklog in worklogsToDelete)
            {
                await WorklogService.DeleteWorklogAsync(worklog.Id);
            }
            toastService.ShowSuccess($"Worklogs para {date.ToShortDateString()} deletados com sucesso!");
            await RefreshWorklogs();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Erro ao deletar worklogs para {date.ToShortDateString()}: {ex.Message}");
        }
    }

    private int GetResultKey(WorklogCreationResult result)
    {
        // Simple hash code for the result to use as a dictionary key
        return HashCode.Combine(result.Commit?.Id, result.Commit?.JiraCardID, result.Success);
    }

    private async Task RetryWorklogAsync(WorklogCreationResult result)
    {
        var key = GetResultKey(result);
        retryLoadingStates[key] = true;
        StateHasChanged();

        WorklogCreationResult newResult;
        if (result.Commit != null)
        {
            newResult = await WorklogService.CreateWorklogFromCommitAsync(result.Commit);
        }
        else
        {
            // Assuming we will add PullRequest to WorklogCreationResult
            // For now, this part is not implemented
            newResult = new WorklogCreationResult { Success = false, Error = "Retry for Pull Request worklogs is not implemented." };
        }

        var index = worklogResults.FindIndex(r => GetResultKey(r) == key);
        if (index != -1)
        {
            worklogResults[index] = newResult;
        }

        retryLoadingStates[key] = false;
        StateHasChanged();
    }

    private async Task SendSingleWorklogToTempoForPullRequest(PullRequest pullRequest, string jiraCardID)
    {
        if (pullRequest == null || string.IsNullOrEmpty(jiraCardID))
        {
            toastService.ShowWarning("No JIRA card found for this pull request");
            return;
        }
        try
        {
            var result = await WorklogService.CreateWorklogFromPullRequestAsync(pullRequest, jiraCardID);
            if (result.Success)
            {
                toastService.ShowSuccess($"Worklog created for PR {jiraCardID}");
            }
            else
            {
                toastService.ShowError($"Failed to create worklog for PR {jiraCardID}: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error sending worklog for PR {jiraCardID}: {ex.Message}");
        }
    }
}
