@page "/commits"
@using System.Reactive.Linq
@using System.Reactive.Subjects
@using System.Text.RegularExpressions
@using Common
@using Common.Models
@using Common.Services
@using Common.Services.Interfaces
@using Common.Utils
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@inject ToastService toastService
@inject IJSRuntime JS
@inject IConsulService ConsulService
@inject ICommitExportService CommitDataExportService
@inject IConfigurationService ConfigService
@inject CommitsStateService CommitsStateService
@inject IWorklogService WorklogService

<StickyFilter>
    <div class="d-flex flex-column gap-2">
        <div class="row g-2 align-items-center">
            <div class="col-auto">
                @if (CommitsStateService.IsLoading)
                {
                    <button class="btn btn-danger text-nowrap" @onclick="async () => await CancelSyncCommits()">Cancelar Sincronização</button>
                }
                else
                {
                    <button class="btn btn-info text-nowrap" @onclick="async () => await SyncCommits()">Sincronizar Commits</button>
                }
            </div>
            <div class="col-auto">
                <button class="btn btn-secondary text-nowrap" @onclick="async () => await DownloadCommits()">Baixar para Excel</button>
            </div>
            <div class="col-auto">
                <button class="btn btn-success text-nowrap" @onclick="async () => await SendWorklogsToTempo()" disabled="@(!commitsWithJira.Any() || isSendingWorklogs)">
                    @if (isSendingWorklogs)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-1">Enviando...</span>
                    }
                    else
                    {
                        <span>Enviar Worklogs (@commitsWithJira.Count)</span>
                    }
                </button>
            </div>
            <div class="col">
                <DatePresets OnDateRangeSelected="HandleDateRangeSelected" />
            </div>
        </div>
    </div>
</StickyFilter>

<CustomProgressBar IsLoading="@CommitsStateService.IsLoading" ProgressValue="@CommitsStateService.ProgressValue" TextColor="black" Height="25px" Label="Buscando commits..." />

@if (commitDataList != null && commitDataList.Any())
{
    var groupedCommits = commitDataList
        .GroupBy(c => c.CommitDate.Date)
        .OrderByDescending(g => g.Key);

    @foreach (var dayGroup in groupedCommits)
    {
        <div class="card mt-3">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">@dayGroup.Key.ToString("dddd, MMMM dd, yyyy")</h5>
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var commit in dayGroup.OrderByDescending(c => c.CommitDate))
                {
                    <li class="list-group-item">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <strong>@commit.ProjectName</strong> - @commit.RepoName - @commit.BranchName
                                <br />
                                <small class="text-muted">@commit.CommitDate.ToString("HH:mm:ss")</small> by <strong>@commit.AuthorName</strong>
                                <br />
                                @((MarkupString)commit.ToHtml(ConfigService.GetConfig()))
                            </div>
                            <div class="d-flex gap-2 align-items-center">
                                @if (!string.IsNullOrEmpty(commit.JiraCardID))
                                {
                                    <span class="badge bg-secondary clickable-badge" @onclick="() => CopyToClipboard(commit.JiraCardID)"> @commit.JiraCardID </span>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => SendSingleWorklogToTempo(commit)" title="Enviar worklog para Tempo">
                                        <i class="fas fa-clock"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </li>
                }
            </ul>
        </div>
    }
}
else
{
    <p>Nenhum commit buscado ainda.</p>
}

@if (worklogResults.Any())
{
    <div class="card mt-4">
        <div class="card-header bg-info text-white">
            <h5 class="mb-0">Worklog Results</h5>
        </div>
        <div class="card-body">
            <ul class="list-group list-group-flush">
                @foreach (var result in worklogResults)
                {
                    <li class="list-group-item">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <strong>@result.Commit?.JiraCardID</strong> - @result.Commit?.RepoName
                                <br />
                                <small class="text-muted">@result.Commit?.CommitMessage?.Split('\n')[0]</small>
                            </div>
                            <div>
                                @if (result.Success)
                                {
                                    <span class="badge bg-success">✓ Created</span>
                                }
                                else
                                {
                                    <span class="badge bg-danger" title="@result.Error">✗ Failed</span>
                                }
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(result.Message))
                        {
                            <small class="text-muted">@result.Message</small>
                        }
                    </li>
                }
            </ul>
        </div>
    </div>
}

@code {
    private List<Commit> commitDataList = new List<Commit>();
    private List<WorklogCreationResult> worklogResults = new List<WorklogCreationResult>();
    private bool isSendingWorklogs = false;

    private List<Commit> commitsWithJira => commitDataList.Where(c => !string.IsNullOrEmpty(c.JiraCardID)).ToList();

    protected override async Task OnInitializedAsync()
    {
        await FetchCommits();
    }

    private async Task HandleDateRangeSelected((DateTime? StartDate, DateTime? EndDate) args)
    {
        if (args.StartDate != null && args.EndDate != null)
        {
            CommitsStateService.DataInicial = args.StartDate.Value;
            await FetchCommits();
        }
    }

    private async Task FetchCommits()
    {
        var config = ConfigService.GetConfig();
        commitDataList = await CommitDataExportService.GetRecentCommitsAsync(config.Username, CommitsStateService.DataInicial);
    }

    private CancellationTokenSource cts = new CancellationTokenSource();

    private async Task SyncCommits()
    {
        CommitsStateService.IsLoading = true;
        try
        {
            cts = new CancellationTokenSource();
            var progressHandler = new Progress<int>(value =>
            {
                CommitsStateService.ProgressValue = value;
                StateHasChanged();
            });

            await CommitDataExportService.FetchCommitDataAsync(progressHandler, CommitsStateService.DataInicial, cts.Token);
            toastService.ShowSuccess("Commits sincronizados com sucesso!");
        }
        catch (OperationCanceledException)
        {
            toastService.ShowWarning("Sincronização cancelada pelo usuário.");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            CommitsStateService.IsLoading = false;
        }
    }

    private async Task CancelSyncCommits()
    {
        cts.Cancel();
        await Task.Yield();
        cts.Dispose();
    }

    private async Task DownloadCommits()
    {
        await CommitDataExportService.ExportCommitDataAsync();
    }

    private async Task CopyToClipboard(string jiraCardID)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", jiraCardID);
        toastService.ShowSuccess($"Copiado {jiraCardID} para a área de transferência!");
    }

    private async Task SendWorklogsToTempo()
    {
        if (!commitsWithJira.Any())
        {
            toastService.ShowWarning("No commits with JIRA cards found");
            return;
        }

        isSendingWorklogs = true;
        try
        {
            worklogResults = await WorklogService.CreateWorklogsFromCommitsAsync(commitsWithJira);

            var successful = worklogResults.Count(r => r.Success);
            var failed = worklogResults.Count(r => !r.Success);

            if (successful > 0)
            {
                toastService.ShowSuccess($"Successfully created {successful} worklogs");
            }

            if (failed > 0)
            {
                toastService.ShowWarning($"Failed to create {failed} worklogs");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error sending worklogs: {ex.Message}");
        }
        finally
        {
            isSendingWorklogs = false;
        }
    }

    private async Task SendSingleWorklogToTempo(Commit commit)
    {
        if (commit == null || string.IsNullOrEmpty(commit.JiraCardID))
        {
            toastService.ShowWarning("No JIRA card found for this commit");
            return;
        }

        try
        {
            var result = await WorklogService.CreateWorklogFromCommitAsync(commit);

            if (result.Success)
            {
                toastService.ShowSuccess($"Worklog created for {commit.JiraCardID}");
            }
            else
            {
                toastService.ShowError($"Failed to create worklog: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error sending worklog: {ex.Message}");
        }
    }
}

<style>
    .progress {
        position: relative;
    }

    .progress-text {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        color: black;
        font-weight: bold;
    }

    .clickable-badge {
        cursor: pointer;
    }
</style>
