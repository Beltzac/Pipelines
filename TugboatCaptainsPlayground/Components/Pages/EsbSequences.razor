@page "/esbsequences"
@using Common.Models
@using Common.Services.Interfaces
@using System.Xml.Linq
@using Quartz
@inject IEsbService EsbService
@inject ILogger<EsbSequences> Logger
@inject IConfigurationService ConfigService
@inject EsbSequencesStateService EsbSequencesStateService
@inject ISchedulerFactory SchedulerFactory
@implements IDisposable

<h3>ESB Sequences</h3>
<div class="row g-3 mb-3 align-items-end">
    <div class="col-md-6">
        <div class="form-group">
            <label class="form-label">ESB Server:</label>
            <select class="form-select" @bind="EsbSequencesStateService.SelectedEsbServerName" @bind:after="OnEsbServerChanged">
                @foreach (var server in EsbSequencesStateService.EsbServers)
                {
                    <option value="@server.Name">@server.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            <label class="form-label">Search:</label>
            <input type="text" class="form-control" @bind-value="EsbSequencesStateService.SearchTerm" @bind-value:event="oninput" placeholder="Search sequences..." />
        </div>
    </div>
    <div class="col-md-12">
        <button class="btn btn-primary me-2" @onclick="LoadEsbSequences">Reload Sequences</button>
        <button class="btn btn-info" @onclick="RunSendEditedSequencesJobManually">Send Edited Sequences to Teams</button>
    </div>
</div>

<div class="row g-3 mb-3">
    <div class="col-md-4">
        <div class="form-group">
            <label class="form-label">Enable Statistics:</label>
            <select class="form-select" @bind="EsbSequencesStateService.FilterEnableStatistics">
                <option value="">All</option>
                <option value="true">Yes</option>
                <option value="false">No</option>
            </select>
        </div>
    </div>
    <div class="col-md-4">
        <div class="form-group">
            <label class="form-label">Enable Tracing:</label>
            <select class="form-select" @bind="EsbSequencesStateService.FilterEnableTracing">
                <option value="">All</option>
                <option value="true">Yes</option>
                <option value="false">No</option>
            </select>
        </div>
    </div>
    <div class="col-md-4">
        <div class="form-group">
            <label class="form-label">Is Edited:</label>
            <select class="form-select" @bind="EsbSequencesStateService.FilterIsEdited">
                <option value="">All</option>
                <option value="true">Yes</option>
                <option value="false">No</option>
            </select>
        </div>
    </div>
</div>

@if (EsbSequencesStateService.IsLoading)
{
    <div class="alert alert-info">Loading ESB sequences...</div>
}
else if (!string.IsNullOrEmpty(EsbSequencesStateService.ErrorMessage))
{
    <div class="alert alert-danger">Error: @EsbSequencesStateService.ErrorMessage</div>
}
else
{
    @if (FilteredSequences.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Artifact Container Name</th>
                    <th>Description</th>
                    <th>Enable Statistics</th>
                    <th>Enable Tracing</th>
                    <th>Is Edited</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var sequence in FilteredSequences)
                {
                    <tr>
                        <td>@sequence.Name</td>
                        <td>@sequence.ArtifactContainerName</td>
                        <td>@sequence.Description</td>
                        <td>@(sequence.EnableStatistics ? "Yes" : "No")</td>
                        <td>@(sequence.EnableTracing ? "Yes" : "No")</td>
                        <td>@(sequence.IsEdited ? "Yes" : "No")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-warning">No ESB sequences found.</div>
    }
}

@code {
    private ConfigModel config;

    private IEnumerable<SequenceInfo> FilteredSequences => EsbSequencesStateService.Sequences.Where(s =>
        (string.IsNullOrEmpty(EsbSequencesStateService.SearchTerm) ||
        s.Name.Contains(EsbSequencesStateService.SearchTerm, StringComparison.OrdinalIgnoreCase) ||
        s.ArtifactContainerName.Contains(EsbSequencesStateService.SearchTerm, StringComparison.OrdinalIgnoreCase) ||
        (s.Description != null && s.Description.Contains(EsbSequencesStateService.SearchTerm, StringComparison.OrdinalIgnoreCase))) &&
        (string.IsNullOrEmpty(EsbSequencesStateService.FilterEnableStatistics) || s.EnableStatistics.ToString().Equals(EsbSequencesStateService.FilterEnableStatistics, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrEmpty(EsbSequencesStateService.FilterEnableTracing) || s.EnableTracing.ToString().Equals(EsbSequencesStateService.FilterEnableTracing, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrEmpty(EsbSequencesStateService.FilterIsEdited) || s.IsEdited.ToString().Equals(EsbSequencesStateService.FilterIsEdited, StringComparison.OrdinalIgnoreCase))
    );

    protected override async Task OnInitializedAsync()
    {
        EsbSequencesStateService.OnChange += StateHasChanged;
        EsbSequencesStateService.Load();

        config = ConfigService.GetConfig();

        EsbSequencesStateService.InitializeState(state =>
        {
            state.EsbServers = config.EsbServers;
            if (state.EsbServers.Any())
            {
                state.SelectedEsbServerName = state.EsbServers.First().Name;
            }
        });

        if (EsbSequencesStateService.EsbServers.Any())
        {
            await LoadEsbSequences();
        }
        else
        {
            EsbSequencesStateService.IsLoading = false;
            EsbSequencesStateService.ErrorMessage = "No ESB servers configured. Please add ESB servers in the configuration.";
        }
    }

    private async Task LoadEsbSequences()
    {
        EsbSequencesStateService.IsLoading = true;
        EsbSequencesStateService.ErrorMessage = null;
        try
        {
            var selectedServer = EsbSequencesStateService.EsbServers.FirstOrDefault(s => s.Name == EsbSequencesStateService.SelectedEsbServerName);
            if (selectedServer == null)
            {
                EsbSequencesStateService.ErrorMessage = "Selected ESB server not found in configuration.";
                return;
            }

            EsbSequencesStateService.Sequences = await EsbService.GetSequencesAsync(selectedServer);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading ESB sequences: {Message}", ex.Message);
            EsbSequencesStateService.ErrorMessage = ex.Message;
        }
        finally
        {
            EsbSequencesStateService.IsLoading = false;
        }
    }

    private async Task OnEsbServerChanged()
    {
        await LoadEsbSequences();
    }

    public void Dispose()
    {
        EsbSequencesStateService.OnChange -= StateHasChanged;
        EsbSequencesStateService.Save();
    }

    private async Task RunSendEditedSequencesJobManually()
    {
        var scheduler = await SchedulerFactory.GetScheduler();
        var jobKey = new JobKey("SendEditedEsbSequencesJob");

        if (await scheduler.CheckExists(jobKey))
        {
            await scheduler.TriggerJob(jobKey);
            Logger.LogInformation("Manually triggered SendEditedEsbSequencesJob.");
        }
        else
        {
            Logger.LogWarning("SendEditedEsbSequencesJob not found. Please ensure it's registered.");
        }
    }
}