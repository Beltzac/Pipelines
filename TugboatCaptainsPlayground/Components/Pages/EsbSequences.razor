@page "/esbsequences"
@using Common.Models
@using Common.Services.Interfaces
@using System.Xml.Linq
@inject IEsbService EsbService
@inject ILogger<EsbSequences> Logger
@inject IConfigurationService ConfigService
@inject EsbSequencesStateService EsbSequencesStateService
@implements IDisposable

<h3>ESB Sequences</h3>
<div class="row g-3 mb-3 align-items-end">
    <div class="col-md-6">
        <div class="form-group">
            <label class="form-label">ESB Server:</label>
            <select class="form-select" @bind="EsbSequencesStateService.SelectedEsbServerName" @bind:after="OnEsbServerChanged">
                @foreach (var server in EsbSequencesStateService.EsbServers)
                {
                    <option value="@server.Name">@server.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            <label class="form-label">Search:</label>
            <input type="text" class="form-control" @bind-value="EsbSequencesStateService.SearchTerm" @bind-value:event="oninput" placeholder="Search sequences..." />
        </div>
    </div>
    <div class="col-md-12">
        <button class="btn btn-primary" @onclick="LoadEsbSequences">Reload Sequences</button>
    </div>
</div>

<div class="row g-3 mb-3">
    <div class="col-md-4">
        <div class="form-group">
            <label class="form-label">Enable Statistics:</label>
            <select class="form-select" @bind="EsbSequencesStateService.FilterEnableStatistics">
                <option value="">All</option>
                <option value="true">Yes</option>
                <option value="false">No</option>
            </select>
        </div>
    </div>
    <div class="col-md-4">
        <div class="form-group">
            <label class="form-label">Enable Tracing:</label>
            <select class="form-select" @bind="EsbSequencesStateService.FilterEnableTracing">
                <option value="">All</option>
                <option value="true">Yes</option>
                <option value="false">No</option>
            </select>
        </div>
    </div>
    <div class="col-md-4">
        <div class="form-group">
            <label class="form-label">Is Edited:</label>
            <select class="form-select" @bind="EsbSequencesStateService.FilterIsEdited">
                <option value="">All</option>
                <option value="true">Yes</option>
                <option value="false">No</option>
            </select>
        </div>
    </div>
</div>

@if (EsbSequencesStateService.IsLoading)
{
    <div class="alert alert-info">Loading ESB sequences...</div>
}
else if (!string.IsNullOrEmpty(EsbSequencesStateService.ErrorMessage))
{
    <div class="alert alert-danger">Error: @EsbSequencesStateService.ErrorMessage</div>
}
else
{
    @if (FilteredSequences.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Artifact Container Name</th>
                    <th>Description</th>
                    <th>Enable Statistics</th>
                    <th>Enable Tracing</th>
                    <th>Is Edited</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var sequence in FilteredSequences)
                {
                    <tr>
                        <td>@sequence.Name</td>
                        <td>@sequence.ArtifactContainerName</td>
                        <td>@sequence.Description</td>
                        <td>@(sequence.EnableStatistics ? "Yes" : "No")</td>
                        <td>@(sequence.EnableTracing ? "Yes" : "No")</td>
                        <td>@(sequence.IsEdited ? "Yes" : "No")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-warning">No ESB sequences found.</div>
    }
}

@code {
    private ConfigModel config;

    private IEnumerable<SequenceInfo> FilteredSequences => EsbSequencesStateService.Sequences.Where(s =>
        (string.IsNullOrEmpty(EsbSequencesStateService.SearchTerm) ||
        s.Name.Contains(EsbSequencesStateService.SearchTerm, StringComparison.OrdinalIgnoreCase) ||
        s.ArtifactContainerName.Contains(EsbSequencesStateService.SearchTerm, StringComparison.OrdinalIgnoreCase) ||
        (s.Description != null && s.Description.Contains(EsbSequencesStateService.SearchTerm, StringComparison.OrdinalIgnoreCase))) &&
        (string.IsNullOrEmpty(EsbSequencesStateService.FilterEnableStatistics) || s.EnableStatistics.ToString().Equals(EsbSequencesStateService.FilterEnableStatistics, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrEmpty(EsbSequencesStateService.FilterEnableTracing) || s.EnableTracing.ToString().Equals(EsbSequencesStateService.FilterEnableTracing, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrEmpty(EsbSequencesStateService.FilterIsEdited) || s.IsEdited.ToString().Equals(EsbSequencesStateService.FilterIsEdited, StringComparison.OrdinalIgnoreCase))
    );

    protected override async Task OnInitializedAsync()
    {
        EsbSequencesStateService.OnChange += StateHasChanged;
        EsbSequencesStateService.Load();

        config = ConfigService.GetConfig();

        EsbSequencesStateService.InitializeState(state =>
        {
            state.EsbServers = config.EsbServers;
            if (state.EsbServers.Any())
            {
                state.SelectedEsbServerName = state.EsbServers.First().Name;
            }
        });

        if (EsbSequencesStateService.EsbServers.Any())
        {
            await LoadEsbSequences();
        }
        else
        {
            EsbSequencesStateService.IsLoading = false;
            EsbSequencesStateService.ErrorMessage = "No ESB servers configured. Please add ESB servers in the configuration.";
        }
    }

    private async Task LoadEsbSequences()
    {
        EsbSequencesStateService.IsLoading = true;
        EsbSequencesStateService.ErrorMessage = null;
        try
        {
            var soapRequest = @"<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsd=""http://org.apache.synapse/xsd"">
               <soapenv:Header/>
               <soapenv:Body>
                  <xsd:getSequences>
                     <xsd:pageNumber>0</xsd:pageNumber>
                     <xsd:sequencePerPage>9999</xsd:sequencePerPage>
                  </xsd:getSequences>
               </soapenv:Body>
            </soapenv:Envelope>";

            var selectedServer = EsbSequencesStateService.EsbServers.FirstOrDefault(s => s.Name == EsbSequencesStateService.SelectedEsbServerName);
            if (selectedServer == null)
            {
                EsbSequencesStateService.ErrorMessage = "Selected ESB server not found in configuration.";
                return;
            }

            var soapResponse = await EsbService.GetEsbSequencesAsync(soapRequest, selectedServer);
            EsbSequencesStateService.Sequences = ParseSoapResponse(soapResponse);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading ESB sequences: {Message}", ex.Message);
            EsbSequencesStateService.ErrorMessage = ex.Message;
        }
        finally
        {
            EsbSequencesStateService.IsLoading = false;
        }
    }

    private List<SequenceInfo> ParseSoapResponse(string soapResponse)
    {
        var parsedSequences = new List<SequenceInfo>();
        try
        {
            XDocument doc = XDocument.Parse(soapResponse);
            XNamespace ns = "http://org.apache.synapse/xsd";
            XNamespace ax2522 = "http://to.common.sequences.carbon.wso2.org/xsd";

            foreach (var returnElement in doc.Descendants(ns + "return"))
            {
                var sequence = new SequenceInfo
                {
                    ArtifactContainerName = (string)returnElement.Element(ax2522 + "artifactContainerName"),
                    Description = (string)returnElement.Element(ax2522 + "description"),
                    EnableStatistics = (bool?)returnElement.Element(ax2522 + "enableStatistics") ?? false,
                    EnableTracing = (bool?)returnElement.Element(ax2522 + "enableTracing") ?? false,
                    IsEdited = (bool?)returnElement.Element(ax2522 + "isEdited") ?? false,
                    Name = (string)returnElement.Element(ax2522 + "name")
                };
                parsedSequences.Add(sequence);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error parsing SOAP response: {Message}", ex.Message);
            EsbSequencesStateService.ErrorMessage = $"Error parsing SOAP response: {ex.Message}";
        }
        return parsedSequences;
    }
    private async Task OnEsbServerChanged()
    {
        await LoadEsbSequences();
    }

    public void Dispose()
    {
        EsbSequencesStateService.OnChange -= StateHasChanged;
        EsbSequencesStateService.Save();
    }
}