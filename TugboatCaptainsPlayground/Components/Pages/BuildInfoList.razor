@page "/"
@using System.Linq.Expressions
@using System.Reactive.Linq
@using System.Reactive.Subjects
@using System.Text.RegularExpressions
@using Common
@using Common.AOP
@using Common.Models
@using Common.Services
@using Common.Services.Interfaces
@using Common.Utils
@using OpenFolderUtils = Common.Utils.OpenFolderUtils
@using FuzzySharp
@using Humanizer
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.WebUtilities
@using Quartz
@using System.Globalization
@using static TugboatCaptainsPlayground.Components.StatusIndicator
@using static Common.Utils.StringExtensions
@inject IRepositoryService BuildInfoService
@inject ToastService toastService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IConfigurationService ConfigService
@inject ILogger<NavigationManager> _logger
@inject BuildInfoStateService BuildInfoStateService
@inject ISchedulerFactory _schedulerFactory
@implements IDisposable

<ContextMenu Id="tableContextMenu">
    @{
        var repo = context.Data as Repository;
        if (!repo.MasterClonned)
        {
            <Item OnClick="@CloneClickAsync">Clonar</Item>
        }
        else
        {
            <Item OnClick="@OpenClickAsync">Abrir</Item>
            <Item OnClick="@OpenInVSCodeClickAsync">Abrir no VS Code</Item>
        }

        if (!string.IsNullOrEmpty(repo.Pipeline?.Last?.ErrorLogs))
        {
            <Item OnClick="@OpenLogDetailsClick">Logs de Erro</Item>
        }

        <Item OnClick="@OpenSonarClickAsync">Sonar</Item>

        if (repo.Pipeline?.Last != null)
        {
            <Item OnClick="@OpenExternalRunClickAsync">Abrir Última Build</Item>
        }

        if (repo.Pipeline?.Last?.Commit != null)
        {
            <Item OnClick="@OpenExternalCommitClickAsync">Abrir Último Commit</Item>
        }
        else
        {
            <Item OnClick="@OpenRepositoryClickAsync">Abrir Repositório</Item>
        }

        <Item OnClick="@OpenAzureRepositoryClickAsync">Abrir Repositório Remoto</Item>
    }

    <Item OnClick="@DeleteClickAsync">Excluir</Item>
    <Item OnClick="@RefetchClickAsync">Recarregar</Item>
    <Item OnClick="@NavigateToPRCreation">Abrir PR</Item>
</ContextMenu>

<ContextMenu Id="branchContextMenu" OnAppearing="HandleBranchClick">
    @{if (loadingBranches)
        {
            <Item disabled="true">Carregando branches...</Item>
        }
        else
        {
            @foreach (var branch in remoteBranches)
            {
                <Item OnClick="@(async () => await CheckoutBranch(branch))">@branch</Item>
            }
        }}
</ContextMenu>

<CustomProgressBar IsLoading="@BuildInfoStateService.IsLoading" Value="@BuildInfoStateService.ProgressValue" Label="@BuildInfoStateService.ProgressLabel" />

<StickyFilter>
    <div class="mb-3 d-flex align-items-center">
        <input @ref="filterInputElement" type="text" id="filterInput" class="form-control me-2" @bind="BuildInfoStateService.Filter" @oninput="OnFilterChange" />
        <button class="btn btn-secondary me-2 text-nowrap" @onclick="ClearFilter">Limpar</button>

        @if (BuildInfoStateService.IsLoading)
        {
            <button class="btn btn-danger me-2 text-nowrap" @onclick="Cancel" style="display: block;">Cancelar</button>
        }
        else
        {
            <button class="btn btn-primary me-2 text-nowrap" @onclick="async () => await CloneAll()">Clonar TODOS</button>
            <button class="btn btn-primary me-2 text-nowrap" @onclick="async () => await PullAll()">Pull TODOS</button>
        }

        <button class="btn btn-primary me-2 text-nowrap" @onclick="async () => await OpenCloneInVSCode()">Abrir Pasta Clonada no VS CODE</button>
        <button class="btn btn-primary text-nowrap" @onclick="async () => await CloneAllCmd()">Script Clonar Todos</button>
    </div>
</StickyFilter>

<table class="table" style="vertical-align: middle;">
    <thead>
        <tr>
            <th>Status</th>
            <th>Projeto</th>
            <th>Pessoa</th>
            <th>Commit Details</th>
            <th>Próxima Atualização</th>
            <th>Pin</th>
        </tr>
    </thead>
    <tbody>
        <Virtualize Items="GetBuildInfos().ToList()" Context="buildInfo" TItem="Repository">
            <ContextMenuTrigger WrapperTag="tr" MenuId="tableContextMenu" Data="buildInfo" @ondblclick="async () => await OpenClickAsync(buildInfo)" style="vertical-align: middle;">
                <td>
                    <StatusIndicator CurrentStatus="GetStatusIndicator(buildInfo)" OnStatusClick="@((status) => OnStatusClickHandler(buildInfo, status))" />
                </td>
                <td class="truncate">
                    @(buildInfo.Path)
                </td>
                <td>@buildInfo.Pipeline?.Last?.Commit?.AuthorName</td>
                <td>
                    <div class="d-flex align-items-center gap-2">
                        <div class="position-relative">
                            <button class="btn btn-sm btn-outline-info"
                            @onclick="() => ShowCommitDetails(buildInfo)"
                            data-bs-toggle="tooltip"
                            title="View commit details">
                                <i class="bi bi-info-circle"></i>
                            </button>

                            @if (showModal && currentCommit == buildInfo.Pipeline?.Last?.Commit)
                            {
                                <div class="modal-backdrop" @onclick="HandleBackdropClick" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 999; background-color: transparent;"></div>
                                <div class="commit-modal position-absolute bg-white p-3 shadow rounded"
                                style="z-index: 1000; width: 600px; top: 30px; left: 0;">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6>Commit Details</h6>
                                        <button class="btn btn-sm btn-close" @onclick="() => CloseModal()"></button>
                                    </div>
                                    <div class="commit-message">
                                        @((MarkupString)buildInfo.Pipeline?.Last?.Commit.ToHtml(ConfigService.GetConfig()))
                                    </div>
                                </div>
                            }
                        </div>

                        <div class="d-flex flex-wrap gap-1">
                            <span class="badge bg-primary clickable-badge" @onclick="async () => await OpenClickAsync(buildInfo)">@buildInfo.ProjectType.Humanize().Transform(To.LowerCase, To.TitleCase)</span>
                            @if (!buildInfo.MasterClonned)
                            {
                                <span class="badge bg-danger clickable-badge" @onclick="async () => await CloneRepoAsync(buildInfo)">Não Clonado</span>
                            }

                            @if (buildInfo.MasterClonned && !string.IsNullOrEmpty(buildInfo.CurrentBranch))
                            {
                                <ContextMenuTrigger MenuId="branchContextMenu" Data="buildInfo" style="vertical-align: middle;" MouseButtonTrigger="MouseButtonTrigger.Left">
                                    <span class="badge bg-info clickable-badge">@buildInfo.CurrentBranch</span>
                                </ContextMenuTrigger>
                            }

                            @if (buildInfo.Pipeline?.Last?.Commit != null)
                            {
                                @foreach (var jiraCard in ExtractJiraCards(buildInfo.Pipeline.Last.Commit.CommitMessage))
                                {
                                    <span class="badge bg-success clickable-badge" @onclick="() => OpenJiraCard(jiraCard)">@jiraCard</span>
                                }

                                @foreach (var prNumber in ExtractPrNumbers(buildInfo.Pipeline.Last.Commit.CommitMessage))
                                {
                                    @if (!string.IsNullOrEmpty(buildInfo.Project) && !string.IsNullOrEmpty(buildInfo.Name))
                                    {
                                        <span class="badge bg-warning clickable-badge" @onclick="() => OpenPr(prNumber, buildInfo.Project, buildInfo.Name)">PR Commit @prNumber</span>
                                    }
                                }
                            }

                            @if (buildInfo.ActivePullRequests != null)
                            {
                                @foreach (var pr in buildInfo.ActivePullRequests)
                                {
                                    <span class="badge bg-secondary clickable-badge"
                                            @onclick="() => OpenPr(pr.Id.ToString(), buildInfo.Project, buildInfo.Name)"
                                            data-bs-toggle="tooltip"
                                            title="@($"{pr.Title} ({pr.SourceBranch} → {pr.TargetBranch})")">
                                        PR Ativo @pr.Id
                                    </span>
                                }
                            }
                        </div>
                    </div>
                </td>
                <td>@GetNextRunTime(buildInfo.Id)</td>
                <td>
                    <button class="btn btn-sm @(BuildInfoService.IsPinned(buildInfo) ? "btn-warning" : "btn-outline-warning")" @onclick="() => TogglePin(buildInfo)">
                        <i class="bi bi-pin-angle"></i>
                    </button>
                </td>
            </ContextMenuTrigger>
        </Virtualize>
    </tbody>
</table>

@code {
    private Subject<string> _searchEvents;
    private IDisposable _subscription;
    private ElementReference filterInputElement;
    private CancellationTokenSource _cancellationTokenSource;
    private Dictionary<Guid, string> _nextRunTimes = new();
    private bool loadingBranches = false;
    private string[] remoteBranches = Array.Empty<string>();
    private Repository currentBranchRepo;
    private Dictionary<Guid, int> _activePrCounts = new();

    private async Task LoadBranchesForRepo(Repository repo)
    {
        loadingBranches = true;
        currentBranchRepo = repo;
        var localPath = Path.Combine(BuildInfoService.GetLocalCloneFolder(), repo.Project, repo.Name);
        remoteBranches = (await BuildInfoService.GetRemoteBranches(localPath)).ToArray();
        loadingBranches = false;
        StateHasChanged();
    }

    private async Task CheckoutBranch(string branchName)
    {
        toastService.ShowInfo($"Checking out branch {branchName}...");

        var result = await BuildInfoService.CheckoutBranch(currentBranchRepo, branchName);
        if (result.Success)
        {
            toastService.ShowSuccess($"Switched to branch {branchName}");
            await ReloadById(currentBranchRepo.Id);
        }
        else
        {
            toastService.ShowError($"Failed to checkout branch {branchName}: {result.ErrorMessage}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        BuildInfoStateService.OnChange += () => InvokeAsync(StateHasChanged);
        BuildInfoStateService.Load();

        _searchEvents = new Subject<string>();

        _subscription = _searchEvents
            .Throttle(TimeSpan.FromMilliseconds(500))
            .Subscribe(async x =>
            {
                try
                {
                    BuildInfoStateService.IsLoading = true;
                    var infos = await BuildInfoService.GetBuildInfoAsync(x);
                    BuildInfoStateService.BuildInfos = infos;

                    // Fetch all next run times and PR counts at once
                    _nextRunTimes = new();
                    _activePrCounts = new();
                    var scheduler = await _schedulerFactory.GetScheduler();
                    var culture = new CultureInfo("pt-BR");

                    foreach (var info in infos)
                    {
                        try
                        {
                            var jobKey = new JobKey($"RepositoryUpdateJob-{info.Id}");
                            _activePrCounts[info.Id] = await BuildInfoService.GetActivePullRequestCountAsync(info.Id);
                            var triggers = await scheduler.GetTriggersOfJob(jobKey);

                            if (triggers != null && triggers.Any())
                            {
                                var nextRun = triggers.Min(t => t.GetNextFireTimeUtc());
                                _nextRunTimes[info.Id] = nextRun?.Humanize(culture: culture) ?? string.Empty;
                            }
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError(ex, "Error getting next run time for repository {RepositoryId}", info.Id);
                            _nextRunTimes[info.Id] = "Unknown";
                        }
                    }
                }
                finally
                {
                    BuildInfoStateService.IsLoading = false;
                }
            });

        BuildInfoStateService.InitializeState(x =>
        {
            _searchEvents.OnNext(BuildInfoStateService.Filter);
        }, !BuildInfoStateService.BuildInfos.Any());
    }

    private async Task ReloadById(Guid id)
    {
        if (BuildInfoStateService.BuildInfos != null && BuildInfoStateService.BuildInfos.Any(b => b.Id == id))
        {
            BuildInfoStateService.BuildInfos = await BuildInfoService.GetBuildInfoAsync(BuildInfoStateService.Filter);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await filterInputElement.FocusAsync();
        }
    }


    private async Task OnFilterChange(ChangeEventArgs e)
    {
        BuildInfoStateService.Filter = e.Value.ToString();
        _searchEvents.OnNext(BuildInfoStateService.Filter);
    }

    private async ValueTask CloneAll()
    {
        await BuildInfoService.CloneAllRepositoriesAsync();
        this.toastService.ShowSuccess("TODOS OS REPOSITÓRIOS FORAM CLONADOS");
    }

    private async ValueTask OpenCloneInVSCode()
    {
        BuildInfoService.OpenCloneFolderInVsCode();
    }

    private async ValueTask CloneAllCmd()
    {
        var cloneCommands = await BuildInfoService.GenerateCloneCommands();
        var fileName = "clone_all_tcp.cmd";
        await DownloadFile(fileName, cloneCommands);
    }

    private async Task DownloadFile(string fileName, string fileContent)
    {
        var byteArray = System.Text.Encoding.UTF8.GetBytes(fileContent);
        var base64Content = Convert.ToBase64String(byteArray);
        await JS.InvokeVoidAsync("downloadFile", fileName, base64Content);
    }

    private async Task ClearFilter()
    {
        BuildInfoStateService.Filter = string.Empty;
        await OnFilterChange(new ChangeEventArgs { Value = BuildInfoStateService.Filter });
        await filterInputElement.FocusAsync();
    }

    async Task CloneRepoAsync(Repository e)
    {
        this.toastService.ShowInfo("Clonando repositório");
        await BuildInfoService.CloneRepositoryByBuildInfoIdAsync(e.Id);
        await ReloadById(e.Id);
        this.toastService.ShowSuccess("Clonado");
    }

    async Task DeleteClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        await BuildInfoService.Delete(repo.Id);
    }

    async Task CloneClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        await CloneRepoAsync(repo);
    }

    async Task OpenClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        await OpenClickAsync(repo);
    }

    async Task OpenClickAsync(Repository e)
    {
        if (!e.MasterClonned)
        {
            await CloneRepoAsync(e);
        }

        await BuildInfoService.OpenProjectByBuildInfoIdAsync(e.Id);
    }

    async Task RefetchClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        await BuildInfoService.FetchRepoBuildInfoAsync(repo.Id, true);
        await ReloadById(repo.Id);
    }

    async Task OpenExternalCommitClickAsync(ItemClickEventArgs e)
    {
        this.toastService.ShowInfo("Atualizando informações da pipeline");
        var repo = e.Data as Repository;
        repo = await BuildInfoService.FetchRepoBuildInfoAsync(repo.Id);
        await ReloadById(repo.Id);

        var url = repo.Pipeline.Last.Commit.Url;
        OpenFolderUtils.OpenUrl(url);
    }

    async Task OpenRepositoryClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        var url = repo.Url;
        OpenFolderUtils.OpenUrl(url);
    }


async Task OpenAzureRepositoryClickAsync(ItemClickEventArgs e)
{
    var repo = e.Data as Repository;
    var url = repo.Url; // Assuming repo.Url is the Azure DevOps repository URL
    OpenFolderUtils.OpenUrl(url);
}

async Task OpenExternalRunClickAsync(ItemClickEventArgs e)
{
    this.toastService.ShowInfo("Atualizando informações da pipeline");
    var repo = e.Data as Repository;
    repo = await BuildInfoService.FetchRepoBuildInfoAsync(repo.Id);
    await ReloadById(repo.Id);

    var url = repo.Pipeline.Last.Url;
    OpenFolderUtils.OpenUrl(url);
}
    async Task OpenSonarClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        var url = $"https://sonarcloud.io/project/branches_list?id={repo.Project.Replace('.', '-')}-{repo.Name.Replace('.', '-')}";
        OpenFolderUtils.OpenUrl(url);
    }

    void OpenLogDetailsClick(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        NavigationManager.NavigateTo($"/logdetails/{repo.Id}");
    }

    void NavigateToPRCreation(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        BuildInfoService.NavigateToPRCreation(repo);
    }

    private async Task OnStatusClickHandler(Repository repo, Status status)
    {
        if (repo == null)
        {
            toastService.ShowError("Repositório não encontrado.");
            return;
        }

        if (repo.Pipeline != null && repo.Pipeline.Last != null && !string.IsNullOrEmpty(repo.Pipeline.Last.Url))
        {
            var url = repo.Pipeline.Last.Url;
            OpenFolderUtils.OpenUrl(url);
        }
        else if (!string.IsNullOrEmpty(repo.Url))
        {
            OpenFolderUtils.OpenUrl(repo.Url);
        }
        else
        {
            toastService.ShowError("URL do repositório não encontrada.");
        }
    }

    private StatusIndicator.Status GetStatusIndicator(Repository repo)
    {
        if (repo.Pipeline?.Last == null)
            return StatusIndicator.Status.None;

        return repo.Pipeline.Last.Status switch
        {
            "NotStarted" or "InProgress" => StatusIndicator.Status.Working,
            _ when repo.Pipeline.Last.Result == "Succeeded" => StatusIndicator.Status.Success,
            _ when repo.Pipeline.Last.Result == "Failed" => StatusIndicator.Status.Error,
            _ => StatusIndicator.Status.Unknown,
        };
    }

    private async Task TogglePin(Repository repo)
    {
        await BuildInfoService.TogglePin(repo);
    }

    private IEnumerable<Repository> GetBuildInfos()
    {
        if (string.IsNullOrEmpty(BuildInfoStateService.Filter))
        {
            return BuildInfoStateService.BuildInfos?.OrderByDescending(x => BuildInfoService.IsPinned(x)).ToList() ?? new List<Repository>();
        }
        return BuildInfoStateService.BuildInfos ?? new List<Repository>();
    }

    private bool showModal = false;
    private Commit currentCommit;

    private string GetNextRunTime(Guid repositoryId)
    {
        return _nextRunTimes.TryGetValue(repositoryId, out var time) ? time : string.Empty;
    }

    private int GetActivePrCount(Guid repositoryId)
    {
        return _activePrCounts.TryGetValue(repositoryId, out var count) ? count : 0;
    }

    private void ShowCommitDetails(Repository buildInfo)
    {
        currentCommit = buildInfo.Pipeline?.Last?.Commit;
        showModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        showModal = false;
        StateHasChanged();
    }

    private async Task HandleBranchClick(MenuAppearingEventArgs e)
    {
        try
        {
            remoteBranches = [];
            var repo = e.Data as Repository;
            loadingBranches = true;
            currentBranchRepo = repo;
            remoteBranches = (await BuildInfoService.GetRemoteBranches(
                Path.Combine(BuildInfoService.GetLocalCloneFolder(), repo.Project, repo.Name)))
                .ToArray();
        }
        catch(Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            loadingBranches = false;
            StateHasChanged();
        }
    }

    private void HandleBackdropClick()
    {
        CloseModal();
    }

    private void OpenJiraCard(string jiraCardID)
    {
        if (!string.IsNullOrEmpty(jiraCardID))
        {
            var url = $"https://terminalcp.atlassian.net/browse/{jiraCardID}";
            OpenFolderUtils.OpenUrl(url);
            toastService.ShowSuccess($"Opening Jira card {jiraCardID}!");
        }
    }

    private void OpenPr(string prNumber, string projectName, string repoName)
    {
        if (!string.IsNullOrEmpty(prNumber))
        {
            var config = ConfigService.GetConfig();
            var url = $"{config.OrganizationUrl}/{projectName}/_git/{repoName}/pullrequest/{prNumber}";
            OpenFolderUtils.OpenUrl(url);
            toastService.ShowSuccess($"Opening PR #{prNumber}!");
        }
    }

    public void Dispose()
    {
        _subscription?.Dispose();
        _cancellationTokenSource?.Dispose(); // Dispose CancellationTokenSource
        BuildInfoStateService.OnChange -= () => InvokeAsync(StateHasChanged);
        BuildInfoStateService.Save();
    }

    private async Task OpenInVSCodeClickAsync(ItemClickEventArgs e)
    {
        var repo = e.Data as Repository;
        BuildInfoService.OpenRepoInVsCode(repo);
    }

    private async Task PullAll()
    {
        _cancellationTokenSource = new CancellationTokenSource();
        var cancellationToken = _cancellationTokenSource.Token;

        BuildInfoStateService.IsLoading = true;
        BuildInfoStateService.ProgressValue = 0;
        BuildInfoStateService.ProgressLabel = "Starting pull...";

        try
        {
            var result = await BuildInfoService.PullAllRepositoriesAsync(
                async (value, label) =>
                {
                    BuildInfoStateService.ProgressValue = value;
                    BuildInfoStateService.ProgressLabel = label;
                },
                cancellationToken);

            if (result.Failed > 0)
            {
                toastService.ShowWarning($"Pull completed with {result.Successful} successful and {result.Failed} failed repositories.");
            }
            else
            {
                toastService.ShowSuccess($"Pull completed successfully for {result.Successful} repositories.");
            }
        }
        catch (OperationCanceledException)
        {
            toastService.ShowInfo("Pull operation canceled.");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error during pull all: {ex.Message}");
            _logger.LogError(ex, "PullAll error");
        }
        finally
        {
            BuildInfoStateService.IsLoading = false;
            BuildInfoStateService.ProgressValue = null;
            BuildInfoStateService.ProgressLabel = string.Empty;
            _cancellationTokenSource?.Dispose();
            _cancellationTokenSource = null;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void Cancel()
    {
        _cancellationTokenSource?.Cancel();
    }
}
