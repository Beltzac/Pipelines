@page "/codesearch"
@using System.Reactive.Linq
@using System.Reactive.Subjects
@using Common.Services
@using Common.Services.Interfaces
@using Common.Utils
@inject IRepositoryService RepositoryService
@inject ToastService toastService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IConfigurationService ConfigService
@inject ILogger<CodeSearch> _logger
@inject CodeSearchStateService CodeSearchStateService
@inject TextFileProcessor TextFileProcessor
@inject CodeSearchService CodeSearchService
@implements IDisposable

<h3>Code Search</h3>

<CustomProgressBar IsLoading="@CodeSearchStateService.IsLoading" Label="@CodeSearchStateService.ProgressLabel" />
<div class="row mb-3">
    <div class="col-md-12">
        <StickyFilter>
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search code..."
                       @bind-value="CodeSearchStateService.SearchQuery"
                       @bind-value:event="oninput"
                       @onkeyup="OnSearchQueryChange" />
                <button class="btn btn-primary" @onclick="SearchCode">Search</button>
            </div>
        </StickyFilter>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5>Code Search</h5>
            </div>
            <div class="card-body">
                @if (searchResults != null && searchResults.Any())
                {
                    <div class="search-results mt-3">
                        <h5>Search Results (@searchResults.Count)</h5>

                        @foreach (var result in searchResults)
                        {
                            <div class="card mb-3">
                                <div class="card-header d-flex justify-content-between align-items-center bg-light">
                                    <div>
                                        <strong class="text-primary">@result.FileName</strong>
                                        <small class="text-muted ms-2">@result.ShortenedPath</small>
                                    </div>
                                    <span class="badge bg-primary">@(result.Similarity.ToString("P1"))</span>
                                </div>
                                <div class="card-body">
                                    <pre class="code-snippet p-3 bg-light rounded"><code>@result.ChunkText</code></pre>
                                    <div class="mt-2 text-end">
                                        <button class="btn btn-sm btn-outline-secondary"
                                                @onclick="() => CopyToClipboard(result.ChunkText)">Copy</button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (searchResults != null)
                {
                    <div class="alert alert-warning mt-3">
                        No results found. Try a different search query or index more
                        repositories.
                    </div>
                }
                else if (isSearching)
                {
                    <div class="alert alert-info mt-3">Searching...</div>
                }
            </div>
        </div>
    </div>
</div>

<div class="row mb-4 mt-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5>Repositories</h5>
            </div>
            <div class="mb-3 d-flex align-items-center">
                <input @ref="filterInputElement" type="text" id="filterInput" class="form-control me-2"
                       @oninput="OnFilterChange" placeholder="Filter repositories..." />
                <button class="btn btn-secondary me-2 text-nowrap" @onclick="ClearFilter">Clear</button>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Project</th>
                                <th>Name</th>
                                <th>Type</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var repo in GetRepositories())
                            {
                                <tr @onclick="() => SelectRepository(repo)" class="cursor-pointer">
                                    <td>@repo.Project</td>
                                    <td>@repo.Name</td>
                                    <td>@repo.ProjectType</td>
                                    <td>
                                        <button class="btn btn-primary btn-sm"
                                                @onclick="() => IndexRepository(repo)">
                                            Index
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Subject<string> _filterEvents;
    private Subject<string> _searchQueryEvents;
    private IDisposable _subscription;
    private IDisposable _searchSubscription;
    private ElementReference filterInputElement;
    private List<SearchResult> searchResults = null;
    private bool isSearching = false;

    protected override async Task OnInitializedAsync()
    {
        CodeSearchStateService.OnChange += () => InvokeAsync(StateHasChanged);
        CodeSearchStateService.Load();

        _filterEvents = new Subject<string>();

        _subscription = _filterEvents
        .Throttle(TimeSpan.FromMilliseconds(500))
        .Subscribe(async x =>
        {
            try
            {
                CodeSearchStateService.IsLoading = true;
                var repos = await RepositoryService.GetBuildInfoAsync(x);
                CodeSearchStateService.Repositories = repos;
            }
            finally
            {
                CodeSearchStateService.IsLoading = false;
            }
        });

        _searchQueryEvents = new Subject<string>();
        _searchSubscription = _searchQueryEvents
        .Throttle(TimeSpan.FromMilliseconds(800))
        .Subscribe(async query =>
        {
            if (!string.IsNullOrWhiteSpace(query) && query.Length >= 3)
            {
                await InvokeAsync(() =>
                {
                    isSearching = true;
                    StateHasChanged();
                });
                await SearchCode();
            }
        });

        CodeSearchStateService.InitializeState(x =>
        {
            _filterEvents.OnNext(CodeSearchStateService.Filter);
        }, !CodeSearchStateService.Repositories.Any());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await filterInputElement.FocusAsync();
        }
    }

    private async Task OnFilterChange(ChangeEventArgs e)
    {
        CodeSearchStateService.Filter = e.Value.ToString();
        _filterEvents.OnNext(CodeSearchStateService.Filter);
    }

    private void OnSearchQueryChange(KeyboardEventArgs e)
    {
        if (e.Key != "Escape")
            _searchQueryEvents.OnNext(CodeSearchStateService.SearchQuery);
    }

    private async Task ClearFilter()
    {
        CodeSearchStateService.Filter = string.Empty;
        _filterEvents.OnNext(CodeSearchStateService.Filter);
        await filterInputElement.FocusAsync();
    }

    private IEnumerable<Repository> GetRepositories()
    {
        return CodeSearchStateService.Repositories ?? new List<Repository>();
    }

    private void SelectRepository(Repository repo)
    {
        CodeSearchStateService.SelectedRepositoryId = repo.Id.ToString();
        toastService.ShowInfo($"Selected repository: {repo.Path}");
    }

    private async Task IndexRepository(Repository repo)
    {
        try
        {
            CodeSearchStateService.IsLoading = true;
            CodeSearchStateService.ProgressLabel = $"Indexing {repo.Path}...";

            var localPath = Path.Combine(ConfigService.GetConfig().LocalCloneFolder, repo.Project, repo.Name);

            if (!Directory.Exists(localPath))
            {
                toastService.ShowWarning($"Repository not cloned. Cloning {repo.Path}...");
                await RepositoryService.CloneRepositoryByBuildInfoAsync(repo);
            }

            if (Directory.Exists(localPath))
            {
                TextFileProcessor.ProcessFolder(localPath);
                toastService.ShowSuccess($"Repository {repo.Path} indexed successfully");
            }
            else
            {
                toastService.ShowError($"Failed to clone or find repository at {localPath}");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error indexing repository {repo.Path}");
            toastService.ShowError($"Error indexing repository: {ex.Message}");
        }
        finally
        {
            CodeSearchStateService.IsLoading = false;
            CodeSearchStateService.ProgressLabel = string.Empty;
        }
    }

    public async Task SearchCode()
    {
        if (string.IsNullOrWhiteSpace(CodeSearchStateService.SearchQuery))
        {
            toastService.ShowWarning("Please enter a search query");
            return;
        }

        try
        {
            isSearching = true;
            searchResults = await CodeSearchService.SearchCodeAsync(CodeSearchStateService.SearchQuery);
            toastService.ShowSuccess($"Found {searchResults.Count} results");
        }
        finally
        {
            isSearching = false;
        }
    }

    private async Task CopyToClipboard(string text)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
        toastService.ShowInfo("Code copied to clipboard");
    }

    public void Dispose()
    {
        CodeSearchStateService.OnChange -= () => InvokeAsync(StateHasChanged);
        CodeSearchStateService.Save();
        _subscription?.Dispose();
        _searchSubscription?.Dispose();
    }
}

<style>.cursor-pointer { cursor: pointer; }</style>