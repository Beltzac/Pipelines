@page "/config-manager"
@using Common.Models
@using Common.Services
@using Common.Services.Interfaces
@using Quartz
@inject IConfigurationService ConfigService
@inject ToastService ToastService
@inject IOracleSchemaService OracleService
@inject IJSRuntime JSRuntime
@inject ISchedulerFactory SchedulerFactory
@inject IJiraService JiraService

<div class="container-fluid pb-5">
    <h3 class="mb-4">Gerenciador de Configurações</h3>

    <EditForm Model="@config" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <!-- Left Column -->
            <div class="col-md-6">
                <!-- Configuration Import/Export -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Importar/Exportar Configurações</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex gap-2">
                            <button type="button" class="btn" @onclick="ExportConfiguration">
                                <i class="fas fa-download"></i> Exportar Configuração
                            </button>
                            <button type="button" class="btn" @onclick="ImportConfiguration">
                                <i class="fas fa-upload"></i> Importar Configuração
                            </button>
                            <InputFile hidden OnChange="LoadFiles" id="importFile" accept=".json" />
                        </div>
                    </div>
                </div>

                <!-- User and Organization Settings -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Configurações Básicas</h5>
                    </div>
                    <div class="card-body">
                        <h6 class="card-subtitle mb-3">Configuração do Usuário</h6>
                        <div class="mb-3">
                            <label for="tcpUserName" class="form-label">Nome de Usuário TCP</label>
                            <InputText id="tcpUserName" @bind-Value="config.TcpUserName" class="form-control" />
                            <ValidationMessage For="@(() => config.TcpUserName)" />
                        </div>
                        <div class="mb-3">
                            <label for="username" class="form-label">Nome de Usuário Azure</label>
                            <InputText id="username" @bind-Value="config.Username" class="form-control" />
                            <ValidationMessage For="@(() => config.Username)" />
                        </div>
                        <div class="mb-3">
                            <label for="pat" class="form-label">Token de Acesso Pessoal (PAT)</label>
                            <InputText id="pat" @bind-Value="config.PAT" class="form-control" />
                            <ValidationMessage For="@(() => config.PAT)" />
                        </div>

                        <hr class="my-4" />

                        <h6 class="card-subtitle mb-3">Configuração da Organização</h6>
                        <div class="mb-3">
                            <label for="orgUrl" class="form-label">URL da Organização</label>
                            <InputText id="orgUrl" @bind-Value="config.OrganizationUrl" class="form-control" />
                            <ValidationMessage For="@(() => config.OrganizationUrl)" />
                        </div>

                        <hr class="my-4" />
                        <h6 class="card-subtitle mb-3">Configurações Locais</h6>
                        <div class="mb-3">
                            <label for="cloneFolder" class="form-label">Pasta Local para Clones</label>
                            <InputText id="cloneFolder" @bind-Value="config.LocalCloneFolder" class="form-control" />
                            <ValidationMessage For="@(() => config.LocalCloneFolder)" />
                        </div>
                        <div class="mb-3">
                            <label for="androidStudioPath" class="form-label">Caminho do Android Studio</label>
                            <InputText id="androidStudioPath" @bind-Value="config.AndroidStudioPath"
                                class="form-control" />
                            <ValidationMessage For="@(() => config.AndroidStudioPath)" />
                        </div>
                        <div class="mb-3">
                            <label for="visualStudioPath" class="form-label">Caminho do Visual Studio</label>
                            <InputText id="visualStudioPath" @bind-Value="config.VisualStudioPath"
                                class="form-control" />
                            <ValidationMessage For="@(() => config.VisualStudioPath)" />
                        </div>
                        <div class="mb-3">
                            <label for="vscodePath" class="form-label">Caminho do VS Code</label>
                            <InputText id="vscodePath" @bind-Value="config.VSCodePath" class="form-control" />
                            <ValidationMessage For="@(() => config.VSCodePath)" />
                        </div>

                        <div class="mb-3">
                            <label for="minUpdateTime" class="form-label">Tempo Mínimo Entre Atualizações (segundos)</label>
                            <InputNumber id="minUpdateTime" @bind-Value="config.MinUpdateTime" class="form-control" />
                            <ValidationMessage For="@(() => config.MinUpdateTime)" />
                        </div>

                        <div class="mb-3">
                            <label for="maxUpdateTime" class="form-label">Tempo Máximo Entre Atualizações (segundos)</label>
                            <InputNumber id="maxUpdateTime" @bind-Value="config.MaxUpdateTime" class="form-control" />
                            <ValidationMessage For="@(() => config.MaxUpdateTime)" />
                        </div>
                    </div>
                </div>

                <!-- GitHub Settings -->
                @*                 <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Configuração do GitHub</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="githubToken" class="form-label">Token do GitHub</label>
                            <InputText id="githubToken" @bind-Value="config.AccessToken" class="form-control"/>
                            <ValidationMessage For="@(() => config.AccessToken)" />
                        </div>
                    </div>
                </div> *@

                <!-- Tempo API Configuration -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Configuração Tempo API</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="tempoApiToken" class="form-label">Tempo API Token</label>
                            <InputText id="tempoApiToken" @bind-Value="config.TempoConfig.ApiToken" class="form-control" />
                            <ValidationMessage For="@(() => config.TempoConfig.ApiToken)" />
                            <small class="form-text text-muted">Token de acesso para a API do Tempo (JIRA)</small>
                        </div>
                        <div class="mb-3">
                            <label for="tempoBaseUrl" class="form-label">Tempo Base URL</label>
                            <InputText id="tempoBaseUrl" @bind-Value="config.TempoConfig.BaseUrl" class="form-control" />
                            <ValidationMessage For="@(() => config.TempoConfig.BaseUrl)" />
                            <small class="form-text text-muted">URL base da API do Tempo (ex: https://api.tempo.io/core/3)</small>
                        </div>
                        <div class="mb-3">
                            <label for="tempoAccountId" class="form-label">Account ID</label>
                            <InputText id="tempoAccountId" @bind-Value="config.TempoConfig.AccountId" class="form-control" />
                            <ValidationMessage For="@(() => config.TempoConfig.AccountId)" />
                            <small class="form-text text-muted">ID da conta do Tempo para criar worklogs</small>
                        </div>
                        <button type="button" class="btn btn-outline-primary" @onclick="TestTempoConnection">
                            <i class="fas fa-plug"></i> Testar Conexão
                        </button>
                    </div>
                </div>
                <!-- Jira API Configuration -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Configuração Jira API</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="jiraEmail" class="form-label">Email Jira</label>
                            <InputText id="jiraEmail" @bind-Value="config.JiraConfig.Email" class="form-control" />
                            <ValidationMessage For="@(() => config.JiraConfig.Email)" />
                            <small class="form-text text-muted">Email da conta Jira para autenticação</small>
                        </div>
                        <div class="mb-3">
                            <label for="jiraApiToken" class="form-label">Jira API Token</label>
                            <InputText id="jiraApiToken" @bind-Value="config.JiraConfig.ApiToken" class="form-control" />
                            <ValidationMessage For="@(() => config.JiraConfig.ApiToken)" />
                            <small class="form-text text-muted">Token de API do Jira (gerado em https://id.atlassian.com/manage-profile/security/api-tokens)</small>
                        </div>
                        <div class="mb-3">
                            <label for="jiraBaseUrl" class="form-label">Jira Base URL</label>
                            <InputText id="jiraBaseUrl" @bind-Value="config.JiraConfig.BaseUrl" class="form-control" />
                            <ValidationMessage For="@(() => config.JiraConfig.BaseUrl)" />
                            <small class="form-text text-muted">URL base do Jira (ex: https://your-domain.atlassian.net)</small>
                        </div>
                        <button type="button" class="btn btn-outline-primary" @onclick="TestJiraConnection">
                            <i class="fas fa-plug"></i> Testar Conexão
                        </button>
                    </div>
                </div>


                <!-- Repository Ignore Rules -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Regras de Ignorar Repositórios</h5>
                    </div>
                    <div class="card-body">
                        @for (int i = 0; i < config.IgnoreRepositoriesRegex.Count; i++)
                        {
                            var index = i;
                            <div class="input-group mb-2">
                                <InputText @bind-Value="config.IgnoreRepositoriesRegex[index]" class="form-control"
                                    placeholder="Enter regex pattern" />
                                <button type="button" class="btn" @onclick="() => RemoveRegex(index)">
                                    <i class="fas fa-trash"></i> Remover
                                </button>
                            </div>
                        }
                        <button type="button" class="btn" @onclick="AddRegex">
                            <i class="fas fa-plus"></i> Adicionar Padrão
                        </button>
                    </div>

                    <!-- Route Domains Manager -->
                    <RouteDomainManager Config="config" OnConfigChanged="StateHasChanged" />
                </div>

                <!-- Backup Jobs Configuration -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Configuração de Jobs de Backup</h5>
                    </div>
                    <div class="card-body">
                        <!-- Backup Repositories -->
                        <div class="mb-4">
                            <h6 class="card-subtitle mb-3">Repositórios de Backup</h6>
                            <div class="mb-3">
                                <label for="oracleBackupRepo" class="form-label">Caminho do Backup Oracle</label>
                                <InputText id="oracleBackupRepo" @bind-Value="config.OracleViewsBackupRepo"
                                    class="form-control" />
                                <ValidationMessage For="@(() => config.OracleViewsBackupRepo)" />
                            </div>
                            <div class="mb-3">
                                <label for="consulBackupRepo" class="form-label">Caminho do Backup Consul</label>
                                <InputText id="consulBackupRepo" @bind-Value="config.ConsulBackupRepo"
                                    class="form-control" />
                                <ValidationMessage For="@(() => config.ConsulBackupRepo)" />
                            </div>
                        </div>
                        <!-- Oracle Backup Job -->
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <div class="form-check form-switch">
                                <InputCheckbox class="form-check-input" @bind-Value="config.EnableOracleBackupJob"
                                    id="oracleBackupToggle" />
                                <label class="form-check-label" for="oracleBackupToggle">
                                    Ativar Backup Automático de Views Oracle
                                </label>
                            </div>
                            <button type="button" class="btn" @onclick="RunOracleBackupNow">
                                <i class="fas fa-play"></i> Executar Agora
                            </button>
                        </div>

                        <!-- Consul Backup Job -->
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="form-check form-switch">
                                <InputCheckbox class="form-check-input" @bind-Value="config.EnableConsulBackupJob"
                                    id="consulBackupToggle" />
                                <label class="form-check-label" for="consulBackupToggle">
                                    Ativar Backup Automático do Consul
                                </label>
                            </div>
                            <button type="button" class="btn btn-outline-primary" @onclick="RunConsulBackupNow">
                                <i class="fas fa-play"></i> Executar Agora
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column -->
            <div class="col-md-6">
                <!-- Consul Environments -->
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Ambientes Consul</h5>
                        <button type="button" class="btn btn-sm" @onclick="AddConsulEnvironment">
                            <i class="fas fa-plus"></i> Adicionar Ambiente
                        </button>
                    </div>
                    <div class="card-body">
                        @foreach (var env in config.ConsulEnvironments)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">Nome do Ambiente</label>
                                        <InputText @bind-Value="env.Name" class="form-control" />
                                        <ValidationMessage For="@(() => env.Name)" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Consul URL</label>
                                        <InputText @bind-Value="env.ConsulUrl" class="form-control" />
                                        <ValidationMessage For="@(() => env.ConsulUrl)" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Consul Folder</label>
                                        <InputText @bind-Value="env.ConsulFolder" class="form-control" />
                                        <ValidationMessage For="@(() => env.ConsulFolder)" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Consul Token</label>
                                        <InputText @bind-Value="env.ConsulToken" class="form-control" />
                                        <ValidationMessage For="@(() => env.ConsulToken)" />
                                    </div>
                                    <button type="button" class="btn"
                                        @onclick="() => RemoveConsulEnvironment(env)">
                                        <i class="fas fa-trash"></i> Remover
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Oracle Environments -->
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Ambientes Oracle</h5>
                        <button type="button" class="btn btn-sm" @onclick="AddOracleEnvironment">
                            <i class="fas fa-plus"></i> Adicionar Ambiente
                        </button>
                    </div>
                    <div class="card-body">
                        @foreach (var env in config.OracleEnvironments)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">Nome</label>
                                        <InputText @bind-Value="env.Name" class="form-control" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">String de Conexão</label>
                                        <InputText @bind-Value="env.ConnectionString" class="form-control" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Esquema</label>
                                        <InputText @bind-Value="env.Schema" class="form-control" />
                                    </div>
                                    <div class="d-flex gap-2">
                                        <button type="button" class="btn"
                                            @onclick="() => RemoveOracleEnvironment(env)">
                                            <i class="fas fa-trash"></i> Remover
                                        </button>
                                        <button type="button" class="btn"
                                            @onclick="() => TestOracleConnection(env)">
                                            <i class="fas fa-plug"></i> Testar Conexão
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- ESB Servers -->
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Servidores ESB</h5>
                        <button type="button" class="btn btn-sm" @onclick="AddEsbServer">
                            <i class="fas fa-plus"></i> Adicionar Servidor
                        </button>
                    </div>
                    <div class="card-body">
                        @foreach (var server in config.EsbServers)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">Nome do Servidor</label>
                                        <InputText @bind-Value="server.Name" class="form-control" />
                                        <ValidationMessage For="@(() => server.Name)" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">URL</label>
                                        <InputText @bind-Value="server.Url" class="form-control" />
                                        <ValidationMessage For="@(() => server.Url)" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Usuário</label>
                                        <InputText @bind-Value="server.Username" class="form-control" />
                                        <ValidationMessage For="@(() => server.Username)" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Senha</label>
                                        <InputText type="password" @bind-Value="server.Password" class="form-control" />
                                        <ValidationMessage For="@(() => server.Password)" />
                                    </div>
                                    <button type="button" class="btn"
                                        @onclick="() => RemoveEsbServer(server)">
                                        <i class="fas fa-trash"></i> Remover
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- MongoDB Environments -->
                <div class="card mb-4">
                    <div
                        class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Ambientes MongoDB</h5>
                        <button type="button" class="btn btn-sm" @onclick="AddMongoEnvironment">
                            <i class="fas fa-plus"></i> Adicionar Ambiente
                        </button>
                    </div>
                    <div class="card-body">
                        @foreach (var env in config.MongoEnvironments)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">Nome do Ambiente</label>
                                        <InputText @bind-Value="env.Name" class="form-control" />
                                        <ValidationMessage For="@(() => env.Name)" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Connection String</label>
                                        <InputText @bind-Value="env.ConnectionString" class="form-control" />
                                        <ValidationMessage For="@(() => env.ConnectionString)" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Nome do Banco de Dados</label>
                                        <InputText @bind-Value="env.DatabaseName" class="form-control" />
                                        <ValidationMessage For="@(() => env.DatabaseName)" />
                                    </div>
                                    <button type="button" class="btn"
                                        @onclick="() => RemoveMongoEnvironment(env)">
                                        <i class="fas fa-trash"></i> Remover
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="position-fixed bottom-0 end-0 p-4" style="z-index: 1030;">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save"></i> Salvar Configuração
            </button>
        </div>
    </EditForm>
</div>

@code {
    private ConfigModel config = new ConfigModel();

    protected override void OnInitialized()
    {
        config = ConfigService.GetConfig();
        // Ensure TempoConfig is initialized
        if (config.TempoConfig == null)
        {
            config.TempoConfig = new TempoConfiguration();
        }
        // Ensure JiraConfig is initialized
        if (config.JiraConfig == null)
        {
            config.JiraConfig = new JiraConfiguration();
        }
        // Ensure EsbServers is initialized
        if (config.EsbServers == null)
        {
            config.EsbServers = new List<EsbServerConfig>();
        }
        Common.Utils.RepositoryExtensions.MinUpdateTime = config.MinUpdateTime;
        Common.Utils.RepositoryExtensions.MaxUpdateTime = config.MaxUpdateTime;
    }

    private string? selectedConsulEnv;

    private void AddConsulEnvironment()
    {
        config.ConsulEnvironments.Add(new ConsulEnvironment());
    }

    private void RemoveConsulEnvironment(ConsulEnvironment env)
    {
        config.ConsulEnvironments.Remove(env);
    }

    private void AddRegex()
    {
        config.IgnoreRepositoriesRegex.Add(string.Empty);
    }

    private void RemoveRegex(int index)
    {
        if (index >= 0 && index < config.IgnoreRepositoriesRegex.Count)
        {
            config.IgnoreRepositoriesRegex.RemoveAt(index);
        }
    }

    private void AddOracleEnvironment()
    {
        config.OracleEnvironments.Add(new OracleEnvironment());
    }

    private void RemoveOracleEnvironment(OracleEnvironment env)
    {
        config.OracleEnvironments.Remove(env);
    }

    private void AddMongoEnvironment()
    {
        config.MongoEnvironments.Add(new MongoEnvironment());
    }

    private void RemoveMongoEnvironment(MongoEnvironment env)
    {
        config.MongoEnvironments.Remove(env);
    }

    private void AddEsbServer()
    {
        config.EsbServers.Add(new EsbServerConfig());
    }

    private void RemoveEsbServer(EsbServerConfig server)
    {
        config.EsbServers.Remove(server);
    }

    private async Task TestOracleConnection(OracleEnvironment env)
    {
        try
        {
            var result = await OracleService.TestConnectionAsync(env.ConnectionString, env.Schema);
            if (result)
            {
                ToastService.ShowSuccess("Teste de conexão bem-sucedido");
            }
            else
            {
                ToastService.ShowError("Teste de conexão falhou");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Teste de conexão falhou: {ex.Message}");
        }
    }

    private async Task ExportConfiguration()
    {
        try
        {
            var configJson = ConfigService.ExportConfig();
            var fileName = $"config-export-{DateTime.Now:yyyy-MM-dd-HH-mm-ss}.json";
            await DownloadFile(fileName, configJson);
            ToastService.ShowSuccess("Configuração exportada com sucesso");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Falha ao exportar configuração: {ex.Message}");
        }
    }

    private async Task DownloadFile(string fileName, string fileContent)
    {
        var byteArray = System.Text.Encoding.UTF8.GetBytes(fileContent);
        var base64Content = Convert.ToBase64String(byteArray);
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64Content);
    }
    private async Task TestJiraConnection()
    {
        try
        {
            // Use the JiraService to test the connection
            var logger = new Microsoft.Extensions.Logging.Abstractions.NullLogger<JiraService>();
            var httpClient = new HttpClient();
            var jiraService = new JiraService(httpClient, ConfigService, logger);
            var isConnected = await jiraService.TestConnectionAsync();

            if (isConnected)
    {
                ToastService.ShowSuccess("Conexão com Jira bem-sucedida");
    }
            else
            {
                ToastService.ShowError("Falha na conexão com Jira");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Falha na conexão com Jira: {ex.Message}");
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            using var stream = e.File.OpenReadStream();

            StreamReader reader = new StreamReader(stream, System.Text.Encoding.UTF8);
            var jsonConfig = await reader.ReadToEndAsync();

            await ConfigService.ImportConfigAsync(jsonConfig);
            config = ConfigService.GetConfig();

            await AfterSaveAsync();

            Common.Utils.RepositoryExtensions.MinUpdateTime = config.MinUpdateTime;
            Common.Utils.RepositoryExtensions.MaxUpdateTime = config.MaxUpdateTime;

                ToastService.ShowSuccess("Configuração importada com sucesso");
            }
        catch (ArgumentException ex)
        {
            ToastService.ShowError($"Arquivo de configuração inválido: {ex.Message}");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Falha ao importar configuração: {ex.Message}");
        }
    }

    private async Task ImportConfiguration()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('importFile').click()");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Validate Oracle environments
            var invalidOracleEnvs = config.OracleEnvironments.Where(e =>
            string.IsNullOrWhiteSpace(e.Name) ||
            string.IsNullOrWhiteSpace(e.ConnectionString) ||
            string.IsNullOrWhiteSpace(e.Schema)).ToList();

            if (invalidOracleEnvs.Any())
            {
                ToastService.ShowError("Todos os campos são obrigatórios para ambientes Oracle");
                return;
            }

            // Check for duplicate Oracle environment names
            if (config.OracleEnvironments.GroupBy(e => e.Name).Any(g => g.Count() > 1))
            {
                ToastService.ShowError("Os nomes dos ambientes Oracle devem ser únicos");
                return;
            }

            await ConfigService.SaveConfigAsync(config);
            await AfterSaveAsync();

            ToastService.ShowSuccess("Configuração salva com sucesso!");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erro ao salvar configuração: {ex.Message}");
        }
    }

    private async Task AfterSaveAsync()
    {
        Common.Utils.RepositoryExtensions.MinUpdateTime = config.MinUpdateTime;
        Common.Utils.RepositoryExtensions.MaxUpdateTime = config.MaxUpdateTime;

        if (!string.IsNullOrEmpty(config.PAT))
        {
            var scheduler = await SchedulerFactory.GetScheduler();
            var jobKey = new JobKey("BuildInfoJob");
            await scheduler.TriggerJob(jobKey);
        }
    }

    private void OnConsulEnvironmentSelected(ChangeEventArgs e)
    {
        selectedConsulEnv = e.Value?.ToString();
    }

    private async Task RunOracleBackupNow()
    {
        try
        {
            var scheduler = await SchedulerFactory.GetScheduler();
            var jobKey = new JobKey("OracleViewsBackupJob-hourly");

            var jobData = new JobDataMap();
            jobData.PutAsString("IsManualRun", true);

            await scheduler.TriggerJob(jobKey, jobData);
            ToastService.ShowSuccess("Job de backup Oracle iniciado");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Falha ao iniciar job de backup Oracle: {ex.Message}");
        }
    }

    private async Task RunConsulBackupNow()
    {
        try
        {
            var scheduler = await SchedulerFactory.GetScheduler();
            var jobKey = new JobKey("ConsulBackupJob-hourly");

            var jobData = new JobDataMap();
            jobData.PutAsString("IsManualRun", true);

            await scheduler.TriggerJob(jobKey, jobData);
            ToastService.ShowSuccess("Job de backup Consul iniciado");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Falha ao iniciar job de backup Consul: {ex.Message}");
        }
    }

    private async Task TestTempoConnection()
    {
        try
        {
            if (config.TempoConfig == null ||
                string.IsNullOrWhiteSpace(config.TempoConfig.ApiToken) ||
                string.IsNullOrWhiteSpace(config.TempoConfig.BaseUrl) ||
                string.IsNullOrWhiteSpace(config.TempoConfig.AccountId))
            {
                ToastService.ShowError("Por favor, preencha todos os campos de configuração do Tempo");
                return;
            }

            // Save current config temporarily to test connection
            await ConfigService.SaveConfigAsync(config);

            // Use the configured service to test connection
            var httpClient = new HttpClient();
            var logger = new Microsoft.Extensions.Logging.Abstractions.NullLogger<TempoService>();
            var tempoService = new Common.Services.TempoService(httpClient, ConfigService, logger);
            var isConnected = await tempoService.TestConnectionAsync();

            if (isConnected)
            {
                ToastService.ShowSuccess("Conexão com Tempo API estabelecida com sucesso!");
            }
            else
            {
                ToastService.ShowError("Falha ao conectar com Tempo API. Verifique suas credenciais.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erro ao testar conexão: {ex.Message}");
        }
    }
}