@page "/oracle-diff"
@using System.Reactive.Linq
@using System.Reactive.Subjects
@using System.Text.RegularExpressions
@using Common
@using Common.ExternalApis
@using Common.Models
@using Common.Services
@using Common.Services.Interfaces
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using Microsoft.Extensions.Logging
@inject IOracleSchemaService OracleSchemaService
@inject ToastService toastService
@inject IJSRuntime JS
@inject IConfigurationService ConfigService
@inject OracleDiffStateService OracleDiffStateService
@inject ILogger<OracleDiff> _logger
@implements IDisposable

<CustomProgressBar ProgressValue="@OracleDiffStateService.ProgressValue" Label="@OracleDiffStateService.ProgressLabel" IsLoading="@OracleDiffStateService.IsLoading" />

<StickyFilter>
    <div class="row g-3">
        <div class="col-md-5">
            <div class="form-group">
                <label class="form-label">Ambiente Origem:</label>
                <select class="form-select" @bind="OracleDiffStateService.SelectedSourceEnv">
                    @foreach (var env in environments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-5">
            <div class="form-group">
                <label class="form-label">Ambiente Destino:</label>
                <select class="form-select" @bind="OracleDiffStateService.SelectedTargetEnv">
                    @foreach (var env in environments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary w-100 mt-4" @onclick="CompareEnvironments">Comparar</button>
        </div>
    </div>

    <div class="row g-3 mt-2">
        <div class="col-md-6">
            <div class="form-group">
                <input type="text" class="form-control" placeholder="Buscar por nome da view..."
                @bind="OracleDiffStateService.SearchKey"
                @bind:event="oninput"
                @onkeyup="HandleSearch" />
            </div>
        </div>
    </div>

    <div class="col-md-1">
        <div class="form-check form-switch mt-3">
            <input class="form-check-input" type="checkbox" role="switch"
            id="showOnlyChanged" @bind="OracleDiffStateService.ShowOnlyChanged" @bind:after="HandleSearch">
            <label class="form-check-label" for="showOnlyChanged" title="Mostrar apenas views com diferenças">Mostrar apenas alterações</label>
        </div>
    </div>
</StickyFilter>

@foreach (var diff in OracleDiffStateService.PageItems)
{
    <BlazorDiffViewer Diff="@diff">

        <LeftButtons>
            <div>
                <button class="btn btn-sm btn-outline-primary" @onclick="() => ExportViewDDL(diff.Key, OracleDiffStateService.SelectedSourceEnv)">
                    <i class="bi bi-download"></i> Origem
                </button>
                <button class="btn btn-sm btn-outline-secondary" @onclick="() => CopyDropSQL(diff.Key, OracleDiffStateService.SelectedSourceEnv)">
                    <i class="bi bi-clipboard"></i> Copy Drop SQL
                </button>
            </div>
        </LeftButtons>
        <RightButtons>
            <div>
                <button class="btn btn-sm btn-outline-primary" @onclick="() => ExportViewDDL(diff.Key, OracleDiffStateService.SelectedTargetEnv)">
                    <i class="bi bi-download"></i> Destino
                </button>
                <button class="btn btn-sm btn-outline-secondary" @onclick="() => CopyDropSQL(diff.Key, OracleDiffStateService.SelectedTargetEnv)">
                    <i class="bi bi-clipboard"></i> Copy Drop SQL
                </button>
            </div>
        </RightButtons>
    </BlazorDiffViewer>
}

<CustomPagination State="@OracleDiffStateService" OnPageChange="@ChangePage"/>

<style>
    .form-group {
        margin-bottom: 0;
    }
</style>

@code {
    private List<OracleDiffResult> page = new List<OracleDiffResult>();

    private List<OracleEnvironment> environments = new();
    private PaginationService<string, OracleViewDefinition, OracleDiffResult> paginationService;

    protected override async Task OnInitializedAsync()
    {
        var config = ConfigService.GetConfig();
        environments = config.OracleEnvironments;

        OracleDiffStateService.OnChange += () => InvokeAsync(StateHasChanged);
        OracleDiffStateService.Load();

        paginationService = new PaginationService<string, OracleViewDefinition, OracleDiffResult>(
            OracleDiffStateService,
            async () =>
            {
                var sourceEnv = environments.First(e => e.Name == OracleDiffStateService.SelectedSourceEnv);
                return (await OracleSchemaService.GetViewDefinitionsAsync(sourceEnv.ConnectionString, sourceEnv.Schema))
                    .ToDictionary(v => v.Name);
            },
            async () =>
            {
                var targetEnv = environments.First(e => e.Name == OracleDiffStateService.SelectedTargetEnv);
                return (await OracleSchemaService.GetViewDefinitionsAsync(targetEnv.ConnectionString, targetEnv.Schema))
                    .ToDictionary(v => v.Name);
            },
            (viewName, source, target) =>
            {
                var sourceDefinition = source?.Definition ?? string.Empty;
                var targetDefinition = target?.Definition ?? string.Empty;
                return OracleSchemaService.GetViewDiffAsync(viewName, sourceDefinition, targetDefinition);
            },
            (viewName, source, target, diff) => Task.FromResult(
                (string.IsNullOrEmpty(OracleDiffStateService.SearchKey) ||
                (!string.IsNullOrEmpty(OracleDiffStateService.SearchKey) &&
                viewName.Contains(OracleDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase))) &&
                (!OracleDiffStateService.ShowOnlyChanged || diff.HasDifferences))
        );
    }

    public void Dispose()
    {
        OracleDiffStateService.OnChange -= () => InvokeAsync(StateHasChanged);
        OracleDiffStateService.Save();
    }

    public async Task ExportViewDDL(string viewName, string envName)
    {
        viewName = viewName.Replace(".SQL", "");
        try
        {
            var config = ConfigService.GetConfig();
            var env = config.OracleEnvironments.FirstOrDefault(e => e.Name == envName);

            if (env == null)
            {
                toastService.ShowError($"Environment {envName} not found");
                return;
            }

            var viewDef = await OracleSchemaService.GetViewDefinitionAsync(env.ConnectionString, env.Schema, viewName);
            if (!string.IsNullOrEmpty(viewDef.Definition))
            {
                var createView = $@"CREATE OR REPLACE FORCE EDITIONABLE VIEW {env.Schema}.{viewName} AS {viewDef.Definition}";

                var fileName = $"{viewDef.Name}_{envName}_{DateTime.Now:yyyyMMdd}.sql".Replace(" ", "_");
                await DownloadFile(fileName, createView);
                toastService.ShowSuccess($"Downloaded {fileName}");
            }
            else
            {
                toastService.ShowError($"View {viewName} not found in {envName}");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error exporting DDL: {ex.Message}");
        }
    }

    public async Task CopyDropSQL(string viewName, string envName)
    {
        viewName = viewName.Replace(".SQL", "");
        try
        {
            var config = ConfigService.GetConfig();
            var env = config.OracleEnvironments.FirstOrDefault(e => e.Name == envName);
            if (env == null)
            {
                toastService.ShowError($"Environment {envName} not found");
                return;
            }

            var dropSQL = $"DROP VIEW {env.Schema}.{viewName};";

            // Copy to clipboard
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", dropSQL);
            toastService.ShowSuccess($"Copied DROP SQL for {viewName} in {envName}");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error copying DROP SQL: {ex.Message}");
        }
    }

    private async Task DownloadFile(string fileName, string fileContent)
    {
        var byteArray = System.Text.Encoding.UTF8.GetBytes(fileContent);
        var base64Content = Convert.ToBase64String(byteArray);
        await JS.InvokeVoidAsync("downloadFile", fileName, base64Content);
    }

    private async Task CompareEnvironments()
    {
        if (string.IsNullOrEmpty(OracleDiffStateService.SelectedSourceEnv) || string.IsNullOrEmpty(OracleDiffStateService.SelectedTargetEnv))
        {
            toastService.ShowError("Please select both environments");
            return;
        }

        try
        {
            // Initialize pagination service
            await paginationService.InitializeAsync();

            // Get differences for the current page
            await paginationService.GetPageAsync();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error comparing environments: {ex.Message}");
        }
    }

    private async Task HandleSearch()
    {
        OracleDiffStateService.CurrentPage = 1;
        await paginationService.GetPageAsync();

    }

    private async Task ChangePage(int page)
    {
        OracleDiffStateService.CurrentPage = page;
        await paginationService.GetPageAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            OracleDiffStateService.InitializeState(async x =>
            {
                if (environments.Count >= 2)
                {
                    x.SelectedSourceEnv = environments[0].Name;
                    x.SelectedTargetEnv = environments.Count > 1 ? environments[1].Name : environments[0].Name;
                    await CompareEnvironments();
                }
            });
        }
    }
}
