@page "/oracle-diff"
@using System.Reactive.Linq
@using System.Reactive.Subjects
@using System.Text.RegularExpressions
@using Common
@using Common.ExternalApis
@using Common.Models
@using Common.Services
@using Common.Services.Interfaces
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@inject IOracleSchemaService OracleSchemaService
@inject IToastService toastService
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject IConfigurationService ConfigService
@inject OracleDiffStateService OracleDiffStateService
@implements IDisposable

<ProgressBar ProgressValue="@OracleDiffStateService.ProgressValue" Label="@OracleDiffStateService.ProgressLabel" IsLoading="@OracleDiffStateService.IsLoading" />

<StickyFilter>
    <div class="row g-3">
        <div class="col-md-5">
            <div class="form-group">
                <label class="form-label">Ambiente Origem:</label>
                <select class="form-select" @bind="OracleDiffStateService.SelectedSourceEnv">
                    @foreach (var env in environments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-5">
            <div class="form-group">
                <label class="form-label">Ambiente Destino:</label>
                <select class="form-select" @bind="OracleDiffStateService.SelectedTargetEnv">
                    @foreach (var env in environments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary w-100 mt-4" @onclick="CompareEnvironments">Comparar</button>
        </div>
    </div>

    <div class="row g-3 mt-2">
        <div class="col-md-6">
            <div class="form-group">
                <input type="text" class="form-control" placeholder="Buscar por nome da view..."
                       @bind="OracleDiffStateService.SearchKey"
                       @bind:event="oninput"
                       @onkeyup="async () => await HandleSearch()" />
            </div>
        </div>
    </div>

    <div class="col-md-1">
        <div class="form-check form-switch mt-3">
            <input class="form-check-input" type="checkbox" role="switch"
                   id="showOnlyChanged" @bind="OracleDiffStateService.ShowOnlyChanged">
            <label class="form-check-label" for="showOnlyChanged" title="Mostrar apenas views com diferenças">Mostrar apenas alterações</label>
        </div>
    </div>
</StickyFilter>

<div class="diff-container">
    <div id="myDiffElement"></div>
</div>

<Pagination State="@OracleDiffStateService" OnPageChange="@ChangePage"/>

<style>
    .diff-container {
        max-width: 80vw;
        margin: 0 auto;
        overflow-x: auto;
    }

    .form-group {
        margin-bottom: 0;
    }
</style>

<script>
    window.initializeDiff2Html = function(diffString, sourceEnv, targetEnv) {
        console.log(diffString);
        var targetElement = document.getElementById('myDiffElement');
        var configuration = {
            drawFileList: false,
            fileListToggle: false,
            fileListStartVisible: false,
            fileContentToggle: false,
            matching: 'lines',
            outputFormat: 'side-by-side',
            synchronisedScroll: true,
            renderNothingWhenEmpty: true,
            rawTemplates: {
                "file-summary-line": `<li class="d2h-file-list-line">
                    <span class="d2h-file-name-wrapper">
                    {{>fileIcon}}
                    <a href="oracle-diff#{{fileHtmlId}}" class="d2h-file-name">{{fileName}}</a>
                    <span class="d2h-file-stats">
                    <span class="d2h-lines-added">{{addedLines}}</span>
                    <span class="d2h-lines-deleted">{{deletedLines}}</span>
                    </span>
                    </span>
                    </li>`,
                "side-by-side-file-diff": `<div id="{{fileHtmlId}}" class="d2h-file-wrapper" data-lang="{{file.language}}">
                    <div class="d2h-file-header">
                    {{{filePath}}}
                    </div>
                    <div class="d2h-files-diff">
                    <div class="d2h-file-side-diff">
                    <div class="d-flex justify-content-end mb-2">
                    <button class="btn btn-sm btn-outline-primary" onclick="dotNetReference.invokeMethodAsync('ExportViewDDL', '{{file.oldName}}', '${sourceEnv}')">
                    <i class="bi bi-download"></i> Origem
                    </button>
                    </div>
                    <div class="d2h-code-wrapper">
                    <table class="d2h-diff-table">
                    <tbody class="d2h-diff-tbody">
                    {{{diffs.left}}}
                    </tbody>
                    </table>
                    </div>
                    </div>
                    <div class="d2h-file-side-diff">
                    <div class="d-flex justify-content-end mb-2">
                    <button class="btn btn-sm btn-outline-primary" onclick="dotNetReference.invokeMethodAsync('ExportViewDDL', '{{file.newName}}', '${targetEnv}')">
                    <i class="bi bi-download"></i> Destino
                    </button>
                    </div>
                    <div class="d2h-code-wrapper">
                    <table class="d2h-diff-table">
                    <tbody class="d2h-diff-tbody">
                    {{{diffs.right}}}
                    </tbody>
                    </table>
                    </div>
                    </div>
                    </div>
                    </div>`
            }
        };

        var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration, hljs);
        diff2htmlUi.draw();

        hljs.configure({ ignoreUnescapedHTML: true });

        document.querySelectorAll('.hljs').forEach((block) => {
            block.classList.remove('plaintext');
            block.classList.add('sql');
            hljs.highlightElement(block);
        });
    };
</script>

@code {
    private List<OracleEnvironment> environments = new();

    protected override async Task OnInitializedAsync()
    {
        var config = ConfigService.GetConfig();
        environments = config.OracleEnvironments;
    }

    protected override void OnInitialized()
    {
        OracleDiffStateService.OnChange += StateHasChanged;
        OracleDiffStateService.Load();
    }

    public void Dispose()
    {
        OracleDiffStateService.OnChange -= StateHasChanged;
        OracleDiffStateService.Save();
    }

    [JSInvokable]
    public async Task ExportViewDDL(string viewName, string envName)
    {
        viewName = viewName.Replace(".SQL", "");
        try
        {
            var config = ConfigService.GetConfig();
            var env = config.OracleEnvironments.FirstOrDefault(e => e.Name == envName);

            if (env == null)
            {
                toastService.ShowError($"Environment {envName} not found");
                return;
            }

            var viewDef = await OracleSchemaService.GetViewDefinitionAsync(env.ConnectionString, env.Schema, viewName);
            if (!string.IsNullOrEmpty(viewDef.Definition))
            {
                var fileName = $"{viewDef.Name}_{envName}_{DateTime.Now:yyyyMMdd}.sql".Replace(" ", "_");
                await DownloadFile(fileName, viewDef.Definition);
                toastService.ShowSuccess($"Downloaded {fileName}");
            }
            else
            {
                toastService.ShowError($"View {viewName} not found in {envName}");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error exporting DDL: {ex.Message}");
        }
    }

    private async Task DownloadFile(string fileName, string fileContent)
    {
        var byteArray = System.Text.Encoding.UTF8.GetBytes(fileContent);
        var base64Content = Convert.ToBase64String(byteArray);
        await JS.InvokeVoidAsync("downloadFile", fileName, base64Content);
    }

    private async Task CompareEnvironments()
    {
        if (string.IsNullOrEmpty(OracleDiffStateService.SelectedSourceEnv) || string.IsNullOrEmpty(OracleDiffStateService.SelectedTargetEnv))
        {
            toastService.ShowError("Please select both environments");
            return;
        }

        try
        {
            OracleDiffStateService.ProgressValue = 0;
            OracleDiffStateService.IsLoading = true;

            OracleDiffStateService.CurrentPage = 1;
            OracleDiffStateService.PageItems.Clear();

            // Get all view definitions from both environments
            var sourceEnv = environments.First(e => e.Name == OracleDiffStateService.SelectedSourceEnv);
            var targetEnv = environments.First(e => e.Name == OracleDiffStateService.SelectedTargetEnv);

            // Get source views
            OracleDiffStateService.ProgressValue = 25;
            OracleDiffStateService.ProgressLabel = $"Loading views from {OracleDiffStateService.SelectedSourceEnv}...";
            var sourceViews = (await OracleSchemaService.GetViewDefinitionsAsync(sourceEnv.ConnectionString, sourceEnv.Schema))
                .ToDictionary(v => v.Name);
            OracleDiffStateService.SourceViews = sourceViews;

            // Get target views
            OracleDiffStateService.ProgressValue = 50;
            OracleDiffStateService.ProgressLabel = $"Loading views from {OracleDiffStateService.SelectedTargetEnv}...";
            var targetViews = (await OracleSchemaService.GetViewDefinitionsAsync(targetEnv.ConnectionString, targetEnv.Schema))
                .ToDictionary(v => v.Name);
            OracleDiffStateService.TargetViews = targetViews;

            // Process views
            OracleDiffStateService.ProgressValue = 75;
            OracleDiffStateService.ProgressLabel = "Processing view differences...";
            OracleDiffStateService.AllViewNames = new HashSet<string>(
                OracleDiffStateService.SourceViews.Keys.Union(OracleDiffStateService.TargetViews.Keys)
            );
            OracleDiffStateService.TotalCount = OracleDiffStateService.AllViewNames.Count;

            // Get differences for the current page
            await LoadPageDifferences();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error comparing environments: {ex.Message}");
        }
        finally
        {
            OracleDiffStateService.IsLoading = false;
        }
    }

    private async Task LoadPageDifferences()
    {
        OracleDiffStateService.IsLoading = true;
        try
        {
            OracleDiffStateService.ProgressValue = 80;
            OracleDiffStateService.ProgressLabel = "Loading page differences...";

            var filteredViews = string.IsNullOrWhiteSpace(OracleDiffStateService.SearchKey)
                ? OracleDiffStateService.AllViewNames
                : OracleDiffStateService.AllViewNames.Where(view =>
                    view.Contains(OracleDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase));

            var pagedViews = filteredViews
                .Skip((OracleDiffStateService.CurrentPage - 1) * OracleDiffStateService.PageSize)
                .Take(OracleDiffStateService.PageSize)
                .ToList();

            OracleDiffStateService.PageItems.Clear();
            var totalViews = pagedViews.Count;
            var processedViews = 0;

            foreach (var viewName in pagedViews)
            {
                OracleDiffStateService.ProgressLabel = $"Processing view ({processedViews + 1}/{totalViews}): {viewName}";

                OracleDiffStateService.SourceViews.TryGetValue(viewName, out var sourceView);
                OracleDiffStateService.TargetViews.TryGetValue(viewName, out var targetView);

                var sourceDefinition = sourceView?.Definition ?? string.Empty;
                var targetDefinition = targetView?.Definition ?? string.Empty;

                var diff = await OracleSchemaService.GetViewDiff(viewName, sourceDefinition, targetDefinition);
                OracleDiffStateService.PageItems.Add(diff);

                processedViews++;
                OracleDiffStateService.ProgressValue = 80 + (int)((processedViews / (double)totalViews) * 20); // Progress from 80 to 100
            }

            await RunCompare();
        }
        finally
        {
            OracleDiffStateService.IsLoading = false;
        }
    }

    protected async Task RunCompare()
    {
        if (OracleDiffStateService.PageItems.Count == 0)
        {
            await JS.InvokeVoidAsync("initializeDiff2Html", "", OracleDiffStateService.SelectedSourceEnv, OracleDiffStateService.SelectedTargetEnv);
            if (OracleDiffStateService.PageItems.Count > 0)
            {
                toastService.ShowInfo("No differences found matching the search criteria");
            }
            return;
        }

        var diff = String.Join("\r\n", OracleDiffStateService.PageItems.Select(d => d.FormattedDiff));
        await JS.InvokeVoidAsync("initializeDiff2Html", diff, OracleDiffStateService.SelectedSourceEnv, OracleDiffStateService.SelectedTargetEnv);
    }

    private async Task HandleSearch()
    {
        OracleDiffStateService.CurrentPage = 1;
        await LoadPageDifferences();
    }

    private async Task ChangePage(int page)
    {
        OracleDiffStateService.CurrentPage = page;
        await LoadPageDifferences();
    }

    public int GetFilteredCount()
    {
        if (string.IsNullOrWhiteSpace(OracleDiffStateService.SearchKey))
            return OracleDiffStateService.AllViewNames.Count;

        return OracleDiffStateService.AllViewNames.Count(view =>
            view.Contains(OracleDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setDotNetReference", DotNetObjectReference.Create(this));

            bool initialized = false;

            OracleDiffStateService.InitializeState(async x =>
            {
                if (environments.Count >= 2)
                {
                    x.SelectedSourceEnv = environments[0].Name;
                    x.SelectedTargetEnv = environments.Count > 1 ? environments[1].Name : environments[0].Name;
                    await CompareEnvironments();
                }

                initialized = true;
            });

            if (!initialized)
            {
                await RunCompare();
            }
        }
    }
}
