@page "/slot-calculator"
@using System.Globalization
@using BlazorDateRangePicker
@using Common.Models
@using Common.Services
@using Common.Services.Interfaces
@using Common.Utils
@using TugboatCaptainsPlayground.Services
@using Microsoft.Extensions.Logging
@inject SlotCalculatorStateService StateService
@inject IJSRuntime JSRuntime
@inject ILogger<SlotCalculatorPage> _logger
@inject ToastService toastService
@implements IDisposable
@inject OracleOpsService OracleOpsService
<StickyFilter>
    <div class="d-flex flex-wrap gap-3">
        <div class="col-md-4">
            <label class="form-label">Period</label>
            <DateRangePicker 
                TimePicker="true" TimePicker24Hour="true"
                TimePickerSeconds="true" AutoApply="true" DateFormat="@($"MM/dd/yyyy HH:mm:ss")"
                StartDate="StateService.StartDate" EndDate="StateService.EndDate" OnRangeSelect="OnRangeSelect"
                class="form-control" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Initial Yard TEU</label>
            <input type="number" class="form-control" @bind="StateService.InitialYardTeu" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Avg TEU per Truck</label>
            <input type="number" class="form-control" @bind="StateService.AvgTeuPerTruck" step="0.1" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Reserve Rho</label>
            <input type="number" class="form-control" @bind="StateService.ReserveRho" step="0.01" min="0" max="0.99" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Easing Strength</label>
            <input type="number" class="form-control" @bind="StateService.EasingStrength" step="0.1" min="0" max="0.99" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Target Yard TEU</label>
            <input type="number" class="form-control" @bind="StateService.TargetYardTeu" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Max Yard TEU</label>
            <input type="number" class="form-control" @bind="StateService.MaxYardTeu" />
        </div>
        <div class="col-md-12 mt-2">
            @if (StateService.IsLoading)
            {
                <button class="btn btn-secondary" @onclick="CancelCalculation">Cancel</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="CalculateSlots">Calculate</button>
            }


            <button class="btn btn-secondary" @onclick="ResetAllZoom">Reset Zoom</button>

        </div>
    </div>
</StickyFilter>

<CustomProgressBar IsLoading="@StateService.IsLoading" Label="Calculating..." />

<div class="card mb-3">
    <div class="card-header">
        <h5 class="mb-0">Calculated Rates</h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <h6>Vessel Rates</h6>
                <p>Load Rate: @StateService.VesselLoadRate.ToString("F2") TEU/h</p>
                <p>Unload Rate: @StateService.VesselUnloadRate.ToString("F2") TEU/h</p>
            </div>
            <div class="col-md-6">
                <h6>Train Rates</h6>
                <p>Load Rate: @StateService.TrainLoadRate.ToString("F2") TEU/h</p>
                <p>Unload Rate: @StateService.TrainUnloadRate.ToString("F2") TEU/h</p>
            </div>
        </div>
    </div>
</div>

<div class="card mb-3">
    <div class="card-header">
        <h5 class="mb-0">Hour Window Analysis</h5>
    </div>
    <div class="card-body">
        <canvas id="slotChart" width="400" height="100" style='width:100%;height:100px'></canvas>
    </div>
</div>

<div class="card mb-3">
    <div class="card-header">
        <h5 class="mb-0">Slots Summary</h5>
    </div>
    <div class="card-body">
        <canvas id="slotsSummaryChart" width="400" height="100" style='width:100%;height:100px'></canvas>
    </div>
</div>

<div class="card mb-3">
    <div class="card-header">
        <h5 class="mb-0">Capacity Data (Gate Trucks & Yard Moves)</h5>
    </div>
    <div class="card-body">
        <canvas id="capacityChart" width="400" height="100" style='width:100%;height:100px'></canvas>
    </div>
</div>

<div class="card mb-3">
    <div class="card-header">
        <h5 class="mb-0">Inbound / Outbound by Mode</h5>
    </div>
    <div class="card-body">
        <canvas id="inOutChart" width="400" height="100" style='width:100%;height:100px'></canvas>
    </div>
</div>


@code {

    private CancellationTokenSource cts;
    private DotNetObjectReference<SlotCalculatorPage>? objRef;

    protected override async Task OnInitializedAsync()
    {
        StateService.OnChange += StateHasChanged;
        StateService.Load();

        StateService.InitializeState(state =>
        {

        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("addKeyboardShortcuts", objRef);
            await UpdateChart();
            await UpdateCapacityChart();
        }
    }

    public void Dispose()
    {
        StateService.OnChange -= StateHasChanged;
        StateService.Save();
        cts?.Dispose();

        if (objRef != null)
        {
            objRef.Dispose();
        }
    }

    private void OnRangeSelect(DateRange range)
    {
        StateService.StartDate = range.Start.DateTime;
        StateService.EndDate = range.End.DateTime;
    }

    [JSInvokable]
    public async Task HandleKeyPress(string key)
    {
        if (key == "Enter")
        {
            await CalculateSlots();
        }
    }

    private async Task CalculateSlots()
    {
        try
        {
            cts?.Cancel();
            cts = new CancellationTokenSource();

            StateService.ProgressValue = 0;
            StateService.IsLoading = true;

            // Get current yard TEU to initialize the algorithm
            StateService.InitialYardTeu = await OracleOpsService.GetCurrentYardTeuAsync(cts.Token);

            // Fetch actual gate trucks and yard moves data
            if (StateService.GateTrucks.Count == 0
                || StateService.CachedStartDate != StateService.StartDate
                || StateService.CachedEndDate != StateService.EndDate)
            {
                StateService.Vessels = await OracleOpsService.FetchVesselPlansWithNamesAsync(StateService.StartDate, StateService.EndDate, cts.Token);
                StateService.Rails = await OracleOpsService.FetchRailPlansWithNamesAsync(StateService.StartDate, StateService.EndDate, cts.Token);
                StateService.GateTrucks = await OracleOpsService.FetchGateTrucksAsync(StateService.StartDate, StateService.EndDate, cts.Token);
                StateService.YardMoves = await OracleOpsService.FetchYardMovesAsync(StateService.StartDate, StateService.EndDate, cts.Token);
                StateService.CachedStartDate = StateService.StartDate;
                StateService.CachedEndDate = StateService.EndDate;
            }

            var gateTrucks = StateService.GateTrucks;
            var yardMoves = StateService.YardMoves;

            var caps = new Dictionary<DateTime, OpsCaps>();

            // Use actual data for caps
            for (var t = StateService.StartDate; t <= StateService.EndDate; t = t.AddHours(1))
            {
                var gateTruckData = gateTrucks.TryGetValue(t, out var gt) ? gt : new InOut();
                var yardMoveCount = yardMoves.TryGetValue(t, out var ym) ? ym : 0;

                // Use separate in and out gate trucks for the hour
                caps[t] = new OpsCaps(t, gateTruckData.In, gateTruckData.Out, yardMoveCount);
            }

            var band = new YardBand(StateService.MinYardTeu, StateService.TargetYardTeu, StateService.MaxYardTeu);

            var vesselRates = await OracleOpsService.GetVesselLoadUnloadRatesAsync(cts.Token);
            var trainRates = await OracleOpsService.GetTrainLoadUnloadRatesAsync(cts.Token);

            StateService.VesselLoadRate = vesselRates?.LoadRateTeusPerHour ?? 0;
            StateService.VesselUnloadRate = vesselRates?.UnloadRateTeusPerHour ?? 0;
            StateService.TrainLoadRate = trainRates?.LoadRateTeusPerHour ?? 0;
            StateService.TrainUnloadRate = trainRates?.UnloadRateTeusPerHour ?? 0;

            StateService.HourWindows = SlotCalculator.ComputeHourWindows(
                StateService.StartDate,
                StateService.EndDate,
                StateService.InitialYardTeu,
                StateService.Vessels,
                StateService.Rails,
                caps,
                band,
                StateService.AvgTeuPerTruck,
                StateService.ReserveRho,
                StateService.EasingStrength,
                StateService.VesselLoadRate,
                StateService.VesselUnloadRate,
                StateService.TrainLoadRate,
                StateService.TrainUnloadRate
            ).ToList();

            StateService.ChartData = StateService.HourWindows.Select(hw => new SlotChartData
            {
                Timestamp = hw.T.ToString("o"),
                TotalSlots = hw.TotalSlots,
                SlotsIn = hw.SlotsIn,
                SlotsOut = hw.SlotsOut,
                MinYardTeu = StateService.MinYardTeu,
                TargetYardTeu = StateService.TargetYardTeu,
                MaxYardTeu = StateService.MaxYardTeu,
                YardTeuProjection = hw.YardTeuProjection,
                YardTeuNoGate = hw.YardTeuNoGate,
                TruckIn = hw.TruckIn,
                TruckOut = hw.TruckOut,
                VesselIn = hw.VesselIn,
                VesselOut = hw.VesselOut,
                RailIn = hw.RailIn,
                RailOut = hw.RailOut
            }).ToList();

            // Store capacity data for charting
            StateService.CapacityData = caps.Select(kvp => new CapacityChartData
            {
                Timestamp = kvp.Key.ToString("o"),
                GateTrucksIn = kvp.Value.GateTrucksInPerHour,
                GateTrucksOut = kvp.Value.GateTrucksOutPerHour,
                YardMoves = kvp.Value.YardMovesPerHour
            }).ToList();

            await UpdateChart();
            await UpdateCapacityChart();
        }
        catch (OperationCanceledException)
        {

        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error calculating slots: {Message}", ex.Message);
            toastService.ShowError($"Error calculating slots: {ex.Message}");
        }
        finally
        {
            StateService.IsLoading = false;
        }
    }

    private void CancelCalculation()
    {
        StateService.IsLoading = false;
        cts?.Cancel();
    }

    private async Task ResetAllZoom()
    {
        await JSRuntime.InvokeVoidAsync("resetAllZooms");
    }

    private async Task UpdateChart()
    {
        if (StateService.ChartData == null || !StateService.ChartData.Any()) return;

        var labels = StateService.ChartData.Select(d => DateTime.Parse(d.Timestamp).ToString("yyyy-MM-dd HH:mm")).ToArray();
        var dataTotalSlots = StateService.ChartData.Select(d => d.TotalSlots).ToArray();
        var dataSlotsIn = StateService.ChartData.Select(d => d.SlotsIn).ToArray();
        var dataSlotsOut = StateService.ChartData.Select(d => d.SlotsOut).ToArray();
        var minYardTeu = StateService.ChartData.Select(d => d.MinYardTeu).ToArray();
        var targetYardTeu = StateService.ChartData.Select(d => d.TargetYardTeu).ToArray();
        var maxYardTeu = StateService.ChartData.Select(d => d.MaxYardTeu).ToArray();
        var yardTeuProjection = StateService.ChartData.Select(d => d.YardTeuProjection).ToArray();

        var yardTeuNoGate = StateService.ChartData.Select(d => d.YardTeuNoGate).ToArray();

        var truckIn = StateService.ChartData.Select(d => d.TruckIn).ToArray();
        var truckOut = StateService.ChartData.Select(d => d.TruckOut).ToArray();
        var vesselIn = StateService.ChartData.Select(d => d.VesselIn).ToArray();
        var vesselOut = StateService.ChartData.Select(d => d.VesselOut).ToArray();

        var railIn = StateService.ChartData.Select(d => d.RailIn).ToArray();
        var railOut = StateService.ChartData.Select(d => d.RailOut).ToArray();

        // Per-class data
        var classDatasets = new List<object>();
        var palette = new[]
        {
            "rgb(255,99,132)",
            "rgb(54,162,235)",
            "rgb(255,206,86)",
            "rgb(75,192,192)",
            "rgb(153,102,255)",
            "rgb(255,159,64)",
            "rgb(199,199,199)",
            "rgb(0,128,0)",
            "rgb(128,0,128)",
            "rgb(0,0,0)"
        };
        int colorIndex = 0;



        // Convert vessels and rails data to JavaScript-compatible format
        var vesselsData = new Dictionary<string, string[]>();
        var railsData = new Dictionary<string, string[]>();

        foreach (var kvp in StateService.Vessels)
        {
            var key = kvp.Key.ToString("yyyy-MM-dd HH:mm");
            vesselsData[key] = kvp.Value.VesselNames.ToArray();
        }

        foreach (var kvp in StateService.Rails)
        {
            var key = kvp.Key.ToString("yyyy-MM-dd HH:mm");
            railsData[key] = kvp.Value.TrainNames.ToArray();
        }

        var chartData = new
        {
            type = "line",
            data = new
            {
                labels = labels,
                datasets = new object[]
        {
            new
            {
            label = "Target Yard TEU",
            data = targetYardTeu,
            borderColor = "rgba(0,128,0,0.5)",
            borderDash = new[] {5,5},
            pointRadius = 0,
            fill = false
            },
            new
            {
            label = "Yard TEU Projection (No Trucks)",
            data = yardTeuNoGate,
            borderColor = "rgb(128,128,128)",
            tension = 0.4,
            cubicInterpolationMode = "monotone",
            pointRadius = 0
            },
            new
            {
            label = "Yard TEU Projection (With Trucks)",
            data = yardTeuProjection,
            borderColor = "rgb(0, 128, 255)",
            tension = 0.4,
            cubicInterpolationMode = "monotone",
            pointRadius = 0
            },
        }
            },
            options = new
            {
                responsive = true,
                scales = new
                {
                    y = new
                    {
                        //beginAtZero = true,
                        title = new
                        {
                            display = true,
                            text = "TEUs"
                        }
                    },
                    x = new
                    {
                        title = new
                        {
                            display = true,
                            text = "Time"
                        }
                    }
                },
                plugins = new
                {
                    tooltip = new
                    {
                        mode = "index",
                        intersect = false
                    }
                }
            },
            vessels = vesselsData,
            rails = railsData
        };
        await JSRuntime.InvokeVoidAsync("renderChart", "slotChart", chartData);

        var inOutChartData = new
        {
            type = "line",
            data = new
            {
                labels = labels,
                datasets = new object[]
                {
                    new
                    {
                        label = "Truck In",
                        data = truckIn,
                        borderColor = "rgb(0,200,0)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                        pointRadius = 0
                    },
                    new
                    {
                        label = "Truck Out",
                        data = truckOut,
                        borderColor = "rgb(200,0,0)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                        pointRadius = 0
                    },
                    new
                    {
                        label = "Vessel In",
                        data = vesselIn,
                        borderColor = "rgb(0,0,200)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                        pointRadius = 0
                    },
                    new
                    {
                        label = "Vessel Out",
                        data = vesselOut,
                        borderColor = "rgb(200,0,200)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                        pointRadius = 0
                    },
                    new
                    {
                        label = "Rail In",
                        data = railIn,
                        borderColor = "rgb(128,128,0)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                        pointRadius = 0
                    },
                    new
                    {
                        label = "Rail Out",
                        data = railOut,
                        borderColor = "rgb(0,128,128)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                        pointRadius = 0
                    }
                }
            },
            options = new
            {
                responsive = true,
                plugins = new
                {
                    tooltip = new
                    {
                        mode = "index",
                        intersect = false
                    }
                },
                scales = new
                {
                    y = new
                    {
                        title = new
                        {
                            display = true,
                            text = "TEUs"
                        }
                    },
                    x = new
                    {
                        title = new
                        {
                            display = true,
                            text = "Time"
                        }
                    }
                }
            },
            vessels = vesselsData,
            rails = railsData
        };

        await JSRuntime.InvokeVoidAsync("renderChart", "inOutChart", inOutChartData);

        var slotsSummaryChartData = new
        {
            type = "line",
            data = new
            {
                labels = labels,
                datasets = new object[]
                {
                    new
                    {
                        label = "Total Slots",
                        data = dataTotalSlots,
                        borderColor = "rgb(75, 192, 192)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                        pointRadius = 0
                    },
                    new
                    {
                        label = "Slots In",
                        data = dataSlotsIn,
                        borderColor = "rgb(235, 64, 52)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                        pointRadius = 0
                    },
                    new
                    {
                        label = "Slots Out",
                        data = dataSlotsOut,
                        borderColor = "rgb(153, 102, 255)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                        pointRadius = 0
                    }
                }
            },
            options = new
            {
                responsive = true,
                plugins = new
                {
                    tooltip = new
                    {
                        mode = "index",
                        intersect = false,
                        enabled = true
                    }
                },
                interaction = new
                {
                    mode = "nearest",
                    axis = "x",
                    intersect = false
                }
            }
        };

        await JSRuntime.InvokeVoidAsync("renderChart", "slotsSummaryChart", slotsSummaryChartData);
    }


    private async Task UpdateCapacityChart()
    {
        if (StateService.CapacityData == null || !StateService.CapacityData.Any()) return;

        var labels = StateService.CapacityData.Select(d => DateTime.Parse(d.Timestamp).ToString("yyyy-MM-dd HH:mm")).ToArray();
        var gateTrucksIn = StateService.CapacityData.Select(d => d.GateTrucksIn).ToArray();
        var gateTrucksOut = StateService.CapacityData.Select(d => d.GateTrucksOut).ToArray();
        var yardMoves = StateService.CapacityData.Select(d => d.YardMoves).ToArray();

        var capacityChartData = new
        {
            type = "line",
            data = new
            {
                labels = labels,
                datasets = new object[]
                {
                    new
                    {
                        label = "Gate Trucks In",
                        data = gateTrucksIn,
                        borderColor = "rgb(0, 200, 0)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                        pointRadius = 0
                    },
                    new
                    {
                        label = "Gate Trucks Out",
                        data = gateTrucksOut,
                        borderColor = "rgb(200, 0, 0)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                        pointRadius = 0
                    },
                    new
                    {
                        label = "Yard Moves",
                        data = yardMoves,
                        borderColor = "rgb(0, 0, 200)",
                        tension = 0.4,
                        cubicInterpolationMode = "monotone",
                        pointRadius = 0
                    }
                }
            },
            options = new
            {
                responsive = true,
                scales = new
                {
                    y = new
                    {
                        //beginAtZero = true,
                        title = new
                        {
                            display = true,
                            text = "Count"
                        }
                    },
                    x = new
                    {
                        title = new
                        {
                            display = true,
                            text = "Time"
                        }


                    }
                },
                plugins = new
                {
                    tooltip = new
                    {
                        mode = "index",
                        intersect = false
                    }
                }
            }
        };

        await JSRuntime.InvokeVoidAsync("renderChart", "capacityChart", capacityChartData);
    }
}