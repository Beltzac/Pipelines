@page "/database-asserts"
@using Common.Services.Interfaces
@using TugboatCaptainsPlayground.Services
@using BlazorDateRangePicker
@using System.Globalization
@using Common.Models
@using Common.Services
@inject DatabaseAssertsStateService State
@inject DatabaseAssertsService DatabaseAssertsService
@inject ToastService toastService
@inject IConfigurationService ConfigService
@implements IDisposable

<CustomProgressBar IsLoading="@State.IsLoading" Label="@State.ProgressLabel" ProgressValue="@State.ProgressValue" />

<StickyFilter>
    <div class="row g-3">
        <div class="col-md-3">
            <div class="form-group">
                <label class="form-label">Oracle Environment:</label>
                <select class="form-select" @bind="@State.SelectedOracleEnvironment">
                    <option value="">Select Environment</option>
                    @foreach (var env in oracleEnvironments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>
        </div>
         <div class="col-md-3">
            <div class="form-group">
                <label class="form-label">MongoDB Environment:</label>
                <select class="form-select" @bind="@State.SelectedMongoEnvironment">
                     <option value="">Select Environment</option>
                    @foreach (var env in mongoEnvironments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-6">
            <label class="form-label">Per√≠odo</label>
            <div class="d-flex gap-2 mb-2">
                <DatePresets OnDateRangeSelected="HandleDateRangeSelected" />
            </div>
            <DateRangePicker
                Culture="@CultureInfo.GetCultureInfo("pt-BR")"
                TimePicker="true"
                TimePicker24Hour="true"
                TimePickerSeconds="true"
                AutoApply="true"
                DateFormat="@($"dd/MM/yyyy HH:mm:ss")"
                class="form-control" />
        </div>
    </div>

    <div class="row g-3 mt-2">
        <div class="col-md-6">
            <div class="form-group">
                <label class="form-label">SQL Query:</label>
                <textarea class="form-control" @bind="@State.SqlQuery" rows="5"></textarea>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label class="form-label">MongoDB Query:</label>
                <textarea class="form-control" @bind="@State.MongoQuery" rows="5"></textarea>
            </div>
        </div>
    </div>

    <div class="row g-3 mt-2">
        <div class="col-md-3">
            <div class="form-group">
                <label class="form-label">Query Type:</label>
                <select class="form-select" @bind="@State.SelectedQueryType">
                    <option value="SQL">SQL</option>
                    <option value="MongoDB">MongoDB</option>
                </select>
            </div>
        </div>
         <div class="col-md-3">
            <div class="form-group">
                <label class="form-label">Date Filter Field Name:</label>
                <input type="text" class="form-control" @bind="@State.DateFieldForFiltering" placeholder="e.g., Timestamp or CreatedDate" />
            </div>
        </div>
         <div class="col-md-3">
            <div class="form-group">
                <label class="form-label">MongoDB Database:</label>
                <input type="text" class="form-control" @bind="@State.MongoDatabaseName" />
            </div>
        </div>
         <div class="col-md-3">
            <div class="form-group">
                <label class="form-label">MongoDB Collection:</label>
                <input type="text" class="form-control" @bind="@State.MongoCollectionName" />
            </div>
        </div>
    </div>

    <div class="row g-3 mt-2">
        <div class="col-md-12">
            <button class="btn btn-primary" @onclick="ExecuteQuery" disabled="@State.IsLoading">
                @if (State.IsLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
                Execute Query
            </button>
            <button class="btn btn-secondary" @onclick="ShowSaveQueryModal">Save Query</button>
            <button class="btn btn-success" @onclick="RunAllAsserts" disabled="@State.IsLoading">
                @if (State.IsLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
                Run All Asserts
            </button>
        </div>
    </div>
</StickyFilter>

@if (State.SavedQueries != null && State.SavedQueries.Any(q => q.LastRunStatus != AssertStatus.NotRun))
{
    <div class="mt-4">
        <h3>Assert Results</h3>
        <ul class="list-group">
            @foreach (var savedQuery in State.SavedQueries.Where(q => q.LastRunStatus != AssertStatus.NotRun))
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@savedQuery.Name</strong> (@savedQuery.QueryType)
                    </div>
                    <div>
                        @if (savedQuery.LastRunStatus == AssertStatus.OK)
                        {
                            <span class="badge bg-success">OK</span>
                        }
                        else if (savedQuery.LastRunStatus == AssertStatus.Problems)
                        {
                            <span class="badge bg-warning text-dark">Problems</span>
                        }
                        else if (savedQuery.LastRunStatus == AssertStatus.Error)
                        {
                            <span class="badge bg-danger">Error</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Not Run</span>
                        }
                    </div>
                </li>
            }
        </ul>
    </div>
}

@if (State.QueryResults != null && State.QueryResults.Any())
{
    <div class="mt-4 table-responsive">
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    @foreach (var header in State.QueryResults.First().Keys)
                    {
                        <th>@header</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var row in State.QueryResults)
                {
                    <tr>
                        @if (State.QueryResults != null && State.QueryResults.Any())
                        {
                            @foreach (var header in State.QueryResults.First().Keys)
                            {
                                <td>@(row.ContainsKey(header) ? row[header]?.ToString() : "")</td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if (State.QueryResults != null && !State.QueryResults.Any() && !State.IsLoading)
{
    <div class="alert alert-info mt-4" role="alert">
        No results found for the specified query and filters.
    </div>
}

@* Save Query Modal *@
@if (showSaveQueryModal)
{
    <div class="modal fade show" style="display: block" tabindex="-1" @onclick="HideSaveQueryModal">
        <div class="modal-dialog">
            <div class="modal-content" @onclick:stopPropagation>
                <div class="modal-header">
                    <h5 class="modal-title">Save Query</h5>
                    <button type="button" class="btn-close" @onclick="HideSaveQueryModal"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="queryName">Query Name:</label>
                        <input type="text" class="form-control" id="queryName" @bind="newSavedQueryName" />
                    </div>
                     <div class="form-group mt-3">
                        <label for="queryDescription">Description:</label>
                        <textarea class="form-control" id="queryDescription" @bind="newSavedQueryDescription" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideSaveQueryModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveQuery">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (State.SavedQueries != null && State.SavedQueries.Any())
{
    <div class="mt-4">
        <h3>Saved Queries</h3>
        <ul class="list-group">
            @foreach (var savedQuery in State.SavedQueries)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center" @onclick="() => LoadQueryFromList(savedQuery)" style="cursor: pointer;">
                    <div>
                        <strong>@savedQuery.Name (@savedQuery.QueryType)</strong><br />
                        <small>@savedQuery.Description</small>
                    </div>
                    <div>
                         <button class="btn btn-sm btn-danger" @onclick="async () => await DeleteQuery(savedQuery)">Delete</button>
                    </div>
                </li>
            }
        </ul>
    </div>
}

@code {
    private List<OracleEnvironment> oracleEnvironments = new();
    private List<MongoEnvironment> mongoEnvironments = new();
    private bool showSaveQueryModal = false;
    private bool showLoadQueryModal = false;
    private string newSavedQueryName;
    private string newSavedQueryDescription;
    private SavedQuery selectedQuery; // To hold the currently selected query


    protected override void OnInitialized()
    {
        State.OnChange += StateHasChanged;
        State.Load(); // Load state including saved queries
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
        State.Save(); // Save state including saved queries
    }

    protected override async Task OnInitializedAsync()
    {
        var config = ConfigService.GetConfig();
        oracleEnvironments = config.OracleEnvironments ?? new List<OracleEnvironment>();
        mongoEnvironments = config.MongoEnvironments ?? new List<MongoEnvironment>();

        // Initialize state with default environment selections if not loaded from saved state
        State.InitializeState(x =>
        {
            if (string.IsNullOrEmpty(x.SelectedOracleEnvironment) && oracleEnvironments.Any())
            {
                x.SelectedOracleEnvironment = oracleEnvironments.First().Name;
            }
             if (string.IsNullOrEmpty(x.SelectedMongoEnvironment) && mongoEnvironments.Any())
            {
                x.SelectedMongoEnvironment = mongoEnvironments.First().Name;
            }
        });

        State.SavedQueries = ConfigService.LoadSavedQueries();
    }

    private void HandleDateRangeSelected((DateTime? StartDate, DateTime? EndDate) range)
    {
        State.StartDate = range.StartDate;
        State.EndDate = range.EndDate;
        // Optionally trigger query execution here or require user to click execute button
    }

    private async Task ExecuteQuery()
    {
        State.IsLoading = true;
        State.ProgressLabel = "Executing query...";
        State.ProgressValue = 0;
        State.QueryResults = new List<Dictionary<string, object>>(); // Clear previous results

        try
        {
            string connectionString = null;
            string mongoDatabaseName = null;
            string mongoCollectionName = null;

            if (State.SelectedQueryType == "SQL")
            {
                var selectedEnv = oracleEnvironments.FirstOrDefault(e => e.Name == State.SelectedOracleEnvironment);
                if (selectedEnv == null)
                {
                    toastService.ShowError("Please select an Oracle environment.");
                    return;
                }
                connectionString = selectedEnv.ConnectionString;
            }
            else if (State.SelectedQueryType == "MongoDB")
            {
                 var selectedEnv = mongoEnvironments.FirstOrDefault(e => e.Name == State.SelectedMongoEnvironment);
                if (selectedEnv == null)
                {
                    toastService.ShowError("Please select a MongoDB environment.");
                    return;
                }
                connectionString = selectedEnv.ConnectionString;
                mongoDatabaseName = selectedEnv.DatabaseName;
                mongoCollectionName = State.MongoCollectionName; // Get collection name from input
            }
            else
            {
                toastService.ShowError("Invalid query type selected.");
                return;
            }


            State.QueryResults = await DatabaseAssertsService.ExecuteQueryAsync(
                State.SelectedQueryType == "SQL" ? State.SqlQuery : State.MongoQuery,
                State.SelectedQueryType,
                connectionString,
                mongoDatabaseName,
                mongoCollectionName,
                State.StartDate,
                State.EndDate//,
                //State.DateFieldForFiltering // Pass date field for filtering
            );
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error executing query: {ex.Message}");
            State.QueryResults = new List<Dictionary<string, object>> { new Dictionary<string, object> { { "Error", ex.Message } } };
        }
        finally
        {
            State.IsLoading = false;
            State.ProgressLabel = string.Empty;
            State.ProgressValue = null;
        }
    }

    private void ShowSaveQueryModal()
    {
        newSavedQueryName = string.Empty; // Clear previous name
        showSaveQueryModal = true;
    }

    private void HideSaveQueryModal()
    {
        showSaveQueryModal = false;
    }

    private async Task SaveQuery()
    {
        if (string.IsNullOrWhiteSpace(newSavedQueryName))
        {
            toastService.ShowWarning("Please enter a name for the query.");
            return;
        }

        if (string.IsNullOrWhiteSpace(State.SqlQuery) && string.IsNullOrWhiteSpace(State.MongoQuery))
        {
             toastService.ShowWarning("Please enter a query to save.");
            return;
        }

        var queryToSave = new SavedQuery
        {
            Name = newSavedQueryName,
            Description = newSavedQueryDescription,
            QueryString = State.SelectedQueryType == "SQL" ? State.SqlQuery : State.MongoQuery,
            QueryType = State.SelectedQueryType
        };

        // Prevent saving duplicate query names for the same type
        if (State.SavedQueries.Any(q => q.Name.Equals(newSavedQueryName, StringComparison.OrdinalIgnoreCase) && q.QueryType == State.SelectedQueryType))
        {
             toastService.ShowWarning($"A query with the name '{newSavedQueryName}' and type '{State.SelectedQueryType}' already exists.");
            return;
        }

        State.SavedQueries.Add(queryToSave);
        await ConfigService.SaveSavedQueriesAsync(State.SavedQueries); // Save to config file
        toastService.ShowSuccess($"Query '{newSavedQueryName}' saved successfully.");
        HideSaveQueryModal();
    }

    private void ShowLoadQueryModal()
    {
        showLoadQueryModal = true;
    }

    private void HideLoadQueryModal()
    {
        showLoadQueryModal = false;
    }

    private void LoadQuery(SavedQuery savedQuery)
    {
        State.SelectedQueryType = savedQuery.QueryType;
        newSavedQueryName = savedQuery.Name; // Populate name field
        newSavedQueryDescription = savedQuery.Description; // Populate description field

        if (savedQuery.QueryType == "SQL")
        {
            State.SqlQuery = savedQuery.QueryString;
            State.MongoQuery = string.Empty; // Clear other query type
        }
        else if (savedQuery.QueryType == "MongoDB")
        {
            State.MongoQuery = savedQuery.QueryString;
            State.SqlQuery = string.Empty; // Clear other query type
        }
        toastService.ShowSuccess($"Query '{savedQuery.Name}' loaded.");
        HideLoadQueryModal();
    }

    private async Task DeleteQuery(SavedQuery savedQuery)
    {
        State.SavedQueries.Remove(savedQuery);
        await ConfigService.SaveSavedQueriesAsync(State.SavedQueries); // Save to config file
        toastService.ShowSuccess($"Query '{savedQuery.Name}' deleted.");
        // No need to hide modal, list will update
    }

    private async Task RunAllAsserts()
    {
        State.IsLoading = true;
        // No need to clear assertStatuses as we are storing status in SavedQuery object

        if (State.SavedQueries == null || !State.SavedQueries.Any())
        {
            toastService.ShowInfo("No saved queries to run.");
            State.IsLoading = false;
            return;
        }

        State.ProgressLabel = "Running asserts...";
        State.ProgressValue = 0;
        int completedAsserts = 0;

        foreach (var savedQuery in State.SavedQueries)
        {
            savedQuery.LastRunStatus = AssertStatus.NotRun; // Initial status
            savedQuery.LastRunResults = null; // Clear previous results
            StateHasChanged(); // Update UI to show Not Run status

            try
            {
                string connectionString = null;
                string mongoDatabaseName = null;
                string mongoCollectionName = null;

                if (savedQuery.QueryType == "SQL")
                {
                    var selectedEnv = oracleEnvironments.FirstOrDefault(e => e.Name == State.SelectedOracleEnvironment);
                    if (selectedEnv == null)
                    {
                        savedQuery.LastRunStatus = AssertStatus.Error;
                        toastService.ShowError($"Error running assert '{savedQuery.Name}': Oracle environment not selected.");
                        continue; // Move to the next assert
                    }
                    connectionString = selectedEnv.ConnectionString;
                }
                else if (savedQuery.QueryType == "MongoDB")
                {
                    var selectedEnv = mongoEnvironments.FirstOrDefault(e => e.Name == State.SelectedMongoEnvironment);
                    if (selectedEnv == null)
                    {
                        savedQuery.LastRunStatus = AssertStatus.Error;
                        toastService.ShowError($"Error running assert '{savedQuery.Name}': MongoDB environment not selected.");
                        continue; // Move to the next assert
                    }
                    connectionString = selectedEnv.ConnectionString;
                    mongoDatabaseName = selectedEnv.DatabaseName;
                    // For saved MongoDB queries, the collection name should ideally be saved with the query.
                    // For now, we'll use the one from the State, but this might need refinement.
                    mongoCollectionName = State.MongoCollectionName;
                }
                else
                {
                    savedQuery.LastRunStatus = AssertStatus.Error;
                    toastService.ShowError($"Error running assert '{savedQuery.Name}': Invalid query type.");
                    continue; // Move to the next assert
                }

                var results = await DatabaseAssertsService.ExecuteQueryAsync(
                    savedQuery.QueryString,
                    savedQuery.QueryType,
                    connectionString,
                    mongoDatabaseName,
                    mongoCollectionName,
                    State.StartDate,
                    State.EndDate
                );

                savedQuery.LastRunResults = results;

                if (results == null || !results.Any())
                {
                    savedQuery.LastRunStatus = AssertStatus.Problems;
                }
                else
                {
                    savedQuery.LastRunStatus = AssertStatus.OK;
                }
            }
            catch (Exception ex)
            {
                savedQuery.LastRunStatus = AssertStatus.Error;
                savedQuery.LastRunResults = new List<Dictionary<string, object>> { new Dictionary<string, object> { { "Error", ex.Message } } };
                toastService.ShowError($"Error running assert '{savedQuery.Name}': {ex.Message}");
            }
            finally
            {
                completedAsserts++;
                State.ProgressValue = State.SavedQueries.Count > 0 ? (int)((double)completedAsserts / State.SavedQueries.Count * 100) : 0;
                StateHasChanged(); // Update UI with the status of the current assert
            }
        }

        State.IsLoading = false;
        State.ProgressLabel = string.Empty;
        State.ProgressValue = null;
        toastService.ShowSuccess("All asserts finished running.");
    }

    private void LoadQueryFromList(SavedQuery savedQuery)
    {
        selectedQuery = savedQuery; // Set the selected query
        State.SelectedQueryType = savedQuery.QueryType;
        newSavedQueryName = savedQuery.Name; // Populate name field
        newSavedQueryDescription = savedQuery.Description; // Populate description field

        if (savedQuery.QueryType == "SQL")
        {
            State.SqlQuery = savedQuery.QueryString;
            State.MongoQuery = string.Empty; // Clear other query type
        }
        else if (savedQuery.QueryType == "MongoDB")
        {
            State.MongoQuery = savedQuery.QueryString;
            State.SqlQuery = string.Empty; // Clear other query type
        }

        // Display last run results if available
        State.QueryResults = savedQuery.LastRunResults ?? new List<Dictionary<string, object>>();

        StateHasChanged(); // Update UI
    }
}