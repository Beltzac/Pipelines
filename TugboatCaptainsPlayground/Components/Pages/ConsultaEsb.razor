@page "/consulta-esb"
@using BlazorDateRangePicker
@using Common.Models
@using Common.Services
@using Common.Utils
@using Blazored.Typeahead
@using System.Globalization
@inject IEsbService RequisicaoService
@inject IConfigurationService ConfigService
@inject IJSRuntime JSRuntime
@inject ConsultaEsbStateService ConsultaEsbStateService
@inject IToastService toastService
@implements IDisposable

<StickyFilter>
    <div class="row g-3">
        <div class="col-md-3">
            <label class="form-label">Environment</label>
            <select class="form-select" @bind="ConsultaEsbStateService.SelectedEnvironment">
                @foreach (var env in config.OracleEnvironments)
                {
                    <option value="@env.Name">@env.Name</option>
                }
            </select>
        </div>

        <div class="col-md-6">
            <label class="form-label">Range</label>
            <div class="d-flex gap-2 mb-2">
                <DatePresets OnDateRangeSelected="HandleDateRangeSelected" />
            </div>
            <DateRangePicker
                Culture="@CultureInfo.GetCultureInfo("pt-BR")"
                TimePicker="true"
                TimePicker24Hour="true"
                TimePickerSeconds="true"
                AutoApply="true"
                DateFormat="@($"dd/MM/yyyy HH:mm:ss")"
                @bind-StartDate="ConsultaEsbStateService.StartDate"
                @bind-EndDate="ConsultaEsbStateService.EndDate"
                class="form-control" />
        </div>

        <div class="col-md-3">
            <label class="form-label">URL/Nome Fluxo Filter</label>
            <input type="text" class="form-control" @bind="ConsultaEsbStateService.UrlFilter" placeholder="Search URL or Nome Fluxo">
        </div>

        <div class="col-md-3">
            <label class="form-label">HTTP Method</label>
            <select class="form-select" @bind="ConsultaEsbStateService.HttpMethod">
                <option value="">All</option>
                <option value="GET">GET</option>
                <option value="POST">POST</option>
                <option value="PUT">PUT</option>
                <option value="DELETE">DELETE</option>
            </select>
        </div>

        <div class="col-md-3">
            <label class="form-label">Request/Response</label>
            <input type="text" class="form-control" @bind="ConsultaEsbStateService.GenericText" placeholder="Aceita Regex">
        </div>

        <div class="col-md-3">
            <label class="form-label">User</label>
            <BlazoredTypeahead TItem="KeyValuePair<int, string>"
                              TValue="KeyValuePair<int, string>?"
                              ConvertMethod="x => x"
                              SearchMethod="async x => await SearchUsers(x)"
                              @bind-Value="@ConsultaEsbStateService.User"
                              EnableDropDown="true"
                              placeholder="Search user..."
                              class="form-control">
                <SelectedTemplate Context="user">
                    @(user == null ? "Todos" : $"{user.Value.Value} ({user.Value.Key})")
                </SelectedTemplate>
                <ResultTemplate Context="kvp">
                    @($"{kvp.Value} ({kvp.Key})")
                </ResultTemplate>
                <NotFoundTemplate>
                    No users found
                </NotFoundTemplate>
            </BlazoredTypeahead>
        </div>

        <div class="col-md-3">
            <label class="form-label">Execução ID</label>
            <input type="number" class="form-control" @bind="ConsultaEsbStateService.ExecucaoId">
        </div>

        <div class="col-md-6">
            <div class="row">
                <div class="col-md-6">
                    <label class="form-label">HTTP Status Range</label>
                    <select class="form-select" @bind="ConsultaEsbStateService.HttpStatusRange">
                        <option value="">All</option>
                        <option value="2xx">2xx (Success)</option>
                        <option value="3xx">3xx (Redirection)</option>
                        <option value="4xx">4xx (Client Error)</option>
                        <option value="5xx">5xx (Server Error)</option>
                    </select>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Response Status</label>
                    <select class="form-select" @bind="ConsultaEsbStateService.ResponseStatus">
                        <option value="">All</option>
                        <option value="1">Success</option>
                        <option value="2">Error</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            @if (ConsultaEsbStateService.IsLoading)
            {
                <button class="btn btn-secondary" @onclick="CancelSearch">Cancel</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="async () => { ConsultaEsbStateService.CurrentPage = 1; await ExecuteQuery(false); }">Search</button>
                <button class="btn btn-secondary" @onclick="async () => { await ClearFilters(); }">Clear</button>
                <button class="btn btn-info" @onclick="async () => { await ExportSqlQuery(); }">Export SQL</button>
            }
        </div>
    </div>
</StickyFilter>

<ProgressBar IsLoading="@ConsultaEsbStateService.IsLoading" Label="Loading..." />

@if (ConsultaEsbStateService.Results != null)
{
    <div class="mt-4">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Source</th>
                    <th>ID</th>
                    <th>Method</th>
                    <th>HTTP Status</th>
                    <th>Response Status</th>
                    <th>URL / Fluxo</th>
                    <th>Start Date</th>
                    <th>User ID</th>
                    <th>Delay (Segundos)</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in ConsultaEsbStateService.Results)
                {
                    <tr>
                        <td>@item.Source</td>
                        <td>@item.IdExecucao</td>
                        <td>@item.HttpMethod</td>
                        <td>
                            <span class="badge @GetStatusBadgeClass(item.HttpStatusCode)">
                                @item.HttpStatusCode
                            </span>
                        </td>
                        <td>@(GetResponseStatus(item.Resposta))</td>
                        <td title="@(item.Url ?? item.NomeFluxo)" style="max-width: 300px; white-space: break-spaces; word-break: break-word;">
                            @(item.Url ?? item.NomeFluxo)
                        </td>
                        <td>@item.DataInicio.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@(item.UserLogin ?? item.IdUsuarioInclusao.ToString())</td>
                        <td>@(item.Duration?.TotalSeconds.ToString("F3"))</td>
                        <td>
                            <button class="btn btn-sm btn-info" @onclick="() => ShowDetails(item)">
                                Details
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (ConsultaEsbStateService.Results != null && ConsultaEsbStateService.TotalCount > 0)
{
    <Pagination
        CurrentPage="@ConsultaEsbStateService.CurrentPage"
        TotalPages="@((int)Math.Ceiling(ConsultaEsbStateService.TotalCount / (double)ConsultaEsbStateService.PageSize))"
        OnPageChange="@(async (page) => { ConsultaEsbStateService.CurrentPage = page; await ExecuteQuery(); })">
        Showing @((ConsultaEsbStateService.CurrentPage - 1) * ConsultaEsbStateService.PageSize + 1) to @Math.Min(ConsultaEsbStateService.CurrentPage * ConsultaEsbStateService.PageSize, ConsultaEsbStateService.TotalCount) of @ConsultaEsbStateService.TotalCount entries
    </Pagination>
}

@if (ConsultaEsbStateService.SelectedItem != null)
{
    <div class="modal fade show" style="display: block" tabindex="-1" @onclick="CloseModal">
        <div class="modal-dialog modal-xl">
            <div class="modal-content" @onclick:stopPropagation>
                <div class="modal-header">
                    <h5 class="modal-title">Execution Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="card h-100">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">Request</h6>
                                        <div>
                                            <button class="btn btn-outline-secondary btn-sm me-2" @onclick="() => CopyToClipboard(ConsultaEsbStateService.FormattedRequest)">
                                                <i class="bi bi-clipboard"></i> Copy
                                            </button>
                                            @if (DataFormatUtils.IsJson(ConsultaEsbStateService.FormattedRequest) || DataFormatUtils.IsXml(ConsultaEsbStateService.FormattedRequest))
                                            {
                                                <button class="btn btn-outline-secondary btn-sm" @onclick="() => ConvertRequest()">
                                                    @(DataFormatUtils.IsJson(ConsultaEsbStateService.FormattedRequest) ? "To XML" : "To JSON")
                                                </button>
                                            }
                                        </div>
                                    </div>
                                    <div class="card-body p-0">
                                        <pre class="m-0 p-3" style="max-height: 400px; overflow-y: auto;">@ConsultaEsbStateService.FormattedRequest</pre>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="card h-100">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">Response</h6>
                                        <div>
                                            <button class="btn btn-outline-secondary btn-sm me-2" @onclick="() => CopyToClipboard(ConsultaEsbStateService.FormattedResponse)">
                                                <i class="bi bi-clipboard"></i> Copy
                                            </button>
                                            @if (DataFormatUtils.IsJson(ConsultaEsbStateService.FormattedResponse) || DataFormatUtils.IsXml(ConsultaEsbStateService.FormattedResponse))
                                            {
                                                <button class="btn btn-outline-secondary btn-sm" @onclick="() => ConvertResponse()">
                                                    @(DataFormatUtils.IsJson(ConsultaEsbStateService.FormattedResponse) ? "To XML" : "To JSON")
                                                </button>
                                            }
                                        </div>
                                    </div>
                                    <div class="card-body p-0">
                                        <pre class="m-0 p-3" style="max-height: 400px; overflow-y: auto;">@ConsultaEsbStateService.FormattedResponse</pre>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(ConsultaEsbStateService.SelectedItem.Erro))
                        {
                            <div class="row">
                                <div class="col-12">
                                    <div class="card">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <h6 class="mb-0">Error</h6>
                                            <div>
                                                <button class="btn btn-outline-secondary btn-sm me-2" @onclick="() => CopyToClipboard(ConsultaEsbStateService.SelectedItem.Erro)">
                                                    <i class="bi bi-clipboard"></i> Copy
                                                </button>
                                                @if (DataFormatUtils.IsJson(ConsultaEsbStateService.SelectedItem.Erro) || DataFormatUtils.IsXml(ConsultaEsbStateService.SelectedItem.Erro))
                                                {
                                                    <button class="btn btn-outline-secondary btn-sm" @onclick="() => ConvertError()">
                                                        @(DataFormatUtils.IsJson(ConsultaEsbStateService.SelectedItem.Erro) ? "To XML" : "To JSON")
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                        <div class="card-body p-0">
                                            <pre class="m-0 p-3" style="max-height: 400px; overflow-y: auto;">@ConsultaEsbStateService.FormattedError</pre>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private ConfigModel config;

    protected override void OnInitialized()
    {
        ConsultaEsbStateService.OnChange += StateHasChanged;
        ConsultaEsbStateService.Load();
    }

    public void Dispose()
    {
        ConsultaEsbStateService.OnChange -= StateHasChanged;
        ConsultaEsbStateService.Save();
    }

    private async Task<List<KeyValuePair<int, string>>> SearchUsers(string searchText)
    {
        if (string.IsNullOrEmpty(ConsultaEsbStateService.SelectedEnvironment))
        {
            return new List<KeyValuePair<int, string>>();
        }

        var userLogins = await RequisicaoService.GetUsersAsync(ConsultaEsbStateService.SelectedEnvironment, searchText);
        return userLogins.Select(kvp => new KeyValuePair<int, string>(kvp.Key, kvp.Value)).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        config = ConfigService.GetConfig();

        ConsultaEsbStateService.InitializeState(x =>
        {
            x.SelectedEnvironment = config.OracleEnvironments.FirstOrDefault()?.Name;
            x.EndDate = DateTime.Now.Date.AddDays(1).AddTicks(-1);
            x.StartDate = x.EndDate?.AddHours(-24).AddTicks(1);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("addKeyboardShortcuts", objRef);
        }
    }

    private DotNetObjectReference<ConsultaEsb>? objRef;
    public async ValueTask DisposeAsync()
    {
        if (objRef != null)
        {
            objRef.Dispose();
        }
    }

    [JSInvokable]
    public async Task HandleKeyPress(string key)
    {
        if (key == "Enter")
        {
            await ExecuteQuery(true);
        }
        else if (key == "Escape")
        {
            await ClearFilters();
        }

        StateHasChanged();
    }

    private async Task HandleDateRangeSelected((DateTime? StartDate, DateTime? EndDate) range)
    {
        ConsultaEsbStateService.StartDate = range.StartDate;
        ConsultaEsbStateService.EndDate = range.EndDate;
        await ExecuteQuery(false);
    }

    private async Task ClearFilters()
    {
        ConsultaEsbStateService.UrlFilter = null;
        ConsultaEsbStateService.HttpMethod = null;
        ConsultaEsbStateService.GenericText = null;
        ConsultaEsbStateService.User = null;
        ConsultaEsbStateService.ExecucaoId = null;
        ConsultaEsbStateService.HttpStatusRange = null;
        ConsultaEsbStateService.ResponseStatus = null;
        ConsultaEsbStateService.EndDate = DateTime.Now.Date.AddDays(1).AddTicks(-1);
        ConsultaEsbStateService.StartDate = ConsultaEsbStateService.EndDate?.AddHours(-24);
        ConsultaEsbStateService.CurrentPage = 1;
        await ExecuteQuery();
    }

    private string GetStatusBadgeClass(string? statusCode)
    {
        if (string.IsNullOrEmpty(statusCode)) return "bg-secondary";
        return statusCode.StartsWith("2") ? "bg-success" :
               statusCode.StartsWith("3") ? "bg-info" :
               statusCode.StartsWith("4") ? "bg-warning" :
               statusCode.StartsWith("5") ? "bg-danger" :
               "bg-secondary";
    }

    private CancellationTokenSource? cts;

    private async Task ExecuteQuery(bool updateState = true)
    {
        try
        {
            cts?.Cancel();
            cts = new CancellationTokenSource();
            ConsultaEsbStateService.ProgressValue = 0;
            ConsultaEsbStateService.IsLoading = true;

            StateHasChanged();

            var (queryResults, total) = await RequisicaoService.ExecuteQueryAsync(
                ConsultaEsbStateService.SelectedEnvironment,
                ConsultaEsbStateService.StartDate,
                ConsultaEsbStateService.EndDate,
                ConsultaEsbStateService.UrlFilter,
                ConsultaEsbStateService.HttpMethod,
                ConsultaEsbStateService.GenericText,
                ConsultaEsbStateService.User?.Key,
                ConsultaEsbStateService.ExecucaoId,
                ConsultaEsbStateService.PageSize,
                ConsultaEsbStateService.CurrentPage,
                ConsultaEsbStateService.HttpStatusRange,
                ConsultaEsbStateService.ResponseStatus,
                cts.Token);

            ConsultaEsbStateService.Results = queryResults;
            ConsultaEsbStateService.TotalCount = total;
        }
        catch (OperationCanceledException)
        {
            // Do nothing
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            ConsultaEsbStateService.IsLoading = false;
        }
    }

    private void ShowDetails(RequisicaoExecucao item)
    {
        ConsultaEsbStateService.SelectedItem = item;
        ConsultaEsbStateService.FormattedRequest = DataFormatUtils.IsJson(item.Requisicao)
            ? DataFormatUtils.FormatJson(item.Requisicao)
            : DataFormatUtils.IsXml(item.Requisicao)
                ? DataFormatUtils.FormatXml(item.Requisicao)
                : item.Requisicao;

        ConsultaEsbStateService.FormattedResponse = DataFormatUtils.IsJson(item.Resposta)
            ? DataFormatUtils.FormatJson(item.Resposta)
            : DataFormatUtils.IsXml(item.Resposta)
                ? DataFormatUtils.FormatXml(item.Resposta)
                : item.Resposta;

        ConsultaEsbStateService.FormattedError = DataFormatUtils.IsJson(item.Erro)
            ? DataFormatUtils.FormatJson(item.Erro)
            : DataFormatUtils.IsXml(item.Erro)
                ? DataFormatUtils.FormatXml(item.Erro)
                : item.Erro ?? "";
    }

    private async Task ExportSqlQuery()
    {
        var sqlQuery = RequisicaoService.BuildQuery(
            ConsultaEsbStateService.StartDate,
            ConsultaEsbStateService.EndDate,
            ConsultaEsbStateService.UrlFilter,
            ConsultaEsbStateService.HttpMethod,
            ConsultaEsbStateService.GenericText,
            ConsultaEsbStateService.User?.Key,
            ConsultaEsbStateService.ExecucaoId,
            ConsultaEsbStateService.PageSize,
            ConsultaEsbStateService.CurrentPage,
            ConsultaEsbStateService.HttpStatusRange,
            ConsultaEsbStateService.ResponseStatus);

        await CopyToClipboard(sqlQuery);
        toastService.ShowSuccess("Query SQL copiada para a área de transferência.");
    }

    private void ConvertRequest()
    {
        if (ConsultaEsbStateService.SelectedItem?.Requisicao == null) return;
        if (DataFormatUtils.IsJson(ConsultaEsbStateService.FormattedRequest))
        {
            ConsultaEsbStateService.FormattedRequest = DataFormatUtils.FormatXml(DataFormatUtils.JsonToXml(ConsultaEsbStateService.FormattedRequest));
        }
        else if (DataFormatUtils.IsXml(ConsultaEsbStateService.FormattedRequest))
        {
            ConsultaEsbStateService.FormattedRequest = DataFormatUtils.FormatJson(DataFormatUtils.XmlToJson(ConsultaEsbStateService.FormattedRequest));
        }
        StateHasChanged();
    }

    private void ConvertResponse()
    {
        if (ConsultaEsbStateService.SelectedItem?.Resposta == null) return;
        if (DataFormatUtils.IsJson(ConsultaEsbStateService.FormattedResponse))
        {
            ConsultaEsbStateService.FormattedResponse = DataFormatUtils.FormatXml(DataFormatUtils.JsonToXml(ConsultaEsbStateService.FormattedResponse));
        }
        else if (DataFormatUtils.IsXml(ConsultaEsbStateService.FormattedResponse))
        {
            ConsultaEsbStateService.FormattedResponse = DataFormatUtils.FormatJson(DataFormatUtils.XmlToJson(ConsultaEsbStateService.FormattedResponse));
        }
        StateHasChanged();
    }

    private void ConvertError()
    {
        if (ConsultaEsbStateService.SelectedItem?.Erro == null) return;
        if (DataFormatUtils.IsJson(ConsultaEsbStateService.FormattedError))
        {
            ConsultaEsbStateService.FormattedError = DataFormatUtils.FormatXml(DataFormatUtils.JsonToXml(ConsultaEsbStateService.FormattedError));
        }
        else if (DataFormatUtils.IsXml(ConsultaEsbStateService.FormattedError))
        {
            ConsultaEsbStateService.FormattedError = DataFormatUtils.FormatJson(DataFormatUtils.XmlToJson(ConsultaEsbStateService.FormattedError));
        }
        StateHasChanged();
    }

    private void CloseModal()
    {
        ConsultaEsbStateService.SelectedItem = null;
    }

    private void CancelSearch()
    {
        cts?.Cancel();
        ConsultaEsbStateService.IsLoading = false;
    }

    private async Task CopyToClipboard(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
    }

    private string GetResponseStatus(string? response)
    {
        if (string.IsNullOrEmpty(response)) return "";

        try
        {
            if (DataFormatUtils.IsJson(response))
            {
                var match = System.Text.RegularExpressions.Regex.Match(response, @"""Status""\s*:\s*""?([^"",}\s]+)");
                return match.Success ? (match.Groups[1].Value == "1" ? "Success" : match.Groups[1].Value == "2" ? "Error" : match.Groups[1].Value) : "";
            }
            else if (DataFormatUtils.IsXml(response))
            {
                var match = System.Text.RegularExpressions.Regex.Match(response, @"<Status>\s*([^<\s]+)");
                return match.Success ? (match.Groups[1].Value == "1" ? "Success" : match.Groups[1].Value == "2" ? "Error" : match.Groups[1].Value) : "";
            }
        }
        catch
        {
            // If there's any error parsing, return empty string
            return "";
        }

        return "";
    }
}
