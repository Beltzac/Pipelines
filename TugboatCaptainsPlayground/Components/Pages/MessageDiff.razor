@page "/message-diff"
@using Common
@using Common.Models
@using Common.Services
@using Common.Services.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject IOracleMessageService OracleMessageService
@inject IToastService toastService
@inject IJSRuntime JS
@inject IConfigurationService ConfigService
@inject MessageDiffStateService MessageDiffStateService
@implements IDisposable

<ProgressBar ProgressValue="@MessageDiffStateService.ProgressValue" Label="@MessageDiffStateService.ProgressLabel" IsLoading="@MessageDiffStateService.IsLoading" />

<StickyFilter>
    <div class="row g-3">
        <div class="col-md-5">
            <div class="form-group">
                <label class="form-label" title="Ambiente de origem para comparação">Ambiente Origem:</label>
                <select class="form-select" @bind="MessageDiffStateService.SelectedSourceEnv">
                    @foreach (var env in environments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-5">
            <div class="form-group">
                <label class="form-label" title="Ambiente de destino para comparação">Ambiente Destino:</label>
                <select class="form-select" @bind="MessageDiffStateService.SelectedTargetEnv">
                    @foreach (var env in environments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary w-100 mt-4" @onclick="CompareEnvironments">Comparar</button>
        </div>
    </div>

    <div class="row g-3 mt-2">
        <div class="col-md-6">
            <div class="form-group">
                <input type="text" class="form-control" placeholder="Pesquisar por módulo, código ou prefixo..."
                       @bind="MessageDiffStateService.SearchKey"
                       @bind:event="oninput"
                       @onkeyup="async () => await HandleSearch()"
                       title="Filtrar por módulo, código ou prefixo da mensagem" />
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <input type="text" class="form-control" placeholder="Pesquisar por descrição..."
                       @bind="MessageDiffStateService.SearchDescription"
                       @bind:event="oninput"
                       @onkeyup="async () => await HandleSearch()"
                       title="Filtrar pelo texto da descrição da mensagem" />
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-group">
                <select class="form-select" @bind="MessageDiffStateService.PageSize">
                    <option value="5">5 por página</option>
                    <option value="10">10 por página</option>
                    <option value="20">20 por página</option>
                    <option value="50">50 por página</option>
                </select>
            </div>
        </div>
        <div class="col-md-1">
            <div class="form-check form-switch mt-3">
                <input class="form-check-input" type="checkbox" role="switch"
                       id="showOnlyChanged" @bind="MessageDiffStateService.ShowOnlyChanged">
                <label class="form-check-label" for="showOnlyChanged" title="Mostrar apenas mensagens com diferenças">Mostrar apenas alterações</label>
            </div>
        </div>
    </div>
</StickyFilter>

<div class="diff-container">
    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead class="sticky-top bg-light">
                <tr>
                    <th style="width: 15%">Chave</th>
                    <th style="width: 15%">Título Origem</th>
                    <th style="width: 20%">
                        Valor Origem (@MessageDiffStateService.SelectedSourceEnv)
                        <button class="btn btn-sm btn-outline-primary ms-2" 
                                @onclick="CopyAllSourceUpserts" 
                                title="Copiar todos os comandos UPSERT do ambiente origem">
                            <i class="bi bi-clipboard"></i> Copiar Todos UPSERTs Origem
                        </button>
                    </th>
                    <th style="width: 15%">Título Destino</th>
                    <th style="width: 20%">
                        Valor Destino (@MessageDiffStateService.SelectedTargetEnv)
                        <button class="btn btn-sm btn-outline-primary ms-2" 
                                @onclick="CopyAllTargetUpserts"
                                title="Copiar todos os comandos UPSERT do ambiente destino">
                            <i class="bi bi-clipboard"></i> Copiar Todos UPSERTs Destino
                        </button>
                    </th>
                    <th style="width: 15%">Campos Alterados</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var diff in GetFilteredAndPaginatedDifferences())
                {
                    <tr class="@(diff.Value.HasDifferences ? "table-warning" : "")">
                        <td class="font-weight-bold">@diff.Key</td>
                        <td>@(diff.Value.Source?.Languages.Values.FirstOrDefault()?.Titulo)</td>
                        <td>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="text-wrap">@(diff.Value.Source?.Languages.Values.FirstOrDefault()?.Descricao)</div>
                                @if (diff.Value.Source != null)
                                {
                                    <button class="btn btn-sm btn-outline-primary ms-2" 
                                            @onclick="() => CopyUpsertStatement(MessageDiffStateService.SelectedSourceEnv, diff.Value.Source)"
                                            title="Copiar comando SQL para atualizar esta mensagem no ambiente source">
                                        <i class="bi bi-clipboard"></i>
                                    </button>
                                }
                            </div>
                        </td>
                        <td>@(diff.Value.Target?.Languages.Values.FirstOrDefault()?.Titulo)</td>
                        <td>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="text-wrap">@(diff.Value.Target?.Languages.Values.FirstOrDefault()?.Descricao)</div>
                                @if (diff.Value.Target != null)
                                {
                                    <button class="btn btn-sm btn-outline-primary ms-2" 
                                            @onclick="() => CopyUpsertStatement(MessageDiffStateService.SelectedTargetEnv, diff.Value.Target)"
                                            title="Copiar comando SQL para atualizar esta mensagem no ambiente target">
                                        <i class="bi bi-clipboard"></i>
                                    </button>
                                }
                            </div>
                        </td>
                        <td>
                            @if (diff.Value.ChangedFields.Any())
                            {
                                <ul class="list-unstyled mb-0">
                                    @foreach (var field in diff.Value.ChangedFields)
                                    {
                                        <li class="badge bg-warning text-dark">@field</li>
                                    }
                                </ul>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<Pagination CurrentPage="@MessageDiffStateService.CurrentPage"
            TotalPages="@TotalPages"
            OnPageChange="@ChangePage">
    Exibindo @((MessageDiffStateService.CurrentPage - 1) * MessageDiffStateService.PageSize + 1) até @Math.Min(MessageDiffStateService.CurrentPage * MessageDiffStateService.PageSize, GetFilteredCount()) de @GetFilteredCount() registros
</Pagination>

<style>
    .diff-container {
        max-width: 95vw;
        margin: 0 auto;
        overflow-x: auto;
    }

    .table-responsive {
        max-height: 70vh;
        overflow-y: auto;
    }

    .sticky-top {
        top: 0;
        z-index: 1;
    }

    .text-wrap {
        white-space: normal;
        word-break: break-word;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 0, 0, 0.05);
    }

    .badge {
        margin: 2px;
        white-space: normal;
    }

    .form-group {
        margin-bottom: 0;
    }
</style>

@code {
    private List<OracleEnvironment> environments = new();

    protected override async Task OnInitializedAsync()
    {
        var config = ConfigService.GetConfig();
        environments = config.OracleEnvironments;
    }

    private async Task CopyToClipboard(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
    }

    private async Task CopyUpsertStatement(string environment, MessageDefinition message)
    {
        try
        {
            var upsertStatement = await OracleMessageService.GenerateUpsertStatementAsync(environment, message);
            await CopyToClipboard(upsertStatement);
            toastService.ShowSuccess("Comando UPSERT copiado para a área de transferência");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Erro ao gerar comando UPSERT: {ex.Message}");
        }
    }

    private async Task CopyAllSourceUpserts()
    {
        try
        {
            var filteredKeys = GetFilteredKeys();
            var upserts = new List<string>();

            foreach (var key in filteredKeys)
            {
                var message = MessageDiffStateService.SourceMessages.GetValueOrDefault(key);
                if (message != null)
                {
                    upserts.Add(await OracleMessageService.GenerateUpsertStatementAsync(MessageDiffStateService.SelectedSourceEnv, message));
                }
            }

            if (upserts.Any())
            {
                var allUpserts = string.Join("\n\n", upserts);
                await CopyToClipboard(allUpserts);
                toastService.ShowSuccess($"Copiados {upserts.Count} comandos UPSERT para a área de transferência");
            }
            else
            {
                toastService.ShowWarning("Nenhuma mensagem de origem encontrada para gerar comandos UPSERT");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Erro ao gerar comandos UPSERT: {ex.Message}");
        }
    }

    private async Task CopyAllTargetUpserts()
    {
        try
        {
            var filteredKeys = GetFilteredKeys();
            var upserts = new List<string>();

            foreach (var key in filteredKeys)
            {
                var message = MessageDiffStateService.TargetMessages.GetValueOrDefault(key);
                if (message != null)
                {
                    upserts.Add(await OracleMessageService.GenerateUpsertStatementAsync(MessageDiffStateService.SelectedTargetEnv, message));
                }
            }

            if (upserts.Any())
            {
                var allUpserts = string.Join(";\n\n", upserts);
                await CopyToClipboard(allUpserts);
                toastService.ShowSuccess($"Copiados {upserts.Count} comandos UPSERT para a área de transferência");
            }
            else
            {
                toastService.ShowWarning("Nenhuma mensagem de destino encontrada para gerar comandos UPSERT");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Erro ao gerar comandos UPSERT: {ex.Message}");
        }
    }

    protected override void OnInitialized()
    {
        MessageDiffStateService.OnChange += StateHasChanged;
        MessageDiffStateService.Load();
    }

    public void Dispose()
    {
        MessageDiffStateService.OnChange -= StateHasChanged;
        MessageDiffStateService.Save();
    }

    private async Task CompareEnvironments()
    {
        if (string.IsNullOrEmpty(MessageDiffStateService.SelectedSourceEnv) || string.IsNullOrEmpty(MessageDiffStateService.SelectedTargetEnv))
        {
            toastService.ShowError("Por favor, selecione ambos os ambientes");
            return;
        }

        try
        {
            MessageDiffStateService.ProgressValue = 0;
            MessageDiffStateService.IsLoading = true;

            MessageDiffStateService.CurrentPage = 1;
            MessageDiffStateService.Differences.Clear();

            // Get source environment messages
            MessageDiffStateService.ProgressValue = 25;
            MessageDiffStateService.ProgressLabel = $"Carregando mensagens do ambiente {MessageDiffStateService.SelectedSourceEnv}...";
            var sourceEnv = environments.First(e => e.Name == MessageDiffStateService.SelectedSourceEnv);
            MessageDiffStateService.SourceMessages = await OracleMessageService.GetMessagesAsync(sourceEnv.ConnectionString);

            // Get target environment messages
            MessageDiffStateService.ProgressValue = 50;
            MessageDiffStateService.ProgressLabel = $"Carregando mensagens do ambiente {MessageDiffStateService.SelectedTargetEnv}...";
            var targetEnv = environments.First(e => e.Name == MessageDiffStateService.SelectedTargetEnv);
            MessageDiffStateService.TargetMessages = await OracleMessageService.GetMessagesAsync(targetEnv.ConnectionString);

            // Process messages
            MessageDiffStateService.ProgressValue = 75;
            MessageDiffStateService.ProgressLabel = "Processando diferenças das mensagens...";
            MessageDiffStateService.AllMessageKeys = new HashSet<string>(
                MessageDiffStateService.SourceMessages.Keys.Union(MessageDiffStateService.TargetMessages.Keys)
            );
            MessageDiffStateService.TotalCount = MessageDiffStateService.AllMessageKeys.Count;

            // Get differences for the current page
            await LoadPageDifferences();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Erro ao comparar ambientes: {ex.Message}");
        }
        finally
        {
            MessageDiffStateService.IsLoading = false;
        }
    }

    private async Task LoadPageDifferences()
    {
        MessageDiffStateService.IsLoading = true;
        try
        {
            MessageDiffStateService.ProgressValue = 80;
            MessageDiffStateService.ProgressLabel = "Carregando diferenças...";

            MessageDiffStateService.Differences.Clear();
            var totalKeys = MessageDiffStateService.AllMessageKeys.Count;
            var processedKeys = 0;

            foreach (var key in MessageDiffStateService.AllMessageKeys)
            {
                MessageDiffStateService.ProgressLabel = $"Processando diferenças ({processedKeys + 1}/{totalKeys}): {key}";

                var sourceMessage = MessageDiffStateService.SourceMessages.GetValueOrDefault(key);
                var targetMessage = MessageDiffStateService.TargetMessages.GetValueOrDefault(key);

                var diff = await OracleMessageService.GetMessageDiff(key, sourceMessage, targetMessage);
                MessageDiffStateService.Differences[key] = diff;

                processedKeys++;
                MessageDiffStateService.ProgressValue = 80 + (int)((processedKeys / (double)totalKeys) * 20);
            }

            await RunCompare();
        }
        finally
        {
            MessageDiffStateService.IsLoading = false;
        }
    }

    protected async Task RunCompare()
    {
        var filteredDiffs = GetFilteredAndPaginatedDifferences();
        StateHasChanged();
    }

    private async Task HandleSearch()
    {
        MessageDiffStateService.CurrentPage = 1;
        await LoadPageDifferences();
    }

    private async Task ChangePage(int page)
    {
        MessageDiffStateService.CurrentPage = page;
        await LoadPageDifferences();
    }

    private HashSet<string> GetFilteredKeys()
    {
        var filtered = MessageDiffStateService.AllMessageKeys;

        if (!string.IsNullOrWhiteSpace(MessageDiffStateService.SearchKey) || !string.IsNullOrWhiteSpace(MessageDiffStateService.SearchDescription))
        {
            filtered = filtered.Where(key =>
            {
                var message1 = MessageDiffStateService.SourceMessages.GetValueOrDefault(key);
                var message2 = MessageDiffStateService.TargetMessages.GetValueOrDefault(key);

                var msg1 = message1 != null && (

                   (!string.IsNullOrWhiteSpace(MessageDiffStateService.SearchKey) &&
                   (message1.Key.Contains(MessageDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase) ||
                    message1.Modulo.Contains(MessageDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase) ||
                    message1.Codigo.Contains(MessageDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase) ||
                    message1.Prefixo.Contains(MessageDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase)))

                    ||

                    (!string.IsNullOrWhiteSpace(MessageDiffStateService.SearchDescription) && message1.Languages.Any(x => x.Value?.Descricao?.Contains(MessageDiffStateService.SearchDescription, StringComparison.OrdinalIgnoreCase) ?? false))

                    );

                var msg2 = message2 != null && (

                   (!string.IsNullOrWhiteSpace(MessageDiffStateService.SearchKey) &&
                   (message2.Key.Contains(MessageDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase) ||
                    message2.Modulo.Contains(MessageDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase) ||
                    message2.Codigo.Contains(MessageDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase) ||
                    message2.Prefixo.Contains(MessageDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase)))

                    ||

                    (!string.IsNullOrWhiteSpace(MessageDiffStateService.SearchDescription) && message2.Languages.Any(x => x.Value?.Descricao?.Contains(MessageDiffStateService.SearchDescription, StringComparison.OrdinalIgnoreCase) ?? false))

                    );

                return msg1 || msg2;
            }).ToHashSet();
        }

        if (MessageDiffStateService.ShowOnlyChanged)
        {
            filtered = filtered.Where(key =>
                MessageDiffStateService.Differences.ContainsKey(key) &&
                MessageDiffStateService.Differences[key].HasDifferences
            ).ToHashSet();
        }

        return filtered;
    }

    private IEnumerable<string> GetCurrentPageKeys()
    {
        return GetFilteredKeys()
            .Skip((MessageDiffStateService.CurrentPage - 1) * MessageDiffStateService.PageSize)
            .Take(MessageDiffStateService.PageSize);
    }

    public Dictionary<string, MessageDiffResult> GetFilteredAndPaginatedDifferences()
    {
        return GetCurrentPageKeys()
            .Where(key => MessageDiffStateService.Differences.ContainsKey(key))
            .ToDictionary(
                key => key,
                key => MessageDiffStateService.Differences[key]
            );
    }

    public int TotalPages => (int)Math.Ceiling(GetFilteredCount() / (double)MessageDiffStateService.PageSize);

    public int GetFilteredCount()
    {
        return GetFilteredKeys().Count;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setDotNetReference", DotNetObjectReference.Create(this));

            bool initialized = false;

            MessageDiffStateService.InitializeState(async x =>
            {
                if (environments.Count >= 2)
                {
                    x.SelectedSourceEnv = environments[0].Name;
                    x.SelectedTargetEnv = environments.Count > 1 ? environments[1].Name : environments[0].Name;
                    await CompareEnvironments();
                }

                initialized = true;
            });

            if (!initialized)
            {
                await RunCompare();
            }
        }
    }
}
