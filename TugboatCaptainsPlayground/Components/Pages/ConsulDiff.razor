@page "/consul-diff"
@using System.Reactive.Linq
@using System.Reactive.Subjects
@using System.Text.RegularExpressions
@using Common
@using Common.Models
@using Common.Services
@using Common.Services.Interfaces
@using Common.Utils
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using Microsoft.Extensions.Logging
@inject IConsulService ConsulService
@inject ToastService toastService
@inject IJSRuntime JS
@inject IConfigurationService ConfigService
@inject ConsulDiffStateService ConsulDiffStateService
@inject ILogger<ConsulDiff> _logger
@implements IDisposable

<CustomProgressBar ProgressValue="@ConsulDiffStateService.ProgressValue" Label="@ConsulDiffStateService.ProgressLabel" IsLoading="@ConsulDiffStateService.IsLoading" />

<StickyFilter>
    <div class="row g-3">
        <div class="col-md-5">
            <div class="form-group">
                <label class="form-label">Ambiente Origem:</label>
                <select class="form-select" @bind="ConsulDiffStateService.SelectedSourceEnv">
                    @foreach (var env in environments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-5">
            <div class="form-group">
                <label class="form-label">Ambiente Destino:</label>
                <select class="form-select" @bind="ConsulDiffStateService.SelectedTargetEnv">
                    @foreach (var env in environments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-check mt-4">
                <input class="form-check-input" type="checkbox" @bind="ConsulDiffStateService.UseRecursive" @bind:after="HandleSearch" id="useRecursive">
                <label class="form-check-label" for="useRecursive">
                    Usar Valores Recursivos
                </label>
            </div>
            <button class="btn btn-primary w-100 mt-2" @onclick="CompareEnvironments">Comparar</button>
        </div>
    </div>

    <div class="row g-3 mt-2">
        <div class="col-md-6">
            <div class="form-group">
                <input type="text" class="form-control" placeholder="Buscar por chave..."
                @bind="ConsulDiffStateService.SearchKey"
                @bind:event="oninput"
                @onkeyup="HandleSearch" />
            </div>
        </div>
    </div>

    <div class="col-md-1">
        <div class="form-check form-switch mt-3">
            <input class="form-check-input" type="checkbox" role="switch"
                   id="showOnlyChanged" @bind="ConsulDiffStateService.ShowOnlyChanged" @bind:after="HandleSearch">
            <label class="form-check-label" for="showOnlyChanged" title="Mostrar apenas chaves com diferenças">Mostrar apenas alterações</label>
        </div>
    </div>
</StickyFilter>


@foreach (var diff in ConsulDiffStateService.PageItems)
{
    <BlazorDiffViewer Diff="@diff">
        <LeftButtons>
            <div>
                <button class="btn btn-sm btn-outline-primary" @onclick="() => OpenConsulValue(diff.Key, ConsulDiffStateService.SelectedSourceEnv)">
                    <i class="bi bi-box-arrow-up-right"></i> Abrir no Consul
                </button>
            </div>
        </LeftButtons>
        <RightButtons>
            <div>
                <button class="btn btn-sm btn-outline-primary" @onclick="() => OpenConsulValue(diff.Key, ConsulDiffStateService.SelectedTargetEnv)">
                    <i class="bi bi-box-arrow-up-right"></i> Abrir no Consul
                </button>
            </div>
        </RightButtons>
    </BlazorDiffViewer>
}

<CustomPagination State="@ConsulDiffStateService" OnPageChange="@ChangePage"/>



@code {
    private List<ConsulEnvironment> environments = new();

    private PaginationService<string, ConsulKeyValue, ConsulDiffResult> paginationService;

    protected override async Task OnInitializedAsync()
    {
        var config = ConfigService.GetConfig();
        environments = config.ConsulEnvironments;
    }

    protected override void OnInitialized()
    {
        ConsulDiffStateService.OnChange += () => InvokeAsync(StateHasChanged);
        ConsulDiffStateService.Load();

        paginationService = new PaginationService<string, ConsulKeyValue, ConsulDiffResult>(
            ConsulDiffStateService,
            async () => await ConsulService.GetConsulKeyValues(environments.First(e => e.Name == ConsulDiffStateService.SelectedSourceEnv)),
            async () => await ConsulService.GetConsulKeyValues(environments.First(e => e.Name == ConsulDiffStateService.SelectedTargetEnv)),
            (key, source, target) => Task.FromResult(ConsulService.GetDiff(key, source, target, ConsulDiffStateService.UseRecursive)),
            (key, source, target, diff) => Task.FromResult((string.IsNullOrEmpty(ConsulDiffStateService.SearchKey) || (!string.IsNullOrEmpty(ConsulDiffStateService.SearchKey) && key.Contains(ConsulDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase))) && (!ConsulDiffStateService.ShowOnlyChanged || diff.HasDifferences))
        );
    }

    public void Dispose()
    {
        ConsulDiffStateService.OnChange -= () => InvokeAsync(StateHasChanged);
        ConsulDiffStateService.Save();
    }

    public async Task OpenConsulValue(string key, string envName)
    {
        try
        {
            if (ConsulDiffStateService.SelectedSourceEnv == envName)
            {
                if (ConsulDiffStateService.SourceValues.TryGetValue(key, out var consulValue))
                {
                    OpenFolderUtils.OpenUrl(consulValue.Url);
                }
                else
                {
                    _logger.LogWarning("Chave {Key} não encontrada em {Environment}", key, envName);
                    toastService.ShowWarning($"Chave {key} não encontrada em {envName}");
                }
                return;
            }

            if (ConsulDiffStateService.SelectedTargetEnv == envName)
            {
                if (ConsulDiffStateService.TargetValues.TryGetValue(key, out var consulValue))
                {
                    OpenFolderUtils.OpenUrl(consulValue.Url);
                }
                else
                {
                    _logger.LogWarning("Chave {Key} não encontrada em {Environment}", key, envName);
                    toastService.ShowWarning($"Chave {key} não encontrada em {envName}");
                }
                return;
            }

           _logger.LogError("Ambiente {Environment} não encontrado", envName);
           toastService.ShowError($"Ambiente {envName} não encontrado");

        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao abrir valor no Consul: {Message}", ex.Message);
            toastService.ShowError($"Erro ao abrir valor no Consul: {ex.Message}");
        }
    }

    protected async Task CompareEnvironments()
    {
        if (string.IsNullOrEmpty(ConsulDiffStateService.SelectedSourceEnv) || string.IsNullOrEmpty(ConsulDiffStateService.SelectedTargetEnv))
        {
            _logger.LogWarning("Tentativa de comparar ambientes sem selecionar ambos os ambientes.");
            toastService.ShowWarning("Tentativa de comparar ambientes sem selecionar ambos os ambientes.");
            return;
        }
        _logger.LogInformation("Comparando ambientes Consul: {SourceEnv} vs {TargetEnv}", ConsulDiffStateService.SelectedSourceEnv, ConsulDiffStateService.SelectedTargetEnv);
        toastService.ShowInfo($"Comparando ambientes Consul: {ConsulDiffStateService.SelectedSourceEnv} vs {ConsulDiffStateService.SelectedTargetEnv}");
        try
        {
            // Initialize pagination service
            await paginationService.InitializeAsync();

            // Get differences for the current page
            await paginationService.GetPageAsync();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao comparar ambientes: {Message}", ex.Message);
            toastService.ShowError($"Erro ao comparar ambientes: {ex.Message}");
        }
    }

    private async Task LoadPageDifferences()
    {
        try
        {
            await paginationService.GetPageAsync();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao carregar diferenças da página: {Message}", ex.Message);
            toastService.ShowError($"Erro ao carregar diferenças da página: {ex.Message}");
        }
    }

    private async Task HandleSearch()
    {
        ConsulDiffStateService.CurrentPage = 1;
        await LoadPageDifferences();
    }

    private async Task ChangePage(int page)
    {
        ConsulDiffStateService.CurrentPage = page;
        await LoadPageDifferences();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ConsulDiffStateService.InitializeState(async x =>
            {
                if (environments.Count >= 2)
                {
                    x.SelectedSourceEnv = environments[0].Name;
                    x.SelectedTargetEnv = environments.Count > 1 ? environments[1].Name : environments[0].Name;
                    await CompareEnvironments();
                }
            });
        }
    }

}