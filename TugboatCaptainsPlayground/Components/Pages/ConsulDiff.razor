@page "/consul-diff"
@using System.Reactive.Linq
@using System.Reactive.Subjects
@using System.Text.RegularExpressions
@using Common
@using Common.Models
@using Common.Services
@using Common.Services.Interfaces
@using Common.Utils
@using Markdig
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@inject IConsulService ConsulService
@inject IToastService toastService
@inject IJSRuntime JS
@inject IConfigurationService ConfigService
@inject ConsulDiffStateService ConsulDiffStateService
@implements IDisposable

<ProgressBar ProgressValue="@ConsulDiffStateService.ProgressValue" Label="@ConsulDiffStateService.ProgressLabel" IsLoading="@ConsulDiffStateService.IsLoading" />

<StickyFilter>
    <div class="row g-3">
        <div class="col-md-5">
            <div class="form-group">
                <label class="form-label">Ambiente Origem:</label>
                <select class="form-select" @bind="ConsulDiffStateService.SelectedSourceEnv">
                    @foreach (var env in environments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-5">
            <div class="form-group">
                <label class="form-label">Ambiente Destino:</label>
                <select class="form-select" @bind="ConsulDiffStateService.SelectedTargetEnv">
                    @foreach (var env in environments)
                    {
                        <option value="@env.Name">@env.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-2">
            <div class="form-check mt-4">
                <input class="form-check-input" type="checkbox" @bind="ConsulDiffStateService.UseRecursive" @bind:after="HandleSearch" id="useRecursive">
                <label class="form-check-label" for="useRecursive">
                    Usar Valores Recursivos
                </label>
            </div>
            <button class="btn btn-primary w-100 mt-2" @onclick="CompareEnvironments">Comparar</button>
        </div>
    </div>

    <div class="row g-3 mt-2">
        <div class="col-md-6">
            <div class="form-group">
                <input type="text" class="form-control" placeholder="Buscar por chave..."
                @bind="ConsulDiffStateService.SearchKey"
                @bind:event="oninput"
                @onkeyup="HandleSearch" />
            </div>
        </div>
    </div>

    <div class="col-md-1">
        <div class="form-check form-switch mt-3">
            <input class="form-check-input" type="checkbox" role="switch"
                   id="showOnlyChanged" @bind="ConsulDiffStateService.ShowOnlyChanged" @bind:after="HandleSearch">
            <label class="form-check-label" for="showOnlyChanged" title="Mostrar apenas chaves com diferenças">Mostrar apenas alterações</label>
        </div>
    </div>
</StickyFilter>

<div class="diff-container">
    <div id="myDiffElement"></div>
</div>

<Pagination State="@ConsulDiffStateService" OnPageChange="@ChangePage"/>

<style>
    .diff-container {
    max-width: 80vw;
    margin: 0 auto;
    overflow-x: auto;
    }
    finally
    {
    ConsulDiffStateService.IsLoading = false;
    }

    .form-group {
    margin-bottom: 0;
    }
</style>

<script>
    window.initializeDiff2Html2 = function(diffString, sourceEnv, targetEnv) {
    var targetElement = document.getElementById('myDiffElement');
    var configuration = {
    drawFileList: false,
    fileListToggle: false,
    fileListStartVisible: false,
    fileContentToggle: false,
    matching: 'lines',
    outputFormat: 'side-by-side',
    synchronisedScroll: true,
    renderNothingWhenEmpty: true,
    rawTemplates: {
    "file-summary-line": `<li class="d2h-file-list-line">
    <span class="d2h-file-name-wrapper">
    {{>fileIcon}}
    <a href="consul-diff#{{fileHtmlId}}" class="d2h-file-name">{{fileName}}</a>
    <span class="d2h-file-stats">
    <span class="d2h-lines-added">{{addedLines}}</span>
    <span class="d2h-lines-deleted">{{deletedLines}}</span>
    </span>
    </span>
    </li>`,
    "side-by-side-file-diff": `<div id="{{fileHtmlId}}" class="d2h-file-wrapper" data-lang="{{file.language}}">
    <div class="d2h-file-header">
    {{{filePath}}}
    </div>
    <div class="d2h-files-diff">
    <div class="d2h-file-side-diff">
    <div class="d-flex justify-content-end mb-2">
    <button class="btn btn-sm btn-outline-primary" onclick="dotNetReference.invokeMethodAsync('OpenConsulValue', '{{file.oldName}}', '${sourceEnv}')">
    <i class="bi bi-box-arrow-up-right"></i> Abrir no Consul
    </button>
    </div>
    <div class="d2h-code-wrapper">
    <table class="d2h-diff-table">
    <tbody class="d2h-diff-tbody">
    {{{diffs.left}}}
    </tbody>
    </table>
    </div>
    </div>
    <div class="d2h-file-side-diff">
    <div class="d-flex justify-content-end mb-2">
    <button class="btn btn-sm btn-outline-primary" onclick="dotNetReference.invokeMethodAsync('OpenConsulValue', '{{file.newName}}', '${targetEnv}')">
    <i class="bi bi-box-arrow-up-right"></i> Abrir no Consul
    </button>
    </div>
    <div class="d2h-code-wrapper">
    <table class="d2h-diff-table">
    <tbody class="d2h-diff-tbody">
    {{{diffs.right}}}
    </tbody>
    </table>
    </div>
    </div>
    </div>
    </div>`
    }
    };

    var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration, hljs);
    diff2htmlUi.draw();

    hljs.configure({ ignoreUnescapedHTML: true });

    document.querySelectorAll('.hljs').forEach((block) => {
    block.classList.remove('plaintext');
    block.classList.add('json');
    hljs.highlightElement(block);
    });
    };
</script>

@code {
    private List<ConsulEnvironment> environments = new();

    private PaginationService<string, ConsulKeyValue, ConsulDiffResult> paginationService;

    protected override async Task OnInitializedAsync()
    {
        var config = ConfigService.GetConfig();
        environments = config.ConsulEnvironments;
    }

    protected override void OnInitialized()
    {
        ConsulDiffStateService.OnChange += StateHasChanged;
        ConsulDiffStateService.Load();

        paginationService = new PaginationService<string, ConsulKeyValue, ConsulDiffResult>(
            ConsulDiffStateService,
            async () => await ConsulService.GetConsulKeyValues(environments.First(e => e.Name == ConsulDiffStateService.SelectedSourceEnv)),
            async () => await ConsulService.GetConsulKeyValues(environments.First(e => e.Name == ConsulDiffStateService.SelectedTargetEnv)),
            async (key, source, target) => await ConsulService.GetDiff(key, source, target, ConsulDiffStateService.UseRecursive),
            (key, source, target, diff) => (string.IsNullOrEmpty(ConsulDiffStateService.SearchKey) || (!string.IsNullOrEmpty(ConsulDiffStateService.SearchKey) && key.Contains(ConsulDiffStateService.SearchKey, StringComparison.OrdinalIgnoreCase))) && (!ConsulDiffStateService.ShowOnlyChanged || diff.HasDifferences)
        );
    }

    public void Dispose()
    {
        ConsulDiffStateService.OnChange -= StateHasChanged;
        ConsulDiffStateService.Save();
    }

    [JSInvokable]
    public async Task OpenConsulValue(string key, string envName)
    {
        try
        {
            if (ConsulDiffStateService.SelectedSourceEnv == envName)
            {
                if (ConsulDiffStateService.SourceValues.TryGetValue(key, out var consulValue))
                {
                    await OpenFolderUtils.OpenUrlAsync(consulValue.Url);
                }
                else
                {
                    toastService.ShowError($"Chave {key} não encontrada em {envName}");
                }

                return;
            }

            if (ConsulDiffStateService.SelectedTargetEnv == envName)
            {
                if (ConsulDiffStateService.TargetValues.TryGetValue(key, out var consulValue))
                {
                    await OpenFolderUtils.OpenUrlAsync(consulValue.Url);
                }
                else
                {
                    toastService.ShowError($"Chave {key} não encontrada em {envName}");
                }

                return;
            }

           toastService.ShowError($"Ambiente {envName} não encontrado");

        }
        catch (Exception ex)
        {
            toastService.ShowError($"Erro ao abrir valor no Consul: {ex.Message}");
        }
    }

    protected async Task CompareEnvironments()
    {
        if (string.IsNullOrEmpty(ConsulDiffStateService.SelectedSourceEnv) || string.IsNullOrEmpty(ConsulDiffStateService.SelectedTargetEnv))
        {
            toastService.ShowError("Por favor, selecione ambos os ambientes");
            return;
        }

        try
        {
            // Initialize pagination service
            await paginationService.InitializeAsync();

            // Get differences for the current page
            await paginationService.GetPageAsync();

            await RunCompare();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Erro ao comparar ambientes: {ex.Message}");
        }
    }

    private async Task LoadPageDifferences()
    {
        try
        {
            await paginationService.GetPageAsync();

            await RunCompare();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Erro ao comparar ambientes: {ex.Message}");
        }
    }

    protected async Task RunCompare()
    {
        if (ConsulDiffStateService.PageItems.Count == 0)
        {
            await JS.InvokeVoidAsync("initializeDiff2Html2", "", ConsulDiffStateService.SelectedSourceEnv, ConsulDiffStateService.SelectedTargetEnv);
            if (ConsulDiffStateService.PageItems.Count > 0)
            {
                toastService.ShowInfo("Nenhuma diferença encontrada que corresponda aos critérios de pesquisa");
            }
            return;
        }

        var diff = String.Join("\r\n", ConsulDiffStateService.PageItems.Select(x => x.FormattedDiff));
        await JS.InvokeVoidAsync("initializeDiff2Html2", diff, ConsulDiffStateService.SelectedSourceEnv, ConsulDiffStateService.SelectedTargetEnv);
    }

    private async Task HandleSearch()
    {
        ConsulDiffStateService.CurrentPage = 1;
        await LoadPageDifferences();
    }

    private async Task ChangePage(int page)
    {
        ConsulDiffStateService.CurrentPage = page;
        await LoadPageDifferences();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setDotNetReference", DotNetObjectReference.Create(this));

            bool initialized = false;

            ConsulDiffStateService.InitializeState(async x =>
            {
                if (environments.Count >= 2)
                {
                    x.SelectedSourceEnv = environments[0].Name;
                    x.SelectedTargetEnv = environments.Count > 1 ? environments[1].Name : environments[0].Name;
                    await CompareEnvironments();
                }

                initialized = true;
            });

            if (!initialized)
            {
                await RunCompare();
            }
        }
    }
}