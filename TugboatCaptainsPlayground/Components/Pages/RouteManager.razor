@page "/routemanager"
@using System;
@using System.Diagnostics;
@using System.Net;
@using System.Net.Sockets;
@using System.Net.NetworkInformation;
@using System.Linq;
@using Common.Models;
@using Common.Services.Interfaces;
@using System.Collections.Generic;
@using System.Threading.Tasks;
@inject IJSRuntime JS
@inject ToastService ToastService
@inject IConfigurationService ConfigService

<PageTitle>Route Manager</PageTitle>

<div class="container-fluid pb-5">
    <h3 class="mb-4">Route Manager</h3>
    <p>Add specific routes for domains through selected network interfaces</p>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Domain Names</h5>
                </div>
                <div class="card-body">
                    <label>Domain Names</label>
                    <div class="mb-2">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="selectAllDomains"
                                   checked="@AreAllDomainsSelected" @onchange="ToggleAllDomains" />
                            <label class="form-check-label" for="selectAllDomains">
                                <strong>Select All Domains</strong>
                            </label>
                        </div>
                    </div>
                    <div class="domain-list border rounded p-2" style="max-height: 200px; overflow-y: auto;">
                        @foreach (var domain in Config.RouteDomains)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="domain-@domain"
                                       checked="@SelectedDomains.Contains(domain)"
                                       @onchange="e => ToggleDomain(domain, e.Value is bool b && b)" />
                                <label class="form-check-label" for="domain-@domain">
                                    @domain
                                </label>
                            </div>
                        }
                    </div>
                    <div class="mt-2">
                        <button class="btn btn-outline-primary btn-sm" type="button" @onclick="() => ShowAddDomainModal = true">
                            <i class="bi bi-plus"></i> Add New Domain
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Available Network Interfaces</h5>
                </div>
                <div class="card-body">
                    @if (NetworkInterfaces.Any())
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Select</th>
                                    <th>Name</th>
                                    <th>Status</th>
                                    <th>IP Addresses</th>
                                    <th>Default Gateway</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var (iface, index) in NetworkInterfaces.Select((iface, index) => (iface, index)))
                                {
                                    <tr class="@(SelectedInterfaceIndex == index ? "table-primary" : "")">
                                        <td class="text-center">
                                            <button class="btn btn-sm @(SelectedInterfaceIndex == index ? "btn-primary" : "btn-outline-primary")"
                                                    @onclick="() => SelectInterface(index)">
                                                <i class="bi bi-check-circle-fill"></i>
                                            </button>
                                        </td>
                                        <td>@iface.Name</td>
                                        <td>
                                            <span class="badge @(iface.OperationalStatus == OperationalStatus.Up ? "bg-success" : "bg-danger")">
                                                @iface.OperationalStatus
                                            </span>
                                        </td>
                                        <td>
                                            @foreach (var ip in GetIPAddresses(iface))
                                            {
                                                <div>@ip</div>
                                            }
                                        </td>
                                        <td>@GetDefaultGateway(iface)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <div class="alert alert-warning">No network interfaces found</div>
                    }
                </div>
            </div>
        </div>


    </div>

    @if (ShowAddDomainModal)
    {
        <div class="modal fade show" style="display: block" tabindex="-1" @onclick="() => ShowAddDomainModal = false">
            <div class="modal-dialog">
                <div class="modal-content" @onclick:stopPropagation>
                    <div class="modal-header">
                        <h5 class="modal-title">Add New Domain</h5>
                        <button type="button" class="btn-close" @onclick="() => ShowAddDomainModal = false"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="newDomainInput" class="form-label">Domain Name:</label>
                            <input type="text" class="form-control" id="newDomainInput" @bind="NewDomain"
                                   placeholder="example.com" @onkeypress="@(e => { if (e.Key == "Enter") { AddDomain(); } })" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => ShowAddDomainModal = false">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="AddDomain"><i class="bi bi-plus-circle"></i> Add Domain</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <div class="row mb-4">
        <div class="col-md-12">
            <div class="d-flex gap-3">
                <button type="button" class="btn btn-primary btn-lg" @onclick="AddRoutes" disabled="@(!CanAddRoutes)">
                    <i class="bi bi-plus-circle"></i> Add Routes
                </button>
                <button type="button" class="btn btn-danger btn-lg" @onclick="ClearRoutes">
                    <i class="bi bi-trash"></i> Clear Routes
                </button>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <div class="alert @StatusAlertClass">
            @((MarkupString)StatusMessage)
        </div>
    }

    @if (ResolvedAddresses.Any())
    {
        <div class="row mt-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Resolved IP Addresses</h5>
                    </div>
                    <div class="card-body">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>IP Address</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var (ip, status) in ResolvedAddresses)
                                {
                                    <tr>
                                        <td>@ip</td>
                                        <td>
                                            @if (status == "Success")
                                            {
                                                <span class="badge bg-success"><i class="bi bi-check-circle-fill"></i> Added</span>
                                            }
                                            else if (status == "Removed")
                                            {
                                                <span class="badge bg-success"><i class="bi bi-check-circle-fill"></i> Removed</span>
                                            }
                                            else if (status == "Processing")
                                            {
                                                <span class="badge bg-info"><i class="bi bi-hourglass-split"></i> Processing...</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger"><i class="bi bi-x-circle-fill"></i> @status</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string Domain { get; set; } = "";
    private HashSet<string> SelectedDomains { get; set; } = new();
    private string NewDomain { get; set; } = "";
    private bool ShowAddDomainModal { get; set; } = false;
    private List<NetworkInterface> NetworkInterfaces { get; set; } = new();
    private int SelectedInterfaceIndex { get; set; } = -1;
    private string StatusMessage { get; set; } = "";
    private string StatusAlertClass { get; set; } = "alert-info";
    private List<(string ip, string status)> ResolvedAddresses { get; set; } = new();
    private ConfigModel Config { get; set; } = new();

    private bool CanAddRoutes => SelectedDomains.Count > 0 && SelectedInterfaceIndex >= 0;

    protected override async Task OnInitializedAsync()
    {
        Config = ConfigService.GetConfig();
        LoadNetworkInterfaces();
    }

    private bool AreAllDomainsSelected => Config.RouteDomains.Count > 0 &&
                                         SelectedDomains.Count == Config.RouteDomains.Count;

    private void ToggleAllDomains(ChangeEventArgs e)
    {
        bool isChecked = e.Value is bool b && b;

        if (isChecked)
        {
            // Select all domains
            SelectedDomains = new HashSet<string>(Config.RouteDomains);
        }
        else
        {
            // Deselect all domains
            SelectedDomains.Clear();
        }
    }

    private void ToggleDomain(string domain, bool isChecked)
    {
        if (isChecked) SelectedDomains.Add(domain);
        else SelectedDomains.Remove(domain);
    }

    private async Task AddDomain()
    {
        if (string.IsNullOrWhiteSpace(NewDomain))
        {
            ToastService.ShowError("Please enter a domain name");
            return;
        }

        if (!Config.RouteDomains.Contains(NewDomain))
        {
            Config.RouteDomains.Add(NewDomain);
            await ConfigService.SaveConfigAsync(Config);
            Domain = NewDomain;
            NewDomain = "";
            ShowAddDomainModal = false;
            ToastService.ShowSuccess("Domain added successfully");
        }
        else
        {
            ToastService.ShowWarning("Domain already exists");
        }
    }

    private async Task RemoveDomain(string domain)
    {
        if (Config.RouteDomains.Contains(domain))
        {
            Config.RouteDomains.Remove(domain);
            await ConfigService.SaveConfigAsync(Config);
            if (Domain == domain)
            {
                Domain = "";
            }
            ToastService.ShowSuccess("Domain removed successfully");
        }
    }

    private void LoadNetworkInterfaces()
    {
        try
        {
            // Only get IPv4 interfaces that are up and have IPv4 addresses
            NetworkInterfaces = NetworkInterface.GetAllNetworkInterfaces()
                .Where(n => n.OperationalStatus == OperationalStatus.Up)
                .Where(n => n.GetIPProperties().UnicastAddresses
                    .Any(a => a.Address.AddressFamily == AddressFamily.InterNetwork))
                .ToList();
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error loading network interfaces: {ex.Message}";
            StatusAlertClass = "alert-danger";
        }
    }

    private void SelectInterface(int index)
    {
        SelectedInterfaceIndex = index;
    }

    private List<string> GetIPAddresses(NetworkInterface ni)
    {
        var addresses = new List<string>();
        foreach (var ip in ni.GetIPProperties().UnicastAddresses)
        {
            if (ip.Address.AddressFamily == AddressFamily.InterNetwork)
            {
                addresses.Add(ip.Address.ToString());
            }
        }
        return addresses;
    }

    private string GetDefaultGateway(NetworkInterface ni)
    {
        try
        {
            var ipProps = ni.GetIPProperties();
            var gateways = ipProps.GatewayAddresses
                .Where(g => g.Address != null && g.Address.AddressFamily == AddressFamily.InterNetwork)
                .Select(g => g.Address.ToString())
                .ToList();

            return gateways.FirstOrDefault() ?? "Not available";
        }
        catch
        {
            return "Not available";
        }
    }

    private int GetInterfaceIndex(string interfaceId)
    {
        foreach (NetworkInterface ni in NetworkInterface.GetAllNetworkInterfaces())
        {
            if (ni.Id == interfaceId)
            {
                foreach (UnicastIPAddressInformation ip in ni.GetIPProperties().UnicastAddresses)
                {
                    if (ip.Address.AddressFamily == AddressFamily.InterNetwork)
                    {
                        return ni.GetIPProperties().GetIPv4Properties().Index;
                    }
                }
            }
        }
        return -1;
    }

    private async Task ClearRoutes()
    {
        if (SelectedDomains.Count == 0)
        {
            ToastService.ShowError("Please select at least one domain");
            return;
        }

        StatusMessage = "Resolving domain names to clear routes...";
        StatusAlertClass = "alert-info";
        ResolvedAddresses = new List<(string ip, string status)>();
        await InvokeAsync(StateHasChanged);

        try
        {
            StatusMessage = $"Processing {SelectedDomains.Count} domains for route removal...";
            StatusAlertClass = "alert-info";
            await InvokeAsync(StateHasChanged);

            int totalAddresses = 0;
            int successCount = 0;
            int errorCount = 0;

            foreach (var domain in SelectedDomains)
            {
                try
                {
                    IPAddress[] addresses = await Task.Run(() => Dns.GetHostAddresses(domain));

                    if (addresses.Length == 0)
                    {
                        StatusMessage = $"Could not resolve any IP addresses for {domain}";
                        StatusAlertClass = "alert-warning";
                        continue;
                    }

                    StatusMessage = $"Found {addresses.Length} IP addresses for {domain}. Removing routes...";
                    StatusAlertClass = "alert-info";
                    await InvokeAsync(StateHasChanged);

                    foreach (IPAddress ip in addresses)
                    {
                        if (ip.AddressFamily == AddressFamily.InterNetwork) // Only IPv4
                        {
                            totalAddresses++;
                            var ipString = ip.ToString();
                            ResolvedAddresses.Add((ipString, "Processing"));
                            await InvokeAsync(StateHasChanged);

                            try
                            {
                                await DeleteRoute(ipString);
                                UpdateAddressStatus(ipString, "Removed");
                                successCount++;
                            }
                            catch (Exception ex)
                            {
                                UpdateAddressStatus(ipString, $"Error: {ex.Message}");
                                errorCount++;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    StatusMessage = $"Error processing domain {domain}: {ex.Message}";
                    StatusAlertClass = "alert-danger";
                }
            }

            StatusMessage = $"Processed {SelectedDomains.Count} domains. Removed {successCount} routes, {errorCount} errors.";
            StatusAlertClass = "alert-success";
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
            StatusAlertClass = "alert-danger";
        }
    }

    private async Task AddRoutes()
    {
        if (SelectedDomains.Count == 0)
        {
            ToastService.ShowError("Please select at least one domain");
            return;
        }

        if (SelectedInterfaceIndex < 0 || SelectedInterfaceIndex >= NetworkInterfaces.Count)
        {
            ToastService.ShowError("Please select a network interface");
            return;
        }

        StatusMessage = "Resolving domain name...";
        StatusAlertClass = "alert-info";
        ResolvedAddresses = new List<(string ip, string status)>();
        await InvokeAsync(StateHasChanged);

        try
        {
            var selectedInterface = NetworkInterfaces[SelectedInterfaceIndex];
            int interfaceMetric = GetInterfaceIndex(selectedInterface.Id);

            if (interfaceMetric == -1)
            {
                StatusMessage = "Failed to retrieve interface index.";
                StatusAlertClass = "alert-danger";
                return;
            }

            // Get the default gateway for the selected interface
            string gateway = GetDefaultGateway(selectedInterface);
            if (gateway == "Not available")
            {
                StatusMessage = "No default gateway available for this interface. Please select a different interface.";
                StatusAlertClass = "alert-warning";
                return;
            }

            StatusMessage = $"Processing {SelectedDomains.Count} domains...";
            StatusAlertClass = "alert-info";
            await InvokeAsync(StateHasChanged);

            int totalAddresses = 0;
            int successCount = 0;
            int errorCount = 0;

            foreach (var domain in SelectedDomains)
            {
                try
                {
                    IPAddress[] addresses = await Task.Run(() => Dns.GetHostAddresses(domain));

                    if (addresses.Length == 0)
                    {
                        StatusMessage = $"Could not resolve any IP addresses for {domain}";
                        StatusAlertClass = "alert-warning";
                        continue;
                    }

                    StatusMessage = $"Found {addresses.Length} IP addresses for {domain}. Adding routes...";
                    StatusAlertClass = "alert-info";
                    await InvokeAsync(StateHasChanged);

                    foreach (IPAddress ip in addresses)
                    {
                        if (ip.AddressFamily == AddressFamily.InterNetwork) // Only IPv4
                        {
                            totalAddresses++;
                            var ipString = ip.ToString();
                            ResolvedAddresses.Add((ipString, "Processing"));
                            await InvokeAsync(StateHasChanged);

                            try
                            {
                                await AddRoute(ipString, interfaceMetric, gateway);
                                UpdateAddressStatus(ipString, "Success");
                                successCount++;
                            }
                            catch (Exception ex)
                            {
                                UpdateAddressStatus(ipString, $"Error: {ex.Message}");
                                errorCount++;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    StatusMessage = $"Error processing domain {domain}: {ex.Message}";
                    StatusAlertClass = "alert-danger";
                }
            }

            StatusMessage = $"Processed {SelectedDomains.Count} domains. Added {successCount} routes, {errorCount} errors.";
            StatusAlertClass = "alert-success";
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
            StatusAlertClass = "alert-danger";
        }

        await InvokeAsync(StateHasChanged);
    }

    private void UpdateAddressStatus(string ip, string status)
    {
        var index = ResolvedAddresses.FindIndex(a => a.ip == ip);
        if (index >= 0)
        {
            ResolvedAddresses[index] = (ip, status);
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task DeleteRoute(string ip)
    {
        var psi = new ProcessStartInfo
        {
            FileName = "cmd.exe",
            Arguments = $"/C route delete {ip}",
            Verb = "runas", // Requires admin privileges
            WindowStyle = ProcessWindowStyle.Hidden,
            CreateNoWindow = true,
            UseShellExecute = true
        };

        await Task.Run(() =>
        {
            var process = Process.Start(psi);
            process.WaitForExit();

            if (process.ExitCode != 0)
            {
                throw new Exception($"Route delete command failed with exit code {process.ExitCode}");
            }
        });
    }

    private async Task AddRoute(string ip, int interfaceIndex, string gateway)
    {
        var psi = new ProcessStartInfo
        {
            FileName = "cmd.exe",
            Arguments = $"/C route add {ip} mask 255.255.255.255 {gateway} METRIC 1 IF {interfaceIndex} -p",
            Verb = "runas", // Requires admin privileges
            WindowStyle = ProcessWindowStyle.Hidden,
            CreateNoWindow = true,
            UseShellExecute = true
        };

        await Task.Run(() =>
        {
            var process = Process.Start(psi);
            process.WaitForExit();

            if (process.ExitCode != 0)
            {
                throw new Exception($"Route command failed with exit code {process.ExitCode}");
            }
        });
    }
}
