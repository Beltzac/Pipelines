@using Common.Models
@using CSharpDiff.Patches.Models
@using CSharpDiff.Diffs.Models

@if (Diff?.Patch != null)
{
    <div class="diff-container">
        <div class="diff-header">
            @if (Diff.Patch.OldFileName == Diff.Patch.NewFileName)
            {
                <span>@Diff.Patch.OldFileName</span>
            }
            else
            {
                <span>@Diff.Patch.OldFileName ↔ @Diff.Patch.NewFileName</span>
            }
        </div>
        <div class="diff-controls">
            <div class="controls-left">@LeftButtons</div>
            <div class="controls-right">@RightButtons</div>
        </div>

        @foreach (var hunk in Diff.Patch.Hunks)
        {
            <div class="hunk">
                <div class="hunk-header">@@ -@hunk.oldStart,@hunk.oldLines +@hunk.newStart,@hunk.newLines @@</div>
                @{
                    var oldLines = hunk.lines.Where(l => l.StartsWith("-") || l.StartsWith(" ")).ToList();
                    var newLines = hunk.lines.Where(l => l.StartsWith("+") || l.StartsWith(" ")).ToList();
                    int max = Math.Max(oldLines.Count, newLines.Count);
                }
                <div class="panels">
                    <div class="panel old-panel">
                        @for (int i = 0; i < max; i++)
                        {
                            var oldLine = i < oldLines.Count ? oldLines[i] : null;
                            bool isContext = oldLine?.StartsWith(" ") == true;
                            string cls = oldLine?.StartsWith("-") == true ? "removed" : isContext ? "context" : "empty";
                            int num = !string.IsNullOrWhiteSpace(oldLine) && !oldLine.StartsWith("+") ? hunk.oldStart + oldLines.Take(i).Count(l => !l.StartsWith("+")) : -1;
                            <div class="line @cls">
                                <span class="lineno">@(num > 0 ? num.ToString() : string.Empty)</span>
                                <span class="code">@(oldLine != null ? oldLine.Substring(1) : string.Empty)</span>
                            </div>
                        }
                    </div>
                    <div class="panel new-panel">
                        @for (int i = 0; i < max; i++)
                        {
                            var newLine = i < newLines.Count ? newLines[i] : null;
                            bool isContext = newLine?.StartsWith(" ") == true;
                            string cls = newLine?.StartsWith("+") == true ? "added" : isContext ? "context" : "empty";
                            int num = !string.IsNullOrWhiteSpace(newLine) && !newLine.StartsWith("-") ? hunk.newStart + newLines.Take(i).Count(l => !l.StartsWith("-")) : -1;
                            <div class="line @cls">
                                <span class="lineno">@(num > 0 ? num.ToString() : string.Empty)</span>
                                <span class="code">@(newLine != null ? newLine.Substring(1) : string.Empty)</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="no-diff"><p>No differences to display.</p></div>
}

@code {
    [Parameter] public IDiffResult Diff { get; set; }
    [Parameter] public RenderFragment LeftButtons { get; set; }
    [Parameter] public RenderFragment RightButtons { get; set; }
}

<style>
.diff-container {
    font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
    font-size: 0.9em;
    border: 1px solid #ddd;
    background: #fff;
}
.diff-header {
    background: #f1f1f1;
    padding: 8px;
    font-weight: bold;
    border-bottom: 1px solid #ccc;
}
.diff-controls {
    display: flex;
    justify-content: space-between;
    padding: 4px 8px;
    background: #fafafa;
    border-bottom: 1px solid #eee;
}
.hunk { margin: 12px 0; }
.hunk-header {
    background: #eef;
    padding: 4px 8px;
    font-style: italic;
    border-radius: 3px;
}
/*  TWO independent horizontal scrollbars  */
.panels {
    display: flex;
    gap: 1px; /* thin divider */
}
.panel {
    flex: 1 1 0;
    overflow-x: auto;            /* each column scrolls horizontally */
    white-space: pre;            /* prevent wrapping */
    box-sizing: border-box;
    padding: 4px 0;
    border-left: 1px solid #e2e2e2;
}
.panel:first-child { border-left: none; }

.line {
    display: flex;
    align-items: flex-start;
    padding: 0 8px;
}
.lineno {
    width: 5ch;
    text-align: right;
    margin-right: 6px;
    user-select: none;
    background: #f0f0f0;
    padding: 0 4px;
    border-radius: 2px;
    font-weight: 600;
    color: #555;
}
.empty .lineno { visibility: hidden; }
.code { flex: 1; }

/* Highlighting */
.added   { background: #eaffea; }
.removed { background: #ffeaea; }
.context { background: #f9f9f9; }

/* No‑diff */
.no-diff {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 40px;
    color: #777;
    font-style: italic;
}
.no-diff p { margin: 0; }
</style>
