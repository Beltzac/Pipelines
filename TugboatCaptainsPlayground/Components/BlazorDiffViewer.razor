@using Common.Models
@using CSharpDiff.Patches.Models
@using CSharpDiff.Diffs.Models

@if (Diff?.Patch is not null)
{
    <div class="diff-file">
        <div class="diff-header">
            @if (Diff.Patch.OldFileName == Diff.Patch.NewFileName)
            {
                <span>@Diff.Patch.OldFileName</span>
            }
            else
            {
                <span>@Diff.Patch.OldFileName â†” @Diff.Patch.NewFileName</span>
            }
        </div>

        <div class="diff-controls">
            <div class="controls-left">@LeftButtons</div>
            <div class="controls-right">@RightButtons</div>
        </div>

        @foreach (var hunk in _prepared)
        {
            <div class="hunk">
                <div class="hunk-header">@@ -@hunk.OldStart,@hunk.OldLines +@hunk.NewStart,@hunk.NewLines @@</div>
                <div class="panels">
                    <div class="panel old-panel">
                        @for (int i = 0; i < hunk.RowCount; i++)
                        {
                            var row = hunk.Rows[i];
                            <div class="line @row.OldCls">
                                <span class="lineno">@(row.OldNo?.ToString() ?? string.Empty)</span>
                                <span class="code">@row.OldText</span>
                            </div>
                        }
                    </div>

                    <div class="panel new-panel">
                        @for (int i = 0; i < hunk.RowCount; i++)
                        {
                            var row = hunk.Rows[i];
                            <div class="line @row.NewCls">
                                <span class="lineno">@(row.NewNo?.ToString() ?? string.Empty)</span>
                                <span class="code">@row.NewText</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="no-diff">No differences to display.</div>
}

@code {
    private sealed record Row(
        string OldText,
        string NewText,
        int? OldNo,
        int? NewNo,
        string OldCls,
        string NewCls);

    private sealed record PreparedHunk(
        int OldStart,
        int OldLines,
        int NewStart,
        int NewLines,
        Row[] Rows)
    {
        public int RowCount => Rows.Length;
    }

    private IReadOnlyList<PreparedHunk>? _prepared;
    private IDiffResult? _prev;

    [Parameter] public IDiffResult? Diff { get; set; }
    [Parameter] public RenderFragment? LeftButtons { get; set; }
    [Parameter] public RenderFragment? RightButtons { get; set; }

    protected override void OnParametersSet()
    {
        if (ReferenceEquals(_prev, Diff)) return;
        _prev = Diff;

        if (Diff?.Patch is null)
        {
            _prepared = null;
            return;
        }

        var hunkList = new List<PreparedHunk>(Diff.Patch.Hunks.Count());

        foreach (var h in Diff.Patch.Hunks)
        {
            // Build filtered lists once (no LINQ in loops later)
            var oldLines = new List<string>();
            var newLines = new List<string>();
            foreach (var l in h.lines)
            {
                if (l.StartsWith("-") || l.StartsWith(" ")) oldLines.Add(l);
                if (l.StartsWith("+") || l.StartsWith(" ")) newLines.Add(l);
            }

            int max = Math.Max(oldLines.Count, newLines.Count);
            var rows = new Row[max];

            int oldNum = h.oldStart;
            int newNum = h.newStart;

            // precompute running counts to avoid Count/Take
            for (int i = 0; i < max; i++)
            {
                string oldLine = i < oldLines.Count ? oldLines[i] : string.Empty;
                string newLine = i < newLines.Count ? newLines[i] : string.Empty;

                string oldCls;
                string newCls;
                int? oldNo = null;
                int? newNo = null;

                // classify old side
                if (string.IsNullOrEmpty(oldLine))
                {
                    oldCls = "blank";
                }
                else if (oldLine.StartsWith("-"))
                {
                    oldCls = "removed";
                    oldNo = oldNum++;
                }
                else // context
                {
                    oldCls = "context";
                    oldNo = oldNum++;
                }

                // classify new side
                if (string.IsNullOrEmpty(newLine))
                {
                    newCls = "blank";
                }
                else if (newLine.StartsWith("+"))
                {
                    newCls = "added";
                    newNo = newNum++;
                }
                else // context
                {
                    newCls = "context";
                    newNo = newNum++;
                }

                string oldText = oldLine.Length > 0 ? oldLine.Substring(1) : string.Empty;
                string newText = newLine.Length > 0 ? newLine.Substring(1) : string.Empty;

                rows[i] = new Row(oldText, newText, oldNo, newNo, oldCls, newCls);
            }

            hunkList.Add(new PreparedHunk(h.oldStart, h.oldLines, h.newStart, h.newLines, rows));
        }

        _prepared = hunkList;
    }

    protected override bool ShouldRender() => true;
}

<style>
    :root {
        --font-mono: ui-monospace, 'SFMono-Regular', Consolas, Menlo, monospace;
        --border: #d0d7de;
        --bg-stage: #ffffff;
        --bg-header: #f6f8fa;
        --bg-toolbar: #fbfcfd;
        --bg-hunk: #eef6ff;
        --bg-lineno: #f0f3f6;
        --bg-added: #e6ffed;
        --bg-removed: #ffeef0;
        --bg-context: transparent;
        --line-height: 20px;
    }

    /* File wrapper --------------------------------------------------- */
    .diff-file {
        border: 1px solid var(--border);
        border-radius: 6px;
        overflow: hidden;
        font-family: var(--font-mono);
        font-size: 13px;
        background: var(--bg-stage);
    }

    /* Sticky header -------------------------------------------------- */
    .diff-header {
        position: sticky;
        top: 0;
        z-index: 3;
        padding: 8px 12px;
        border-bottom: 1px solid var(--border);
        font-weight: 600;
        background: var(--bg-header);
    }

    /* Toolbar / Controls (supports either markup) -------------------- */
    .toolbar,
    .diff-controls {
        position: sticky;
        top: 36px; /* height of .diff-header */
        z-index: 2;
        padding: 8px 12px;
        border-bottom: 1px solid var(--border);
        background: var(--bg-toolbar);
        /* layout */
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1rem;
        /* handle overflow */
        overflow-x: auto;
        white-space: nowrap;
    }

    .toolbar-left,
    .controls-left {
        display: flex;
        align-items: center;
        gap: .5rem;
    }

    .toolbar-right,
    .controls-right {
        display: flex;
        align-items: center;
        gap: .5rem;
        margin-left: auto; /* push to the far right */
    }

    /* Hunks ---------------------------------------------------------- */
    .hunk-header {
        padding: 4px 12px;
        border-top: 1px solid var(--border);
        border-bottom: 1px solid var(--border);
        background: var(--bg-hunk);
        font-style: italic;
        position: sticky;
        top: 68px; /* header + controls */
        z-index: 1;
    }

    /* Panels grid ---------------------------------------------------- */
    .panels {
        display: grid;
        grid-template-columns: 1fr 1fr;
    }

    .panel {
        overflow-x: auto;
        border-right: 1px solid var(--border);
    }

        .panel:last-child {
            border-right: none;
        }

    /* Lines ---------------------------------------------------------- */
    .line {
        display: grid;
        grid-template-columns: minmax(5ch,auto) 1fr;
        min-height: var(--line-height);
        width: max-content; /* enable horizontal scroll for very long lines */
    }

    .lineno {
        text-align: right;
        padding: 0 6px;
        background: var(--bg-lineno);
        color: #6e7781;
        border-right: 1px solid var(--border);
        position: sticky;
        left: 0;
        user-select: none;
    }

    .blank .lineno {
        visibility: hidden;
    }

    /* backgrounds */
    .added {
        background: var(--bg-added);
    }

    .removed {
        background: var(--bg-removed);
    }

    .context {
        background: var(--bg-stage);
    }

    .blank {
        background: var(--bg-stage);
    }

    /* code cell */
    .code {
        padding: 0 12px 0 6px;
        white-space: pre; /* keep spacing */
    }

    /* No diff -------------------------------------------------------- */
    .no-diff {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 4rem 0;
        color: #555;
        font-style: italic;
    }
</style>
