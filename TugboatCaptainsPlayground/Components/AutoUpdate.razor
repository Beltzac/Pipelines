@using Common.Services
@using Common.Services.Interfaces
@using Common.Utils
@using static Common.Services.AutoUpdateService
@inject IAutoUpdateService AutoUpdateService
@inject IToastService toastService

@if (updateAvailable && downloadProgress == 0)
{
    <!-- Show the 'Update Available' link -->
    <a class="nav-link" href="#" @onclick="DownloadUpdateAsync">
        <span class="bi bi-cloud-arrow-down" aria-hidden="true"></span> @(latestRelease.tag_name) Disponível!
    </a>
}
else if (updateAvailable && downloadProgress > 0)
{
    <ProgressBar IsLoading="@isLoading" ProgressValue="@downloadProgress" TextColor="black" Height="25px"/>
}
else if (isLoading)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Carregando...</span>
    </div>
}
else
{
    <a class="nav-link" href="#" @onclick="CheckForUpdatesAsync" title="Clique para verificar atualizações">
        <span class="bi bi-cloud-check" aria-hidden="true"></span> @($"Versão {currentVersion}")
    </a>
}

@code {
    private bool updateAvailable = false;
    private int downloadProgress = 0;
    private Release latestRelease;
    private string currentVersion;
    private bool isLoading = false; // New loading state

    protected override async Task OnInitializedAsync()
    {
        currentVersion = VersionHelper.GetCurrentVersion().ToString();
        await CheckForUpdatesAsync();
    }

    private async Task CheckForUpdatesAsync()
    {
        isLoading = true; // Set loading state to true
        try
        {
            latestRelease = await AutoUpdateService.CheckForUpdatesAsync();
            updateAvailable = latestRelease != null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DownloadUpdateAsync()
    {
        isLoading = true;
        try
        {
            downloadProgress = 0;
            if (latestRelease != null)
            {
                await AutoUpdateService.DownloadAndInstallAsync(latestRelease, UpdateProgress);
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Erro ao atualizar para a nova versão: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void UpdateProgress(int progress)
    {
        downloadProgress = progress;
        InvokeAsync(StateHasChanged);
    }
}
