@using Microsoft.AspNetCore.Components
@using TugboatCaptainsPlayground.Services.Interfaces

<div class="sticky-pagination @Class">
    <div class="sticky-pagination-content">
        <nav aria-label="Paginação">
            <ul class="pagination mb-0">
                <li class="page-item @(State.CurrentPage <= 1 ? "disabled" : "")">
                    <button class="page-link page-link-prev" @onclick="async () => await ChangePage(State.CurrentPage - 1)" disabled="@(State.CurrentPage <= 1)">
                        ‹ Anterior
                    </button>
                </li>

                @{
                    // We want a stable number of visible page links (e.g., 5) around the current page
                    // plus we always show the first and last (if total pages are greater).
                    const int maxVisiblePages = 5;

                    // If total pages are less than or equal to maxVisiblePages,
                    // simply show all pages.
                    if (PageCount <= maxVisiblePages)
                    {
                        for (int i = 1; i <= PageCount; i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(State.CurrentPage == pageNumber ? "active" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(pageNumber)">
                                    @pageNumber
                                </button>
                            </li>
                        }
                    }
                    else
                    {
                        // Always show first page
                        <li class="page-item @(State.CurrentPage == 1 ? "active" : "")">
                            <button class="page-link" @onclick="async () => await ChangePage(1)">
                                1
                            </button>
                        </li>

                        // Determine how many pages appear in the 'middle' (excludes first/last).
                        int middleCount = maxVisiblePages - 2; // e.g., if maxVisiblePages=5, 3 are in the middle

                        // We'll center them around the CurrentPage.
                        int half = middleCount / 2;
                        int middleStart = State.CurrentPage - half;
                        int middleEnd = State.CurrentPage + half;

                        // If middleCount is odd, expand end by 1 so we get an extra slot.
                        if (middleCount % 2 == 1)
                        {
                            middleEnd++;
                        }

                        // Clip left side
                        if (middleStart < 2)
                        {
                            // shift the range to the right
                            middleEnd += (2 - middleStart);
                            middleStart = 2;
                        }
                        // Clip right side
                        if (middleEnd > PageCount - 1)
                        {
                            // shift the range to the left
                            middleStart -= (middleEnd - (PageCount - 1));
                            middleEnd = PageCount - 1;
                        }

                        // Render middle pages
                        for (int i = middleStart; i <= middleEnd; i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(State.CurrentPage == pageNumber ? "active" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(pageNumber)">
                                    @pageNumber
                                </button>
                            </li>
                        }

                        // Always show last page
                        <li class="page-item @(State.CurrentPage == PageCount ? "active" : "")">
                            <button class="page-link" @onclick="async () => await ChangePage(PageCount)">
                                @PageCount
                            </button>
                        </li>
                    }
                }

                <li class="page-item @(State.CurrentPage >= PageCount ? "disabled" : "")">
                    <button class="page-link page-link-next" @onclick="async () => await ChangePage(State.CurrentPage + 1)" disabled="@(State.CurrentPage >= PageCount)">
                        Próximo ›
                    </button>
                </li>
            </ul>
        </nav>

        <div class="d-flex align-items-center">
            <div class="ms-3 d-none d-md-block">
                Mostrando @((State.CurrentPage - 1) * State.PageSize + 1) a @Math.Min(State.CurrentPage * State.PageSize, State.TotalCount) de @State.TotalCount
            </div>

            <div class="ms-3" style="min-width: 8rem;">
                <div class="form-group">
                    <select class="form-select w-auto" @bind="State.PageSize">
                        <option value="5">5 por página</option>
                        <option value="10">10 por página</option>
                        <option value="20">20 por página</option>
                        <option value="50">50 por página</option>
                        <option value="100">100 por página</option>
                    </select>
                </div>
            </div>

        </div>
    </div>
</div>

<style>
    .sticky-pagination {
    position: sticky;
    bottom: 0;
    background-color: var(--bs-body-bg);
    z-index: 1000;
    padding: 1rem;
    box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);
    border-radius: 0.375rem;
    margin-top: 1.5rem;
    }

    .sticky-pagination-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    }

    /* Use a fixed width for numeric pages. */
    .pagination .page-link {
    min-width: 4rem;
    text-align: center;
    }

    /* Make Prev/Next buttons even wider */
    .page-link-prev,
    .page-link-next {
    min-width: 6rem;
    }

    @@media (max-width: 768px) {
    .sticky-pagination {
    position: static;
    margin-top: 1rem;
    }

    .sticky-pagination-content {
    justify-content: center;
    }
    }
</style>

@code {
    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public required IPaginates State { get; set; }

    [Parameter]
    public EventCallback<int> OnPageChange { get; set; }

    private bool IsDisabled => !(State is ITracksLoading) || (State is ITracksLoading loadingState && loadingState.IsLoading);

    private int PageCount => (int)Math.Ceiling((double)State.TotalCount / State.PageSize);

    private async Task ChangePage(int page)
    {
        if (IsDisabled)
            return;

        if (page < 1 || (page * State.PageSize) - State.PageSize > State.TotalCount)
            return;

        await OnPageChange.InvokeAsync(page);
    }
}