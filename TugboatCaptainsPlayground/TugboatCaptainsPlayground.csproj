<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net9.0-windows7.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
    <ApplicationIcon>Assets\app.ico</ApplicationIcon>
    <PlatformTarget>x64</PlatformTarget>
    <PublishTrimmed>False</PublishTrimmed>
    <PublishAot>False</PublishAot>
    <Platforms>AnyCPU;x64</Platforms>

    <!-- Bundle .NET runtime -->
    <SelfContained>true</SelfContained>
    <!--<SelfContained>false</SelfContained>-->

    <!-- Bundle all dependencies into a single executable -->
    <PublishSingleFile>true</PublishSingleFile>
    <IncludeAllContentForSelfExtract>true</IncludeAllContentForSelfExtract>

    <!-- Include debug symbols into the single-file -->
    <DebugType>embedded</DebugType>

    <!-- Generate an embedded files manifest -->
    <GenerateEmbeddedFilesManifest>true</GenerateEmbeddedFilesManifest>

    <!-- Turn off these warnings -->
    <NoWarn>SPELL,NU1902,NU1903,TA100</NoWarn>

    <!--<EnableDefaultContentItems>false</EnableDefaultContentItems>-->
    <IsWebConfigTransformDisabled>true</IsWebConfigTransformDisabled>
  </PropertyGroup>

  <PropertyGroup>
    <EmbedAllSources>true</EmbedAllSources>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <OutputType>Exe</OutputType>
	<EnableCompressionInSingleFile>false</EnableCompressionInSingleFile>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <OutputType>WinExe</OutputType>
    <EnableCompressionInSingleFile>true</EnableCompressionInSingleFile>
  </PropertyGroup>

  <ItemGroup>
    <!-- Example: we do not copy appsettings*.json by default. -->
    <Content Update="appsettings*.json" CopyToPublishDirectory="Never" />
    <Content Update="Common.pdb" CopyToPublishDirectory="Never">
      <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
    </Content>
    <Content Update="TugboatCaptainsPlayground.staticwebassets.endpoints.json" CopyToPublishDirectory="Never">
      <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
    </Content>
    <Content Update="web.config" CopyToPublishDirectory="Never">
      <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <Content Include="Assets\app.ico" />
  </ItemGroup>

  <!-- Packages -->
  <ItemGroup>
    <PackageReference Include="Blazor.Bootstrap" Version="3.3.1" />
    <PackageReference Include="Blazor.ContextMenu" Version="2.1.0" />
    <PackageReference Include="BlazorDateRangePicker" Version="6.1.0" />
    <PackageReference Include="Blazored.Typeahead" Version="4.7.0" />
    <PackageReference Include="EFCore.NamingConventions" Version="9.0.0" />
    <PackageReference Include="FuzzySharp" Version="2.0.2" />
    <PackageReference Include="GitInfo" Version="3.5.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="GlobalHotKeyCore" Version="1.2.0" />
    <PackageReference Include="H.NotifyIcon" Version="2.3.0" />
    <PackageReference Include="Humanizer" Version="3.0.0-beta.54" />
    <PackageReference Include="Humanizer.Core.pt" Version="3.0.0-beta.54" />
    <PackageReference Include="Json.More.Net" Version="2.1.1" />
    <PackageReference Include="LibGit2Sharp" Version="0.31.0" />
    <PackageReference Include="Markdig" Version="0.41.1" />
    <PackageReference Include="Microsoft.AspNetCore.SignalR.Client" Version="9.0.3" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.FileProviders.Embedded" Version="9.0.4" />
    <PackageReference Include="Microsoft.TeamFoundationServer.Client" Version="19.246.0-preview" />
    <PackageReference Include="Photino.NET" Version="4.0.16" />
    <PackageReference Include="Quartz" Version="3.14.0" />
    <PackageReference Include="Quartz.AspNetCore" Version="3.13.1" />
    <PackageReference Include="Quartz.Extensions.DependencyInjection" Version="3.14.0" />
    <PackageReference Include="Quartz.Serialization.Json" Version="3.13.1" />
    <PackageReference Include="securifybv.ShellLink" Version="0.1.0" />
    <PackageReference Include="Serilog.AspNetCore" Version="9.0.0" />
    <PackageReference Include="Serilog.Sinks.BrowserConsole" Version="8.0.0" />
    <PackageReference Include="Serilog.Sinks.Console" Version="6.0.0" />
    <PackageReference Include="SmartComponents.LocalEmbeddings" Version="0.1.0-preview10148" />
    <PackageReference Include="SQLite" Version="3.13.0" />
    <PackageReference Include="System.Data.SQLite" Version="1.0.119" />
    <PackageReference Include="System.Reactive" Version="6.0.1" />
    <PackageReference Include="System.Resources.Extensions" Version="9.0.2" />
    <PackageReference Include="Vanara.PInvoke.User32" Version="4.1.1" />
    <PackageReference Include="Vanara.Windows.Shell" Version="4.1.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Common\Common.csproj" />
    <ProjectReference Include="..\Generation\Generation.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Resource.Designer.cs">
      <DependentUpon>Resource.resx</DependentUpon>
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Resource.resx">
      <LastGenOutput>Resource.Designer.cs</LastGenOutput>
      <Generator>PublicResXFileCodeGenerator</Generator>
    </EmbeddedResource>
  </ItemGroup>


  <ItemGroup>
    <Compile Remove="Logs\**" />
    <Content Remove="Logs\**" />
    <EmbeddedResource Remove="Logs\**" />
    <None Remove="Logs\**" />
    <!--<StaticWebAsset Remove="$(NuGetPackageRoot)**\staticwebassets\*.css" />
    <StaticWebAsset Remove="$(NuGetPackageRoot)**\staticwebassets\*.js" />-->
  </ItemGroup>



  <!-- Exclude Blazored.Toast bundle scp.css from fingerprinting/copied --><!--
  <ItemGroup>
    <Content Remove="$(NuGetPackageRoot)**\Blazored.Toast.bundle.scp.css" />
    <StaticWebAsset Remove="$(NuGetPackageRoot)**\Blazored.Toast.bundle.scp.css" />
  </ItemGroup>

  --><!-- Manually embed it once with fixed LogicalName --><!--
  <ItemGroup>
    <EmbeddedResource Include="$(NuGetPackageRoot)**\blazored.toast\4.2.1\staticwebassets\Blazored.Toast.bundle.scp.css">
      --><!-- Change slashes to dots --><!--
      <LogicalName>wwwroot._content.Blazored.Toast.Blazored.Toast.bundle.scp.css</LogicalName>
      <Type>Non-Resx</Type>
      <WithCulture>false</WithCulture>
    </EmbeddedResource>
  </ItemGroup>-->

  <!-- Exclude Blazor.ContextMenu CSS from fingerprinting/copied -->
  <ItemGroup>
    <Content Remove="$(NuGetPackageRoot)**\blazorContextMenu.css" />
    <StaticWebAsset Remove="$(NuGetPackageRoot)**\blazorContextMenu.css" />
  </ItemGroup>

  <!-- Manually embed Blazor.ContextMenu CSS with fixed LogicalName -->
  <ItemGroup>
    <EmbeddedResource Include="$(NuGetPackageRoot)**\blazor.contextmenu\2.1.0\staticwebassets\blazorContextMenu.css">
      <LogicalName>wwwroot._content.Blazor.ContextMenu.blazorContextMenu.css</LogicalName>
      <Type>Non-Resx</Type>
      <WithCulture>false</WithCulture>
    </EmbeddedResource>
  </ItemGroup>

  <!-- Exclude Blazor.ContextMenu JS from fingerprinting/copied -->
  <ItemGroup>
    <Content Remove="$(NuGetPackageRoot)**\blazorContextMenu.js" />
    <StaticWebAsset Remove="$(NuGetPackageRoot)**\blazorContextMenu.js" />
  </ItemGroup>

  <!-- Manually embed Blazor.ContextMenu JS with fixed LogicalName -->
  <ItemGroup>
    <EmbeddedResource Include="$(NuGetPackageRoot)**\blazor.contextmenu\2.1.0\staticwebassets\blazorContextMenu.js">
      <LogicalName>wwwroot._content.Blazor.ContextMenu.blazorContextMenu.js</LogicalName>
      <Type>Non-Resx</Type>
      <WithCulture>false</WithCulture>
    </EmbeddedResource>
  </ItemGroup>

  <!-- Exclude Blazor.ContextMenu minified CSS from fingerprinting/copied -->
  <ItemGroup>
    <Content Remove="$(NuGetPackageRoot)**\blazorContextMenu.min.css" />
    <StaticWebAsset Remove="$(NuGetPackageRoot)**\blazorContextMenu.min.css" />
  </ItemGroup>

  <!-- Manually embed Blazor.ContextMenu minified CSS with fixed LogicalName -->
  <ItemGroup>
    <EmbeddedResource Include="$(NuGetPackageRoot)**\blazor.contextmenu\2.1.0\staticwebassets\blazorContextMenu.min.css">
      <LogicalName>wwwroot._content.Blazor.ContextMenu.blazorContextMenu.min.css</LogicalName>
      <Type>Non-Resx</Type>
      <WithCulture>false</WithCulture>
    </EmbeddedResource>
  </ItemGroup>

  <!-- Exclude Blazor.ContextMenu minified JS from fingerprinting/copied -->
  <ItemGroup>
    <Content Remove="$(NuGetPackageRoot)**\blazorContextMenu.min.js" />
    <StaticWebAsset Remove="$(NuGetPackageRoot)**\blazorContextMenu.min.js" />
  </ItemGroup>

  <!-- Manually embed Blazor.ContextMenu minified JS with fixed LogicalName -->
  <ItemGroup>
    <EmbeddedResource Include="$(NuGetPackageRoot)**\blazor.contextmenu\2.1.0\staticwebassets\blazorContextMenu.min.js">
      <LogicalName>wwwroot._content.Blazor.ContextMenu.blazorContextMenu.min.js</LogicalName>
      <Type>Non-Resx</Type>
      <WithCulture>false</WithCulture>
    </EmbeddedResource>
  </ItemGroup>

  <!-- Exclude Blazored.Typeahead CSS from fingerprinting -->
  <ItemGroup>
    <Content Remove="$(NuGetPackageRoot)**\blazored-typeahead.css" />
    <StaticWebAsset Remove="$(NuGetPackageRoot)**\blazored-typeahead.css" />
  </ItemGroup>

  <!-- Manually embed Blazored.Typeahead CSS with fixed LogicalName -->
  <ItemGroup>
    <EmbeddedResource Include="$(NuGetPackageRoot)**\blazored.typeahead\4.7.0\staticwebassets\blazored-typeahead.css">
      <LogicalName>wwwroot._content.Blazored.Typeahead.blazored-typeahead.css</LogicalName>
      <Type>Non-Resx</Type>
      <WithCulture>false</WithCulture>
    </EmbeddedResource>
  </ItemGroup>

  <!-- Exclude Blazored.Typeahead JS from fingerprinting -->
  <ItemGroup>
    <Content Remove="$(NuGetPackageRoot)**\blazored-typeahead.js" />
    <StaticWebAsset Remove="$(NuGetPackageRoot)**\blazored-typeahead.js" />
  </ItemGroup>

  <!-- Manually embed Blazored.Typeahead JS with fixed LogicalName -->
  <ItemGroup>
    <EmbeddedResource Include="$(NuGetPackageRoot)**\blazored.typeahead\4.7.0\staticwebassets\blazored-typeahead.js">
      <LogicalName>wwwroot._content.Blazored.Typeahead.blazored-typeahead.js</LogicalName>
      <Type>Non-Resx</Type>
      <WithCulture>false</WithCulture>
    </EmbeddedResource>
  </ItemGroup>


	<!--
  <ItemGroup>
    <EmbeddedResource Include="$(NuGetPackageRoot)**\Blazored.Toast.bundle.scp.css">
      <LogicalName>wwwroot._content.Blazored.Toast.Blazored.Toast.bundle.scp.css</LogicalName>
      <Type>Non-Resx</Type>
      <WithCulture>false</WithCulture>
    </EmbeddedResource>

    <EmbeddedResource Include="$(NuGetPackageRoot)**\BlazorDateRangePicker.bundle.scp.css">
      <LogicalName>wwwroot._content.BlazorDateRangePicker.BlazorDateRangePicker.bundle.scp.css</LogicalName>
      <Type>Non-Resx</Type>
      <WithCulture>false</WithCulture>
    </EmbeddedResource>

    <EmbeddedResource Include="$(NuGetPackageRoot)**\blazorContextMenu.css">
      <LogicalName>wwwroot._content.Blazor.ContextMenu.blazorContextMenu.css</LogicalName>
      <Type>Non-Resx</Type>
      <WithCulture>false</WithCulture>
    </EmbeddedResource>
    <EmbeddedResource Include="$(NuGetPackageRoot)**\blazorContextMenu.js">
      <LogicalName>wwwroot._content.Blazor.ContextMenu.blazorContextMenu.js</LogicalName>
      <Type>Non-Resx</Type>
      <WithCulture>false</WithCulture>
    </EmbeddedResource>
    <EmbeddedResource Include="$(NuGetPackageRoot)**\blazorContextMenu.min.css">
      <LogicalName>wwwroot._content.Blazor.ContextMenu.blazorContextMenu.min.css</LogicalName>
      <Type>Non-Resx</Type>
      <WithCulture>false</WithCulture>
    </EmbeddedResource>
    <EmbeddedResource Include="$(NuGetPackageRoot)**\blazorContextMenu.min.js">
      <LogicalName>wwwroot._content.Blazor.ContextMenu.blazorContextMenu.min.js</LogicalName>
      <Type>Non-Resx</Type>
      <WithCulture>false</WithCulture>
    </EmbeddedResource>
    <EmbeddedResource Include="$(NuGetPackageRoot)**\blazored-typeahead.css">
      <LogicalName>wwwroot._content.Blazored.Typeahead.blazored-typeahead.css</LogicalName>
      <Type>Non-Resx</Type>
      <WithCulture>false</WithCulture>
    </EmbeddedResource>
    <EmbeddedResource Include="$(NuGetPackageRoot)**\blazored-typeahead.js">
      <LogicalName>wwwroot._content.Blazored.Typeahead.blazored-typeahead.js</LogicalName>
      <Type>Non-Resx</Type>
      <WithCulture>false</WithCulture>
    </EmbeddedResource>
  </ItemGroup>
 -->

  <!-- Enable embedding of the wwwroot folder -->
  <PropertyGroup>
    <EmbedWwwroot>true</EmbedWwwroot>
    <!-- https://github.com/dotnet/aspnetcore/issues/50894 -->
  </PropertyGroup>

  <PropertyGroup Condition="$(EmbedWwwroot) == 'true'">
    <!-- Make sure we bundle static files before preparing resources -->
    <PrepareResourcesDependsOn>
			$(PrepareResourcesDependsOn);
			GetStaticWebAssetsProjectConfiguration;
			_SplitPublishStaticWebAssetsByCopyOptions;
			BundleScopedCssFiles
    </PrepareResourcesDependsOn>
  </PropertyGroup>

  <!-- Embed all files under wwwroot as EmbeddedResource items. -->
  <ItemGroup Condition="$(EmbedWwwroot) == 'true'">
    <EmbeddedResource Include="wwwroot\**">
      <LogicalName>
				wwwroot.$([MSBuild]::ValueOrDefault('%(RecursiveDir)', '')
				.Replace($([System.String]::new($([System.IO.Path]::DirectorySeparatorChar))), '.'))
				%(Filename)%(Extension)
      </LogicalName>
    </EmbeddedResource>
  </ItemGroup>

  <!-- Log out the value of $(EmbedWwwroot) before the build actually starts -->
  <Target Name="DebugEmbedWwwrootValue" BeforeTargets="BeforeBuild">
    <Message Text="EmbedWwwroot value: '$(EmbedWwwroot)'" Importance="High" />
  </Target>

  <!-- Show everything discovered by ComputeStaticWebAssets -->
  <Target Name="DebugComputeStaticWebAssets" AfterTargets="ComputeStaticWebAssets" Condition="$(EmbedWwwroot) == 'true'">
    <Message Text="=== DebugComputeStaticWebAssets ===" Importance="High" />
    <Message Text="_StaticWebAssetsToPublish:" Importance="High" />
    <Message Text="@( _StaticWebAssetsToPublish )" Importance="High" />
  </Target>

  <!-- Show final items used for publishing after conflicts/fingerprinting -->
  <Target Name="DebugPublishStaticWebAssets" AfterTargets="_ComputeStaticWebAssetsPublishManifest" Condition="$(EmbedWwwroot) == 'true'">
    <Message Text="=== DebugPublishStaticWebAssets ===" Importance="High" />
    <Message Text="_PublishStaticWebAssetsPreserveNewest:" Importance="High" />
    <Message Text="@( _PublishStaticWebAssetsPreserveNewest )" Importance="High" />
    <Message Text="_PublishStaticWebAssetsCopyAlways:" Importance="High" />
    <Message Text="@( _PublishStaticWebAssetsCopyAlways )" Importance="High" />
  </Target>

  <!-- If you want messages for the 'scp.css' outputs (scoped CSS), log them too -->
  <Target Name="DebugScopedCss" AfterTargets="ProcessScopedCssFiles" Condition="$(EmbedWwwroot) == 'true'">
    <Message Text="=== DebugScopedCss ===" Importance="High" />
    <Message Text="_ScopedCssFilesToBundle:" Importance="High" />
    <Message Text="@(_ScopedCssFilesToBundle)" Importance="High" />
    <Message Text="_ScopedCssBundleFile:" Importance="High" />
    <Message Text="@(_ScopedCssBundleFile)" Importance="High" />
  </Target>

  <!-- Debug messages before/after custom 'EmbedStaticAssets' target -->
  <Target Name="DebugBeforeEmbedStaticAssets" BeforeTargets="EmbedStaticAssets" Condition="$(EmbedWwwroot) == 'true'">
    <Message Text="=== DebugBeforeEmbedStaticAssets ===" Importance="High" />
    <Message Text="EmbedWwwroot: $(EmbedWwwroot)" Importance="High" />
    <Message Text="StaticWebAssetsBasePath: $(StaticWebAssetsBasePath)" Importance="High" />
    <Message Text="PublishDir: $(PublishDir)" Importance="High" />
    <Message Text="Items in _PublishStaticWebAssetsPreserveNewest:" Importance="High" />
    <Message Text="@(EmbeddedPublishStaticWebAssetsPreserveNewest)" Importance="High" />
    <Message Text="Items in _PublishStaticWebAssetsCopyAlways:" Importance="High" />
    <Message Text="@(EmbeddedPublishStaticWebAssetsCopyAlways)" Importance="High" />
  </Target>


  <Target Name="EmbedStaticAssets" AfterTargets="PrepareResources" Condition="$(EmbedWwwroot) == 'true'">
    <!-- Your existing logic here -->
    <ItemGroup>

      <EmbeddedResource Include="@(EmbeddedPublishStaticWebAssetsPreserveNewest)">
        <LogicalName>
					$([MSBuild]::ValueOrDefault('%(TargetPath)', '')
					.Replace($([System.String]::new($([System.IO.Path]::DirectorySeparatorChar))), '.'))
        </LogicalName>
        <Type>Non-Resx</Type>
        <WithCulture>false</WithCulture>
      </EmbeddedResource>

      <EmbeddedResource Include="@(EmbeddedPublishStaticWebAssetsCopyAlways)">
        <LogicalName>
					$([MSBuild]::ValueOrDefault('%(TargetPath)', '')
					.Replace($([System.String]::new($([System.IO.Path]::DirectorySeparatorChar))), '.'))
        </LogicalName>
        <Type>Non-Resx</Type>
        <WithCulture>false</WithCulture>
      </EmbeddedResource>

      <ScopedCssOutputFullPath Include="$(_ScopedCssOutputFullPath)" />
      <EmbeddedResource Include="@(ScopedCssOutputFullPath)" Condition="Exists(@(ScopedCssOutputFullPath))">
        <LogicalName>wwwroot.%(Filename)%(Extension)</LogicalName>
        <Type>Non-Resx</Type>
        <WithCulture>false</WithCulture>
      </EmbeddedResource>
    </ItemGroup>

    <!-- Add debug messages inside this target -->
    <Message Text="=== EmbedStaticAssets Completed ===" Importance="High" />
    <Message Text="All EmbeddedResources after this target:" Importance="High" />
    <Message Text="@(EmbeddedResource)" Importance="High" />
  </Target>

  <!-- Debug messages on your 'PreventCopy' targets to show what's removed -->
  <Target Name="PreventCopyStaticWebAssetsPreserveNewest" BeforeTargets="_PublishCopyStaticWebAssetsPreserveNewest" Condition="$(EmbedWwwroot) == 'true'">
    <Message Text="=== PreventCopyStaticWebAssetsPreserveNewest ===" Importance="High" />
    <Message Text="Original _PublishStaticWebAssetsPreserveNewest:" Importance="High" />
    <Message Text="@(_PublishStaticWebAssetsPreserveNewest)" Importance="High" />

    <ItemGroup>
      <EmbeddedPublishStaticWebAssetsPreserveNewest Include="@(_PublishStaticWebAssetsPreserveNewest)" />
      <_PublishStaticWebAssetsPreserveNewest Remove="@(_PublishStaticWebAssetsPreserveNewest)" />
    </ItemGroup>

    <Message Text="After removal, _PublishStaticWebAssetsPreserveNewest is now empty." Importance="High" />
  </Target>

  <Target Name="PreventCopyStaticWebAssetsAlways" BeforeTargets="_PublishCopyStaticWebAssetsAlways" Condition="$(EmbedWwwroot) == 'true'">
    <Message Text="=== PreventCopyStaticWebAssetsAlways ===" Importance="High" />
    <Message Text="Original _PublishStaticWebAssetsCopyAlways:" Importance="High" />
    <Message Text="@(_PublishStaticWebAssetsCopyAlways)" Importance="High" />

    <ItemGroup>
      <EmbeddedPublishStaticWebAssetsCopyAlways Include="@(_PublishStaticWebAssetsCopyAlways)" />
      <_PublishStaticWebAssetsCopyAlways Remove="@(_PublishStaticWebAssetsCopyAlways)" />
    </ItemGroup>

    <Message Text="After removal, _PublishStaticWebAssetsCopyAlways is now empty." Importance="High" />
  </Target>

  <Target Name="PreventSourceItemsToCopyToPublishDirectory" AfterTargets="GetCopyToPublishDirectoryItems" Condition="$(EmbedWwwroot) == 'true'">
    <Message Text="=== PreventSourceItemsToCopyToPublishDirectory ===" Importance="High" />
    <Message Text="Items about to be removed from _SourceItemsToCopyToPublishDirectory (any that start with 'wwwroot'):" Importance="High" />
    <Message Text="@(_SourceItemsToCopyToPublishDirectory->'%(TargetPath)')" Importance="High" />

    <ItemGroup>
      <_SourceItemsToCopyToPublishDirectory Remove="@(_SourceItemsToCopyToPublishDirectory)" Condition="$([MSBuild]::ValueOrDefault('%(TargetPath)','').StartsWith('wwwroot'))" />
    </ItemGroup>

    <Message Text="=== PreventSourceItemsToCopyToPublishDirectory Done ===" Importance="High" />
  </Target>


  <Target Name="RemoveUnwantedFilesAfterPublish" AfterTargets="Publish">
    <ItemGroup>
      <FilesToDelete Include="$(PublishDir)Common.pdb" />
      <FilesToDelete Include="$(PublishDir)TugboatCaptainsPlayground.staticwebassets.endpoints.json" />
      <FilesToDelete Include="$(PublishDir)web.config" />
    </ItemGroup>
    <Delete Files="@(FilesToDelete)" ContinueOnError="WarnAndContinue" />
    <Message Text="Removed unwanted files after publish: @(FilesToDelete)" Importance="High" />
  </Target>

</Project>
